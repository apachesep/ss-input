{"version":3,"sources":["Ss-input.js","Button.js","Handler.js","Input.js","locale.js","Plugin.js","templates.js","tools.js","selectionMode.js","multiSelection.js","singleSelection.js","textEditorSelection.js","fileSystem.js","history.js","path.js","database.js","search.js","mkdir.js","newFile.js","upload.js","url.js","newRecord.js","refresh.js","imgBox.js","scan.js","templateManager.js","iconSize.js","sort.js","info.js","copy.js","delete.js","textEditor.js","aceEditor.js","rename.js","editRecord.js","sidebar.js","selectAll.js","cache.js","infoBubble.js","nameBubble.js","contextMenu.js","select.js","plugins/fileSystem/download.js","plugins/fileSystem/handlers/deleteHandler.js","plugins/fileSystem/handlers/imgBoxHandler.js","plugins/fileSystem/handlers/infoBubbleHandler.js","plugins/fileSystem/handlers/scanHandler.js","plugins/fileSystem/handlers/searchHandler.js","plugins/fileSystem/handlers/selectAllHandler.js","plugins/fileSystem/handlers/selectionHandler.js","plugins/fileSystem/handlers/sidebarHandler.js","plugins/fileSystem/handlers/sortHandler.js","plugins/fileSystem/handlers/uploadHandler.js"],"names":[],"mappingsnjpjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpplBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnxbnnjjvtvZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtrnlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ss-input.min.js","sourcesContent":["(function ($, ssi_modal) {\r\n\r\n    var ssi_buttons = {},\r\n     index = 0;\r\n    this.Ss_input = function (element, option) {\r\n        var defaults = {\r\n            plugins: [],\r\n            modalOptions: {//http://ssbeefeater.github.io/#ssi-modal/documentation\r\n                sizeClass: 'large',\r\n                fixedHeight: true,\r\n                fitScreen: true,\r\n                buttons: []\r\n            },\r\n            permissions: ['all'],\r\n            excludePlugin: [],\r\n            language: 'en',\r\n            mode: 'selection',\r\n            storageType: 'fileSystem',\r\n            showTo: 'modalWindow',\r\n            responseValidation: false\r\n        };\r\n        this.ssi_excludeList = {};\r\n        this.options = $.extend(true, defaults, option);\r\n        this.requireAfter = ['scan'];\r\n        this.uniqueId = index;\r\n        this.readOnlyMode = false;\r\n        this.plugins = [];\r\n        this.pluginNames = [];\r\n        this.handlersGroup = 'handlers';\r\n        this.corePlugins = [];\r\n        this.initializedButtons = {};\r\n        this.readyState = false;\r\n        this.language = Ss_input.locale[this.options.language];\r\n        this.$element = $(element);\r\n        index++;\r\n        this.init();\r\n    };\r\n    Ss_input.prototype.buttonSelectors = {\r\n        'menu': '#ssi-menuButtons',\r\n        'contextMenu': '#ssi-contextMenuUl',\r\n        'options': '#ssi-TasksBtn+ul',\r\n        'actions': '#ssi-actionsBtn+ul',\r\n        'items': '.ssi-optionsDiv',\r\n        'bottom': '#ssi-rightButtons',\r\n        'openWith': '#ssi-openWithBtn ul',\r\n        'editWith': '#ssi-editWithBtn ul'\r\n    };\r\n    Ss_input.prototype.init = function () {\r\n        var checkRequirements = Ss_input.tools.keyExists(this.options.storageType, Ss_input.storageTypes);\r\n        checkRequirements = checkRequirements.concat(this.options.mode != 'manager' ? Ss_input.tools.keyExists(this.options.mode, Ss_input.modePlugins) : [], Ss_input.tools.keyExists(this.require, Ss_input.plugins));\r\n        if (checkRequirements.length != 0) {\r\n            console.log('Some requirements are missing: ' + checkRequirements.toString());\r\n            return;\r\n        }\r\n        var thisS = this;\r\n        if (this.options.plugins.length > 0) {\r\n            this.pluginNames = this.options.plugins;\r\n            var missing = Ss_input.tools.arrayValuesInArray(this.require, this.pluginNames);\r\n            if (missing) {\r\n                this.pluginNames = this.pluginNames.concat(missing);\r\n            }\r\n        } else {\r\n            for (var pluginName in Ss_input.plugins) {\r\n                this.pluginNames.push(pluginName);\r\n            }\r\n        }\r\n        this.pluginInit(this.options.storageType, Ss_input.storageTypes);\r\n        this[this.options.storageType] = this.corePlugins[this.options.storageType];\r\n        if (this.options.mode != 'manager') {\r\n            this.pluginInit(this.options.mode, Ss_input.modePlugins);\r\n            this[this.options.mode] = this.corePlugins[this.options.mode];\r\n        } else {\r\n            if (this.options.showTo != 'modalWindow')\r\n                this.options.showTo = this.$element;\r\n            this.$element.addClass('ss-input');\r\n\r\n        }\r\n        if (this.options.showTo === 'modalWindow') {\r\n            this.setModal();\r\n        } else {\r\n            var $showTo = $(this.options.showTo);\r\n            if (!$showTo.is('div')) {\r\n                console.log('Use a div.');\r\n                return;\r\n            }\r\n            thisS.$element.trigger('earlyShowAction');\r\n            var content = thisS.setContent();\r\n            if (!content) {\r\n                return;\r\n            }\r\n            $showTo.first().addClass('ssi-mainModal').html(content);\r\n            thisS.setHeight();\r\n        }\r\n    };\r\n    Ss_input.prototype.setModal = function () {\r\n        var thisS = this;\r\n        $.extend(this.options.modalOptions, {\r\n            className: \"ssi-mainModal\",\r\n            onClose: function () {\r\n                thisS.$element.trigger('resetAction.ssi').trigger('closeAction.ssi');\r\n            }\r\n        });\r\n        this.$element.on('click', function (e) {\r\n            e.preventDefault();\r\n            thisS.$element.trigger('earlyShowAction');\r\n            var $eTarget = $(e.target);\r\n            if ($eTarget.hasClass('ss-input')) {\r\n                var modal = thisS.createWindow(thisS.options.modalOptions);\r\n                var content = thisS.setContent();\r\n                if (!content) {\r\n                    modal.close();\r\n                    return;\r\n                }\r\n                modal.setContent(content);\r\n                thisS.setHeight();\r\n            }\r\n        });\r\n    };\r\n    Ss_input.prototype.setAfterEvents = function () {\r\n        var optionsDiv, thisS = this;\r\n        $(window).bind('beforeunload', function () {\r\n            thisS.$element.trigger('resetAction.ssi').trigger('closeAction.ssi').off('.ssi');\r\n        });\r\n\r\n        this.$content.on({\r\n            'mouseenter.ssi': function (e) {\r\n                e.preventDefault();\r\n                optionsDiv = $(this).find('.ssi-optionsDiv');\r\n                optionsDiv.fadeIn(200);//slideDown(100);\r\n            },\r\n            'mouseleave.ssi': function () {\r\n                if (optionsDiv.hasClass('selected') === false) {\r\n                    optionsDiv.fadeOut(200);//.slideUp(100);\r\n                }\r\n            }\r\n        }, '.ssi-displayDiv');\r\n        this.$element.on('closeAction.ssi', function () {\r\n            ssi_modal.removeAll();\r\n            thisS.currentCollection = {};\r\n            thisS.initializedButtons = [];\r\n            thisS.readOnlyMode = '';\r\n            $(this).off('.ssi');\r\n            $('body').off('.ssi');\r\n        });\r\n        this.$content.on('click', function (e) {\r\n            if (!$(e.target).is('input'))$(this).focus();\r\n        });\r\n\r\n    };\r\n    Ss_input.prototype.setContent = function () {\r\n        var checkPlugin = Ss_input.tools.keyExists(this.requireAfter, Ss_input.plugins);\r\n        var requirePending = Ss_input.tools.arrayValuesInArray(this.requireAfter, this.pluginNames);\r\n        this.pluginNames = this.pluginNames.concat(requirePending);\r\n        if (checkPlugin.length != 0) {\r\n            console.log('Some requirements are missing: ' + checkPlugin.toString());\r\n            return false;\r\n        }\r\n        this.$content = $(Ss_input.templates.mainContent);\r\n        if (this.options.showTo !== 'modalWindow') {\r\n            this.$content.append(Ss_input.templates.bottomButtons)\r\n        }\r\n        if ($.isEmptyObject(this.plugins)) {\r\n            this.pluginInit(this.pluginNames);\r\n        } else {\r\n            this.resetPlugins(this.plugins);\r\n        }\r\n        this.$element.trigger('showAction');\r\n        this.buttonsInit();\r\n        this.setAfterEvents();\r\n        return this.$content;\r\n    };\r\n    Ss_input.prototype.destroy = function () {\r\n        this.$element.trigger('closeAction.ssi');\r\n        this.$content.remove();\r\n    };\r\n    Ss_input.prototype.checkPermissions = function (permissions, name) {\r\n        return ((permissions === 'read' || this.options.permissions[0] === 'all' || Ss_input.tools.arrayValuesInArray(permissions, this.options.permissions).length === 0 || $.inArray(name, this.options.permissions) !== -1) && ($.inArray(name, this.options.excludePlugin) === -1 || $.inArray(name, this.require) !== -1 || $.inArray(name, this.requireAfter) !== -1));\r\n    };\r\n    Ss_input.prototype.handlerInit = function (handler, plugin, handlersGroup) {\r\n        new Ss_input[handlersGroup][handler](this, plugin, handler);\r\n    };\r\n    Ss_input.prototype.pluginInit = function (plugins, pluginGroup) {\r\n        plugins = Ss_input.tools.toArray(plugins);\r\n        for (var i = 0, length = plugins.length; i < length; i++) {\r\n            try {\r\n                pluginGroup = pluginGroup || Ss_input.plugins;\r\n                if (Ss_input.tools.keyExists(plugins[i], pluginGroup).length != 0) {\r\n                    throw('did not load');\r\n                }\r\n                if (!plugins[i]) {\r\n                    continue;\r\n                }\r\n                var plugin = new pluginGroup[plugins[i]](this, this.options[plugins[i]]);\r\n                if (!this.checkPermissions(plugin.permissions, plugins[i]) || $.isEmptyObject(plugin) || Ss_input.tools.keyExists(plugins[i], this[plugin.type]).length === 0) {\r\n                    continue;\r\n                }\r\n                var unloadedPlugins = Ss_input.tools.keyExists(plugin.require, pluginGroup);\r\n                if (unloadedPlugins.length === 0) {\r\n                    var notInitialized = Ss_input.tools.keyExists(plugin.require, this[plugin.type]);\r\n                    this.pluginInit(notInitialized);\r\n                    if (Ss_input.tools.keyExists(notInitialized, this.plugins).length === 0 || Ss_input.tools.keyExists(notInitialized, this.corePlugins).length === 0) {\r\n                        this[plugin.type][plugins[i]] = plugin;\r\n                        if (Ss_input[this.handlersGroup].hasOwnProperty(plugins[i])) {\r\n                            this.handlerInit(plugins[i], plugin, this.handlersGroup);\r\n                        } else if (Ss_input.handlers.hasOwnProperty(plugins[i])) {\r\n                            this.handlerInit(plugins[i], plugin, 'handlers');\r\n                        }\r\n                        plugin.init();\r\n                    } else {\r\n                        throw('requires ' + notInitialized.toString() + '.');\r\n                    }\r\n                } else {\r\n                    throw('requires ' + unloadedPlugins.toString() + '.');\r\n                }\r\n            } catch (error) {\r\n                console.log(plugins[i] + ' ' + error);\r\n            }\r\n\r\n        }\r\n    };\r\n    Ss_input.prototype.resetPlugins = function (pluginGroup) {\r\n        for (var pluginName in pluginGroup) {\r\n            var plugin = pluginGroup[pluginName];\r\n            if (Ss_input[this.handlersGroup].hasOwnProperty(pluginName)) {\r\n                this.handlerInit(pluginName, plugin, this.handlersGroup);\r\n            } else if (Ss_input.handlers.hasOwnProperty(pluginName)) {\r\n                this.handlerInit(pluginName, plugin, 'handlers');\r\n            }\r\n            plugin.init();\r\n        }\r\n    };\r\n    Ss_input.prototype.coreButtonsInit = function (type) {\r\n        switch (Ss_input.tools.findKey(type, this.buttonSelectors)) {\r\n            case 'contextMenu':\r\n                break;\r\n            case 'actions':\r\n                this.$content.find(this.buttonSelectors['menu']).append(this.addButton({\r\n                    id: 'ssi-actionsBtn',\r\n                    title: this.language.actions,\r\n                    label: '<div class=\"icon ssi-actionsIcon\"></div>',\r\n                    dropDown: true,\r\n                    selectionRequired: true\r\n                }, 'menuButton', false));\r\n                break;\r\n            case 'options':\r\n                this.$content.find(this.buttonSelectors['menu']).append(this.addButton({\r\n                    id: 'ssi-TasksBtn',\r\n                    title: this.language.options,\r\n                    label: '<div class=\"icon ssi-optionsIcon\"></div>',\r\n                    dropDown: true\r\n                }, 'menuButton', false));\r\n                break;\r\n            case 'openWith':\r\n                this.$content.find(this.buttonSelectors['contextMenu']).append(this.addButton({\r\n                    id: 'ssi-openWithBtn',\r\n                    title: 'openWith', //this.language.openWith,\r\n                    label: '<span class=\"icon ssi-openWithIcon\"></span>openWith',\r\n                    selectionRequired: true,\r\n                    subMenu: true\r\n                }, 'listButton', false));\r\n                break;\r\n            case 'editWith':\r\n                this.$content.find(this.buttonSelectors['contextMenu']).append(this.addButton({\r\n                    id: 'ssi-editWithBtn',\r\n                    title: 'editWith', //this.language.openWith,\r\n                    label: '<span class=\"icon ssi-editWithIcon\"></span>editWith',\r\n                    subMenu: true,\r\n                    selectionRequired: true\r\n                }, 'listButton', false));\r\n                break;\r\n        }\r\n    };\r\n    Ss_input.prototype.buttonsInit = function () {\r\n\r\n        var selectorList = this.buttonSelectors;\r\n        this.$content.find(selectorList['menu']).append(ssi_buttons[selectorList['menu']]);\r\n        delete  ssi_buttons[selectorList['menu']];\r\n        for (var selector in ssi_buttons) {\r\n            try {\r\n                var selectors = selector.split(','), toInitialize;\r\n                if ((toInitialize = Ss_input.tools.keyExists(selectors, this.initializedButtons)).length != 0) {\r\n                    for (var i = 0, length = toInitialize.length; i < length; i++) {\r\n                        this.initializedButtons[toInitialize[i]] = true;\r\n                        this.coreButtonsInit(toInitialize[i]);\r\n                    }\r\n                }\r\n                this.$content.find(selector).append(ssi_buttons[selector]);\r\n            } catch (err) {\r\n//removeIf(production)\r\n                console.log(err);\r\n//endRemoveIf(production)\r\n            }\r\n        }\r\n        ssi_buttons = {};\r\n    };\r\n    Ss_input.prototype.addButton = function (buttonOptions, type, appendTo, excludeItem) {\r\n        buttonOptions = Ss_input.tools.toArray(buttonOptions);\r\n        type = type || 'menuButton';\r\n        var buttons = [];\r\n        for (var y = 0, optionsLength = buttonOptions.length; y < optionsLength; y++) {\r\n            if (appendTo == 'bottom' && this.options.showTo === 'modalWindow') {\r\n                this.options.modalOptions.buttons.push(buttonOptions[y]);\r\n                continue;\r\n            }\r\n            var $btn = new Ss_input.Button(buttonOptions[y], type, this.$content);\r\n            if (appendTo) {\r\n                if (appendTo instanceof $) {\r\n                    appendTo.append($btn);\r\n                } else {\r\n                    if (appendTo != 'itemButton') {\r\n                        var ButtonWrapper = [];\r\n                        for (var i = 0, length = appendTo.length; i < length; i++) {\r\n                            ButtonWrapper.push(this.buttonSelectors[appendTo[i]]);\r\n                        }\r\n                        if (ssi_buttons.hasOwnProperty(ButtonWrapper.toString())) {\r\n                            ssi_buttons[ButtonWrapper.toString()].push($btn);\r\n                        } else {\r\n                            ssi_buttons[ButtonWrapper.toString()] = [$btn];\r\n                        }\r\n                        if (excludeItem && buttonOptions[y].selectionRequired) {\r\n                            this.ssi_excludeList[buttonOptions[y].className] = excludeItem;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            buttons.push($btn);\r\n        }\r\n        return buttons.length == 1 ? buttons[0] : buttons;\r\n    };\r\n    Ss_input.prototype.notify = function (type, msg) {\r\n        ssi_modal.notify(type, {overrideOther: true, content: msg})\r\n    };\r\n    Ss_input.prototype.checkExcludedButtons = function (onHide) {\r\n        var excludeList = this.ssi_excludeList,\r\n         selected = this.get$selectedItems();\r\n        var $mustSelect = this.$content.find('.ssi-mustSelect').removeClass('ssi-hidden disabled');\r\n        for (var className in excludeList) {\r\n            selected.each(function () {\r\n                var info = $(this).data('info');\r\n                if (eval(Ss_input.tools.dataReplace(excludeList[className], 'info')) == 'false') {\r\n                    var hiddenFields = $mustSelect.filter('.' + className).addClass('ssi-hidden');\r\n                    if (typeof onHide === 'function')\r\n                        onHide(hiddenFields);\r\n                    return false;\r\n                }\r\n            })\r\n        }\r\n    };\r\n    Ss_input.prototype.createWindow = function (options, trigger) {\r\n        return ssi_modal.show(options, trigger);\r\n    };\r\n    Ss_input.prototype.get$mainElementById = function (id, $content) {\r\n        $content = $content || this.$content;\r\n        return $content.find(\".ssi-mainElement[data-ID='\" + id + \"']\");\r\n    };\r\n    Ss_input.prototype.get$mainElement = function ($e) {\r\n        return ($e.hasClass('ssi-mainElement') ? $e : $e.parents('.ssi-itemWrapper').find('.ssi-mainElement'));\r\n    };\r\n    Ss_input.prototype.getId = function ($e) {\r\n        if ($e) {\r\n            if (typeof $e === 'string')\r\n                return this.get$mainElementById($e).attr('data-ID');\r\n            return this.get$mainElement($e).attr('data-ID');\r\n        }\r\n        var idArray = [];\r\n        this.get$selectedItems().each(function () {\r\n            idArray.push($(this).attr('data-ID'));\r\n        });\r\n        return idArray;\r\n    };\r\n    Ss_input.prototype.get$itemWrapper = function ($e) {\r\n        return $e.parents('.ssi-itemWrapper');\r\n    };\r\n    Ss_input.prototype.get$selectedItems = function ($e) {\r\n        try {\r\n            var select = this.plugins['select'];\r\n            if ($e) {\r\n                return this.get$mainElement($e)\r\n            }\r\n            if (select.selectionList.length > 0) {\r\n                return $('.ssi-mActive');\r\n            }\r\n            return this.plugins['contextMenu'].rightClickItem || $();\r\n\r\n        } catch (err) {\r\n            //removeIf(production)\r\n            console.log(err.message);\r\n            //endRemoveIf(production)\r\n            return $();\r\n        }\r\n    };\r\n    Ss_input.prototype.getSelectedData = function ($e) {\r\n        try {\r\n            var $items = this.get$selectedItems($e);\r\n            var data = [];\r\n            $items.each(function () {\r\n                data.push($(this).data('info'))\r\n            });\r\n            return data;\r\n        } catch (err) {\r\n            //removeIf(production)\r\n            console.log(err.message);\r\n            //endRemoveIf(production)\r\n            return [];\r\n        }\r\n    };\r\n    Ss_input.prototype.getSelectedField = function (fieldName, $e) {\r\n        var selectedData = this.getSelectedData($e), fieldList = [];\r\n        for (var i = 0, length = selectedData.length; i < length; i++) {\r\n            try {\r\n                fieldList.push(selectedData[i][fieldName]);\r\n            } catch (err) {\r\n                //removeIf(production)\r\n                console.log(err.message);\r\n                //endRemoveIf(production)\r\n            }\r\n        }\r\n        return fieldList\r\n    };\r\n    Ss_input.prototype.getPageData = function (path) {\r\n        var cache = this.plugins['cache'], itemList = [];\r\n        if (cache) {\r\n            itemList = cache.getCachedPage(path).data;\r\n        } else {\r\n            if (path && path != this.currentCollection.id)return [];\r\n            this.$content.find('.ssi-selectable').each(function () {\r\n                itemList.push($(this).data('info'))\r\n            });\r\n        }\r\n        return itemList;\r\n    };\r\n    Ss_input.prototype.getItemData = function (key, value, path) {\r\n        return Ss_input.tools.findByKey(this.getPageData(path), key, value);\r\n    };\r\n    Ss_input.prototype.getUrlList = function () {\r\n        try {\r\n            var select = this.plugins['select'];\r\n            if (select.selectionList.length > 0) {\r\n                return select.selectionList;\r\n            } else {\r\n                return [this.plugins['contextMenu'].rightClickItem.attr('data-ID')];\r\n            }\r\n        } catch (err) {\r\n            //removeIf(production)\r\n            console.log(err.message);\r\n            //endRemoveIf(production)\r\n            return [];\r\n        }\r\n    };\r\n    Ss_input.prototype.ajaxCall = function (options, callback, catchError) {\r\n        options = options || {};\r\n        var $progressBar = this.$content.find('#ssi-progressBar');\r\n        var xhr = function () {\r\n            var xhr = new window.XMLHttpRequest();\r\n            xhr.addEventListener(\"progress\", function (e) {\r\n                if (e.lengthComputable) {\r\n                    var percentComplete = e.loaded / e.total;\r\n                    $progressBar\r\n                     .css({\r\n                         width: percentComplete * 100 + '%'\r\n                     });\r\n                } else {\r\n                    $progressBar.css('width', '100%');\r\n                }\r\n            }, false);\r\n\r\n            return xhr;\r\n        };\r\n        var thisS = this;\r\n        var defaults = {\r\n            xhr: xhr,\r\n            type: 'POST',\r\n            beforeSend: function () {\r\n                thisS.$content.find('#ssi-loader').removeClass('ssi-hidden');\r\n                $progressBar.removeClass('ssi-hidden');\r\n            }\r\n\r\n        };\r\n        options = $.extend({}, defaults, options);\r\n        if (options.stringifyData) {\r\n            options.data = JSON.stringify(options.data)\r\n        }\r\n        $progressBar.removeClass('hide');\r\n        this.$element.trigger('sendRequestAction.ssi');\r\n        $.ajax(options).done(function (data, textStatus, jqXHR) {\r\n            thisS.$element.trigger('responseAction.ssi');\r\n            if (!callback)return;\r\n            var response;\r\n            try {\r\n                response = $.parseJSON(data);\r\n            } catch (err) {\r\n                response = data;\r\n            }\r\n            data = response;\r\n            <!--removeIf(production)-->\r\n            /*\r\n             <!--endRemoveIf(production)-->\r\n\r\n             try {\r\n             <!--removeIf(production)-->\r\n             */\r\n            <!--endRemoveIf(production)-->\r\n            if (thisS.options.responseValidation) {\r\n                var valData = thisS.options.responseValidation;\r\n                if (typeof valData.validationKey === 'object' && valData.resultKey == 'validationKey') {\r\n                    if (data.hasOwnProperty(valData.validationKey.success)) {\r\n                        callback(data[valData.validationKey.success], textStatus, jqXHR);\r\n                    } else {\r\n                        throw {\r\n                            type: 'error',\r\n                            msg: data[valData.validationKey.error]\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (data[valData.validationKey] == valData.success) {\r\n                        callback(data[valData.resultKey], textStatus, jqXHR);\r\n                    } else {\r\n                        throw {\r\n                            type: 'error',\r\n                            msg: data[valData.resultKey]\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                callback(data, textStatus, jqXHR);\r\n            }\r\n            <!--removeIf(production)-->\r\n            /*\r\n             <!--endRemoveIf(production)-->\r\n             } catch (err) {\r\n             if(!catchError){\r\n             if (err.type === 'error') {\r\n             thisS.notify('error', err.msg);\r\n             } else {\r\n             console.log(err.msg);\r\n             console.log(data);\r\n             console.log(err.message);\r\n             }\r\n             }else{catchError(err)}\r\n             }\r\n             <!--removeIf(production)-->\r\n             */\r\n            <!--endRemoveIf(production)-->\r\n\r\n        }).fail(function (request, error) {\r\n            if (catchError)\r\n                catchError();\r\n            console.log(arguments);\r\n            console.log(\" Ajax error: \" + error);\r\n        }).complete(function () {\r\n            thisS.reloadProgressbar();\r\n        })\r\n    };\r\n    Ss_input.prototype.setHeight = function (offset) {\r\n        offset = offset || (this.$content.hasClass('ssi-multiPickMode') && this.options.showTo != 'modalWindow' ? 115 : 70);\r\n        var height = parseInt(this.$content.parent().height()) - offset;\r\n        this.$content.find('#ssi-mainContent').css('height', height);\r\n    };\r\n    Ss_input.prototype.openCollection = function (id, url, data) {\r\n        this.$element.trigger('changeCollectionAction.ssi');\r\n        this.plugins['scan'].scanCollection(id, url, data);\r\n    };\r\n    Ss_input.prototype.reloadProgressbar = function () {\r\n        this.$content.find('#ssi-loading').html('');\r\n        var thisS = this;\r\n        setTimeout(function () {\r\n            thisS.$content.find('#ssi-loader').addClass('ssi-hidden');\r\n            thisS.$content.find('#ssi-progressBar')\r\n             .addClass('ssi-hidden')\r\n             .css('width', 0 + '%');\r\n        }, 500);\r\n    };\r\n    $.fn.ss_input = function (opts) {\r\n        return this.each(function () {\r\n            new Ss_input(this, opts)\r\n        });\r\n    };\r\n    return Ss_input;\r\n})(jQuery, ssi_modal);","var Button = function (options, type, $element, input) {\r\n    var defaults = {\r\n        label: '',\r\n        title: '',\r\n        dropDown: false,\r\n        id: '',\r\n        attributes: '',\r\n        selectionRequired: false,\r\n        stopPropagation: true,\r\n        keyPress: '',\r\n        subMenu: false,\r\n        method: function () {\r\n        },\r\n        className: '',\r\n        $element: $element,\r\n        $input: input\r\n    };\r\n    this.options = $.extend({}, defaults, options);\r\n    var thisS = this,\r\n     $template = Ss_input.tools.template(Ss_input.templates.buttons[type], this.options);\r\n    this.$element = $($template).click(function (e) {\r\n        e.preventDefault();\r\n        if (thisS.options.stopPropagation)\r\n            e.stopPropagation();\r\n        if (!$(this).hasClass('disabled')) {\r\n            if (typeof thisS.options.method === 'function') {\r\n                var args = [e];\r\n                if (thisS.options.$input)\r\n                    args.push(Ss_input.tools.sanitizeInput(input.val()));\r\n                thisS.options.method.apply(this, args);\r\n            }\r\n        }\r\n    });\r\n    if (this.options.attributes) {\r\n        this.$element.attr(this.options.attributes);\r\n    }\r\n    if (this.options.keyPress) {\r\n        this.setKeyEvents();\r\n    }\r\n    if (this.options.input) {\r\n        this.getInput();\r\n    } else if (this.options.dropDown) {\r\n        this.setDropDown();\r\n    } else if (this.options.subMenu) {\r\n        this.setSubMenu();\r\n    }\r\n    return this.$element;\r\n};\r\nSs_input.Button = Button;\r\nButton.prototype = {\r\n    setSubMenu: function () {\r\n        var subUlContent = [];\r\n        for (var y = 0, length2 = this.options.subMenu.length; y < length2; y++) {\r\n            subUlContent.push(new Button(this.options.subMenu[y], 'listButton', this.options.$element));\r\n        }\r\n        this.$element.addClass('parent').append($('<ul>').html(subUlContent));\r\n    },\r\n    setDropDown: function () {\r\n        var $dropDown = $('<div class=\"ssi-dropDownWrapper\">');\r\n        var ulContent = [];\r\n        for (var i = 0, length = this.options.dropDown.length; i < length; i++) {\r\n            ulContent.push(new Button(this.options.dropDown[i], 'listButton', this.options.$element));\r\n        }\r\n        this.$element = $dropDown.append(this.$element.addClass('ssi-dropDown'), $('<ul class=\"ssi-dropdown\">').html(ulContent));\r\n    },\r\n    setKeyEvents: function () {\r\n        var thisS = this;\r\n        var condition = \"e.which == thisS.options.keyPress.keyCode &&!$(e.target).is('input')\";\r\n        if (this.options.keyPress.ctrl)\r\n            condition += \"&&e.ctrlKey\";\r\n        if (this.options.keyPress.shift)\r\n            condition += \"&&e.shiftKey\";\r\n        $((this.options.$element || 'body')).on('keydown.ssi', function (e) {\r\n            if (!thisS.$element.hasClass('disabled') && eval(condition) == true) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                thisS.$element.eq(0).trigger('click');\r\n            }\r\n        })\r\n    },\r\n    getInput: function () {\r\n        var $input =new Ss_input.Input(this.options.input), thisS = this,\r\n         $div = $('<div class=\"ssi-btnContainer ' + this.options.input.containerClass + '\">').append($input),\r\n         $wrapper = $('<div>').append(this.$element, $div);\r\n        if (this.options.input.enterKey)\r\n            $input.keyup(function (e) {\r\n                if (e.keyCode == 13) {\r\n                    $(this).next().trigger('click');\r\n                }\r\n            });\r\n        this.$element.click(function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var $eTarget = $(this).addClass('disabled');\r\n            $('.ssi-btnContainer').not('.' + thisS.options.input.containerClass).hide(500);\r\n            $div.toggle(500, function () {\r\n                $eTarget.removeClass('disabled');\r\n                $input.focus();\r\n            });\r\n        });\r\n        if(this.options.input.buttons)\r\n        for (var i = 0, length = this.options.input.buttons.length; i < length; i++) {\r\n            $div.append(new Button(this.options.input.buttons[i], 'menuButton', this.options.$element, $input));\r\n        }\r\n        return this.$element = $wrapper;\r\n\r\n    }\r\n};\r\n","(function ($) {\r\n\r\n    Ss_input.handlers = [];\r\n    var Handler = function (ss_input,pluginInstance,pluginName) {\r\n        this.ssi = ss_input;\r\n        this.plugin=pluginInstance;\r\n        this.pluginName=pluginName;\r\n        this.storage=ss_input.corePlugins[ss_input.options.storageType];\r\n        this.init();\r\n        this.setDefaults(this.defaults);\r\n        this.extendPlugin(this.extend);\r\n    };\r\n    Ss_input.Handler = Handler;\r\n    Handler.prototype = {\r\n        locale: {},\r\n        group:'fileSystem',\r\n        template:{},\r\n        extend:{},\r\n        defaults:{},\r\n        require:[],//Plugins that are required. If something from this list did not load the plugin wont load too.\r\n        init: function () {\r\n        },\r\n        extendPlugin:function(proto){\r\n            $.extend(Object.getPrototypeOf(this.plugin) ,proto);\r\n        },\r\n        setDefaults: function (defaults) {\r\n            $.extend(this.plugin.options,defaults,(this.ssi.options[this.pluginName]||{}));\r\n        },\r\n        unload:function(name){\r\n            this.ssi.pluginNames[ this.ssi.pluginNames.indexOf(name)]=null;\r\n            Ss_input.tools.removeByKey(this.ssi[this.type],name);\r\n        }\r\n    };\r\n    Handler.extend = function (prototype,handlerName) {\r\n        var handler = (handlerName? Ss_input.handlers[handlerName]:this),\r\n         child;\r\n        if(!handler){\r\n            console.log('The handler '+handlerName+' hasn\\'t initialize!');\r\n            return;\r\n        }\r\n        if (prototype.hasOwnProperty('constructor')) {\r\n            child = prototype.constructor;\r\n        }else {\r\n            child = function () {\r\n                return handler.apply(this, arguments);\r\n            };\r\n        }\r\n        $.extend(child.prototype, handler.prototype, prototype);\r\n        return child;\r\n    };\r\n\r\n\r\n})(jQuery);","var Input = function (options, defaultValue) {\r\n    var defaults = {\r\n        checked: true,\r\n        className: \"\",\r\n        id: \"\",\r\n        name: \"\",\r\n        type: \"text\",\r\n        value: \"\"\r\n    };\r\n    this.options = $.extend({}, defaults, options);\r\n    this.defaultValue = defaultValue||this.options.value;\r\n    if (this[this.options.type]) {\r\n        this[this.options.type]();\r\n    } else {\r\n        this.setInput();\r\n    }\r\n    return $(this.$element);\r\n};\r\nSs_input.Input = Input;\r\nInput.prototype = {\r\n    select: function () {\r\n        this.options.select = this.options.select || [];\r\n        this.options.multiple = this.options.multiple || \"\";\r\n        var optionDefaults = {\r\n            value: \"\",\r\n            label: \"\",\r\n            selected: false\r\n        }, selectItems = \"\";\r\n        this.options.multiple = (this.options.multiple ? \"multiple\" : \"\");\r\n        for (var i = 0, length = this.options.options.length; i < length; i++) {\r\n            var itemOption = $.extend({}, optionDefaults, this.options.options[i]);\r\n            if (typeof this.defaultValue !== \"undefined\") {\r\n                this.defaultValue = Ss_input.tools.toArray(this.defaultValue);\r\n                itemOption.selected = $.inArray(itemOption.value, this.defaultValue) !== -1;\r\n            }\r\n            itemOption.selected = (itemOption.selected ? 'selected' : '');\r\n            selectItems += Ss_input.tools.template(Ss_input.templates.input.selectItem, {options: itemOption});\r\n        }\r\n        this.$element = Ss_input.tools.template(Ss_input.templates.input.select, {\r\n            options: this.options,\r\n            selectItems: selectItems\r\n        });\r\n    },\r\n    radio: function () {\r\n        var radioGroupItems = '';\r\n        var radioDefaults = {\r\n            value: \"\",\r\n            label:'',\r\n            name: this.options.name,\r\n            checked: false,\r\n            type:\"radio\"\r\n        };\r\n        for (var i = 0; i < this.options.radio.length; i++) {\r\n            var radio = this.options.radio[i],\r\n             radioOptions = $.extend({}, radioDefaults, radio);\r\n            radioOptions.checked = (typeof this.defaultValue!=='undefined' ? (radioOptions.value == this.defaultValue) : radioOptions.checked);\r\n            radioGroupItems += Ss_input.tools.template(Ss_input.templates.input.radio, {options: radioOptions});\r\n        }\r\n        this.$element = Ss_input.tools.template(Ss_input.templates.input.radioGroup, {\r\n            options: this.options,\r\n            radioGroupItems: radioGroupItems\r\n        });\r\n    },\r\n    checkbox: function () {\r\n        this.options.checked = (typeof this.defaultValue!=='undefined' ? this.defaultValue : this.options.checked);\r\n        this.$element = Ss_input.tools.template(Ss_input.templates.input['checkbox'], {options: this.options});\r\n    },\r\n    setInput: function () {\r\n        this.options.value = this.defaultValue;\r\n        var inputTemplates=Ss_input.templates.input;\r\n        var template=inputTemplates[this.options.type]||inputTemplates['text'];\r\n        this.$element = Ss_input.tools.template(template, {options: this.options});\r\n    }\r\n};\r\n","Ss_input.locale = {\r\n    en: {\r\n        extError: '$1 files are not supported',//$1=file extension ie(exe files are not supported)\r\n        existError: 'This file already exists!',\r\n        existInListError: 'This file is already in the list.',\r\n        uploadImg: 'Upload image',\r\n        replaceMsg: '\"File with name $1 already exists in this folder.Do you want to replace it?',//$1=file name ie(File with name example.jpg already exists...)\r\n        continue: 'Continue',\r\n        replace: 'Replace',\r\n        uploadSuccess: 'The file uploaded successfully!',\r\n        pickSuccess: 'The remote file was selected successfully!',\r\n        successCreated: \"The folder created successfully!\",\r\n        fileSuccessCreated: \"The file created successfully!\",\r\n        mkdirSuccess: 'The folder created successfully!',\r\n        icons: 'Icons',\r\n        insert: 'Insert',\r\n        home: 'Home',\r\n        options: 'Options',\r\n        defaultValues: 'Default values',\r\n        date: 'Date',\r\n        size: 'Size',\r\n        type: 'Type',\r\n        dimensions: 'Dimensions',\r\n        name: 'Name',\r\n        ok: 'Ok',\r\n        cleanCache: 'Clean cache',\r\n        cut: 'Cut',\r\n        copy: 'Copy',\r\n        paste: 'Paste',\r\n        createCopy: 'Create copy',\r\n        skip: 'Skip',\r\n        delete: 'Delete',\r\n        deleteMsg: 'Are you sure that you want to permanently delete the selected files?',\r\n        delSuccess: 'The file deleted successfully!',\r\n        cancel: 'Cancel',\r\n        loadTime: 'Load time',\r\n        location: 'Location',\r\n        info: 'Info',\r\n        details: 'Details',\r\n        preview: 'Preview',\r\n        small: 'Small',\r\n        medium: 'Medium',\r\n        large: 'large',\r\n        iconSize: 'Icon size',\r\n        createFolder: 'Create folder',\r\n        newFile: 'New file',\r\n        fileSaved: 'The file saved!',\r\n        folderExistError: 'The folder with name $1 already exists!',\r\n        previewType: 'Preview',\r\n        refresh: 'Refresh',\r\n        rename: 'Rename',\r\n        search: 'Search',\r\n        newDocument: 'New document',\r\n        editDocument: 'Edit document',\r\n        saveAsNew: 'Save as new',\r\n        saveAndNew: 'Save and new',\r\n        save: 'Save',\r\n        select: 'Select',\r\n        folders: 'Folders',\r\n        files: 'Files',\r\n        all: 'All',\r\n        sort: 'Sort by',\r\n        uploadFiles: 'Upload files',\r\n        url: 'Url',\r\n        addSuccess: 'The file added to your list!',\r\n        successSave: 'The record saved!',\r\n        invalidUrlError: 'The url you entered is not valid!',\r\n        upload: 'Upload',\r\n        limitError: 'You have reached the limit of $1 files.',\r\n        selectedTooltip: 'Selected files',\r\n        selectedBtn: 'Clear selected files',\r\n        checkedTooltip: 'Checked files',\r\n        checkedBtn: 'Clear checked files',\r\n        addUrl: 'Add a url',\r\n        noItems: 'Nothing in the list...',\r\n        images: 'Images',\r\n        textFiles: 'Text files',\r\n        path: 'Path',\r\n        ext: 'Extension',\r\n        mimeType: 'Media type'\r\n    },\r\n    gr: {\r\n        extError: 'Τα $1 αρχεία δεν υποστηρίζονται',\r\n        existError: 'Αυτό το αρχείο υπάρχει ήδη!',\r\n        existInListError: 'Αυτό το αρχείο υπάρχει ήδη στη λίστα!',\r\n        uploadImg: 'Μεταφόρτωση εικόνας',\r\n        upload: 'Μεταφόρτωση',\r\n        replaceMsg: 'Tο αρχείο με όνομα $1 υπάρχει ήδη σε αυτόν τον προορισμό. Θέλετε να το αντικαταστήσετε;',\r\n        continue: 'Συνέχεια',\r\n        successCreated: \"Ο φάκελος δημιουργήθηκε με επιτυχία!\",\r\n        fileSuccessCreated: \"Το αρχείο δημιουργήθηκε με επιτυχία!\",\r\n        replace: 'Αντικατάσταση',\r\n        uploadSuccess: 'ο αρχείο φορτώθηκε επιτυχώς!',\r\n        pickSuccess: 'Το απομακρυσμένο αρχείο επιλέχθηκε με επιτυχία!',\r\n        mkdirSuccess: 'Ο φάκελος δημιουργήθηκε με επιτυχία!',\r\n        icons: 'Εικονίδια',\r\n        insert: 'Προσθήκη',\r\n        home: 'Αρχική',\r\n        options: 'Επιλογές',\r\n        defaultValues: 'Προεπιλεγμένα',\r\n        date: 'Ημ/νια',\r\n        size: 'Μέγεθος',\r\n        type: 'Τύπος',\r\n        name: 'Όνομα',\r\n        path: 'Διαδρομή',\r\n        dimensions: 'Διαστάσεις',\r\n        ok: 'Ok',\r\n        cleanCache: 'Εκκαθάριση cache',\r\n        cut: 'Αποκοπή',\r\n        copy: 'Αντιγραφή',\r\n        paste: 'Επικόλληση',\r\n        preview: 'Προεπισκόπηση',\r\n        images: 'Εικόνες',\r\n        textFiles: 'Αρχεία κειμένου',\r\n        createCopy: 'Δημιουργία αντιγράφου',\r\n        skip: 'Παράβλεψη',\r\n        deleteMsg: 'Είστε σίγουρος ότι θέλετε να διαγράψετε οριστικά τα επιλεγμένα αρχεία;',\r\n        delete: 'Διαγραφή',\r\n        delSuccess: 'Το αρχείο διαγράφηκε με επιτυχία!',\r\n        cancel: 'Ακύρωση',\r\n        loadTime: 'Χρόνος φόρτωσης',\r\n        location: 'Τοποθεσία',\r\n        previewType: 'Προβολή',\r\n        info: 'Πληροφορίες',\r\n        details: 'Λεπτομέρειες',\r\n        ext: 'Επέκταση',\r\n        small: 'Μικρό',\r\n        medium: 'Μεσαίο',\r\n        large: 'Μεγάλο',\r\n        iconSize: 'Μέγεθος εικονιδίων',\r\n        createFolder: 'Δημιουργία φακέλου',\r\n        newFile: 'Νέο αρχείο',\r\n        fileSaved: 'Το αρχείο αποθηκεύτηκε!',\r\n        folderExistError: 'Ο φάκελος με όνομα $1 υπάρχει ήδη',\r\n        refresh: 'Ανανέωση',\r\n        rename: 'Μετονομασία',\r\n        search: 'Αναζήτηση',\r\n        select: 'Επιλογή',\r\n        folders: 'Φακέλων',\r\n        files: 'Αρχείων',\r\n        all: 'Όλων',\r\n        newDocument: 'Νέα κατοχύρωση',\r\n        editDocument: 'Διαμόρφωση',\r\n        saveAsNew: 'Αποθήκευση ως καινούριο',\r\n        saveAndNew: 'Αποθήκευση και καινούριο',\r\n        save: 'Αποθήκευση',\r\n        sort: 'Ταξινόμηση',\r\n        url: 'Διεύθυνση url',\r\n        addSuccess: 'Το αρχείο προστέθηκε στη λίστα !',\r\n        successSave: 'Η εγγραφή αποθηκεύτικε!',\r\n        invalidUrlError: 'Η διεύθυνση URL που εισάγατε δεν είναι έγκυρη!',\r\n        uploadFiles: 'Μεταφόρτωση αρχείων',\r\n        limitError: 'Έχεις φταση στο όριο των $1 αρχείων.',\r\n        selectedTooltip: 'Επιλεγμένα αρχεία',\r\n        selectedBtn: 'Εκκαθάριση επιλεγμένων αρχείων',\r\n        checkedTooltip: 'Στιγματισμένα αρχεία',\r\n        checkedBtn: 'Εκκαθάριση στιγματισμένα αρχείων',\r\n        addUrl: 'Προσθήκη συνδέσμου',\r\n        noItems: 'Δεν υπαρχει κάτι...',\r\n        mimeType: 'Τύπος'\r\n    }\r\n};","(function ($) {\r\n\r\n    Ss_input.plugins = [];\r\n    Ss_input.storageTypes = [];\r\n    Ss_input.modePlugins = [];\r\n    var Plugin = function (ss_input, options) {\r\n        for (var i = 0, length = this.externalResources.length; i < length; i++) {\r\n            try {\r\n                var obj = this.externalResources[i];\r\n                eval(obj)\r\n            } catch (err) {\r\n                //removeIf(production)\r\n                console.log(err);\r\n                //endRemoveIf(production)\r\n                console.log('A required external resource not found:' + obj);\r\n                return {};\r\n            }\r\n        }\r\n        this.ssi = ss_input;\r\n        this.options = $.extend({}, this.defaults, options);\r\n    };\r\n    Ss_input.Plugin = Plugin;\r\n    Plugin.prototype = {\r\n        permissions: 'read',\r\n        locale: {},\r\n        defaults: {},\r\n        template: {},\r\n        externalResources: [],\r\n        type: 'plugins',//or corePlugins\r\n        defaultLanguage: 'en',\r\n        require: [],//Plugins that are required. If something from this list did not load the plugin wont load too.\r\n        translate: function (word, fieldTranslation) {\r\n            var translation;\r\n            if (fieldTranslation == false)\r\n                return word;\r\n            try {\r\n                translation = this.locale[this.ssi.options.language][word];\r\n                if (!translation) {\r\n                    throw 'error';\r\n                }\r\n                return translation;\r\n            } catch (e) {\r\n                try {\r\n                    translation = Ss_input.locale[this.ssi.options.language][word];\r\n                    if (!translation) {\r\n                        throw 'error';\r\n                    }\r\n                    return translation;\r\n                } catch (e) {\r\n                    try {\r\n                        translation = Ss_input.locale[this.defaultLanguage][word];\r\n                        if (!translation) {\r\n                            throw 'error';\r\n                        }\r\n                        return translation;\r\n                    } catch (e) {\r\n                        return word\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        init: function () {\r\n        },\r\n        unload: function (name) {\r\n            this.ssi.pluginNames[this.ssi.pluginNames.indexOf(name)] = null;\r\n            Ss_input.tools.removeByKey(this.ssi[this.type], name);\r\n        }\r\n    };\r\n    Plugin.extend = function (prototype, pluginName, pluginGroup) {\r\n        pluginGroup = pluginGroup || Ss_input.plugins;\r\n        var plugin = (pluginName ? pluginGroup[pluginName] : this),\r\n         child;\r\n        if (!plugin) {\r\n            console.log('The plugin ' + pluginName + ' hasn\\'t initialize!');\r\n            return function () {\r\n            };\r\n        }\r\n        if (prototype.hasOwnProperty('constructor')) {\r\n            child = prototype.constructor;\r\n        } else {\r\n            child = function () {\r\n                return plugin.apply(this, arguments);\r\n            };\r\n        }\r\n        $.extend(true, child.prototype, plugin.prototype, prototype);\r\n        return child;\r\n    };\r\n\r\n})(jQuery);","(function ($) {\r\n    Ss_input.templates = {\r\n        buttons: {\r\n            'menuButton': '<# if(selectionRequired) className+=\" ssi-selectionRequired ssi-hidden\";  #><button id=\"<#= id #>\" data-title=\"<#= title #>\" class=\"ssi-tooltip <#= className #> ssi-mBtn\"> <#= label #> </button>',\r\n            'listButton': '<# var LiClassName; if(selectionRequired){className+=\" ssi-mustSelect disabled\";} #><li id=\"<#= id #>\" class=\"<#= className #> \"><a href=\"#\" > <#= label #> </a></li>',\r\n            'itemButton': '<a href=\"#\" id=\"<#= id #>\" class=\"<#= className #> ssi-optionBtn\"><#= label #></a>'\r\n        },\r\n        input: {\r\n            select:'<select <#= options.multiple#> id = \"<#=options.id#>\" name =\"<#=options.name#>\" class=\"<#=options.className#>\" ><#= selectItems#></select >',\r\n            selectItem:'<option <#=options.selected#> value=\"<#=options.value#>\"><#=options.label#></option>',\r\n            textarea:'<textarea  id = \"<#=options.id#>\"  name = \"<#=options.name#>\" class= \"<#=options.className#>\"  <#=options.readOnly#> ><#=options.value#></textarea>',\r\n            text:'<input type = \"<#=options.type#>\" placeholder=\"<#= options.placeholder#>\" id = \"<#=options.id#>\"  name = \"<#=options.name#>\" class= \"<#=options.className#>\" value = \"<#=options.value#>\"/ >',\r\n            radioGroup:'<div class=\"ssi-radioGroup <#=options.className#>\" id=\"<#=options.id#>\" ><#=radioGroupItems#></div>',\r\n            radio:'<div class=\"ssi-radioItem\"><label><#=options.label#></label><input type=\"<#=options.type#>\"<#=options.checked?\"checked\":\"\"#>  name=\"<#=options.name#>\"  value=\"<#=options.value#>\"/></div>',\r\n            checkbox:'<div class=\"ssi-radioItem\"><input type=\"<#=options.type#>\"<#=options.checked?\"checked\":\"\"#>  name=\"<#=options.name#>\"  value=\"<#=options.value#>\"/></div>'\r\n        },\r\n        mainContent: '<div id=\"ssi-content\" tabindex=\"1\"><div id=\"ssi-menuButtons\" class=\"ssi-menuButtons\"></div><div id=\"ssi-topBarWrapper\" class=\"ssi-topBarWrapper\"> <div class=\"ssi-topBarButtonArea\"></div><div id=\"ssi-topBar\" class=\"ssi-topBar\"> <div id=\"ssi-loader\" class=\"ssi-hidden ssi-loadingIcon ssi-pathLoader\"></div><div id=\"ssi-progressBar\" class=\"ssi-progress\"></div></div></div><div id=\"ssi-mainContent\" class=\"ssi-mainContent\"><div id=\"ssi-items\" class=\"ssi-items\"><div id=\"ssi-contentFiles\"></div></div></div></div>',\r\n        bottomButtons: '<div id=\"ssi-bottomButtons\" class=\"ssi-bottomButtons\"><div id=\"ssi-leftButtons\" class=\"ssi-leftButtons\"></div><div id=\"ssi-rightButtons\" class=\"ssi-rightButtons\"></div></div>'\r\n    }\r\n})(jQuery);\r\n","(function ($) {\r\n    var entityMap = {\r\n        \"&\": \"&amp;\",\r\n        \"<\": \"&lt;\",\r\n        \">\": \"&gt;\",\r\n        '\"': '&quot;',\r\n        \"'\": '&#39;',\r\n        \"/\": '&#x2F;'\r\n    };\r\n    Ss_input.tools = {\r\n        dirname: function (path) {\r\n            return path.replace(/\\\\/g, '/')\r\n             .replace(/\\/[^\\/]*\\/?$/, '');\r\n        },\r\n        getExtension: function (file) {\r\n            return file.split('.').pop().toLowerCase();\r\n        },\r\n        basename: function (url) {\r\n            return url.replace(/\\\\/g, '/').replace(/.*\\//, '')\r\n        },\r\n        parseDate: function (input) {\r\n            var parts = input.match(/(\\d+)/g);\r\n            return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4]);\r\n        },\r\n        //@author http://weblog.west-wind.com/posts/2008/Oct/13/Client-Templating-with-jQuery\r\n        template: function (str, data) {\r\n            var err = \"\";\r\n            try {\r\n                var strFunc =\r\n                 \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\r\n                 \"with(obj){p.push('\" +\r\n                 str.replace(/[\\r\\t\\n]/g, \" \")\r\n                  .replace(/'(?=[^#]*#>)/g, \"\\t\")\r\n                  .split(\"'\").join(\"\\\\'\")\r\n                  .split(\"\\t\").join(\"'\")\r\n                  .replace(/<#=(.+?)#>/g, \"',$1,'\")\r\n                  .split(\"<#\").join(\"');\")\r\n                  .split(\"#>\").join(\"p.push('\")\r\n                 + \"');}return p.join('');\";\r\n                var func = new Function(\"obj\", strFunc);\r\n                return func(data);\r\n            } catch (e) {\r\n                err = e.message;\r\n                console.log(\"< # ERROR: \" + err + \" # >\");\r\n                console.log(e);\r\n            }\r\n\r\n        },\r\n\r\n        dataReplace: function (str, dataVariable) {\r\n            dataVariable = dataVariable || 'data';\r\n            return '\"' + str.replace(/field:\\((\\w+)\\)/g, (str.indexOf('condition:(') > -1 ? '' + dataVariable + '[\"$1\"]' : '\"+' + dataVariable + '[\"$1\"]+\"')).replace(/condition:(\\(.*\\))/g, '\"+$1+\"') + '\"';\r\n\r\n        }, getField: function (str) {\r\n            return str.replace(/[\\s\\S]*field:\\((\\w+)\\)[\\s\\S]*/, '$1')\r\n        }\r\n        , objReplace: function (str, dataVariable) {\r\n            dataVariable = dataVariable || 'data';\r\n            return str.replace(/field:\\((\\w+)\\)/g, (dataVariable + '[\"$1\"]').replace(/condition:(\\(.*\\))/g, '\"+$1+\"'));\r\n\r\n        },\r\n        fieldReplace: function (str, dataVariable) {\r\n            dataVariable = dataVariable || 'data';\r\n            return str.replace(/field:\\((\\w+)\\)/g, dataVariable + '[\"$1\"]');\r\n\r\n        },\r\n        arrayValuesInArray: function (valueArray, array) {\r\n            valueArray = this.toArray(valueArray);\r\n\r\n            var unmatched = [];\r\n            for (var i = 0, length = valueArray.length; i < length; i++) {\r\n                if (valueArray[i] && $.inArray(valueArray[i], array) === -1) {\r\n                    unmatched.push(valueArray[i]);\r\n                }\r\n            }\r\n            return unmatched;\r\n        },\r\n        arrayValueInArray: function (array1, array2) {\r\n            for (var i = 0, length = array1.length; i < length; i++) {\r\n                if (array1[i] && $.inArray(array1[i], array2) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        keyExists: function (array, obj) {\r\n            array = this.toArray(array);\r\n            var unmatched = [];\r\n            for (var i = 0, length = array.length; i < length; i++) {\r\n                if (array[i] && !obj.hasOwnProperty(array[i])) {\r\n                    unmatched.push(array[i]);\r\n                }\r\n            }\r\n            return unmatched;\r\n        },\r\n        getDate: function () {\r\n            var d = new Date();\r\n            var month = d.getMonth() + 1;\r\n            var day = d.getDate();\r\n            return d.getFullYear() + '-' + (('' + month).length < 2 ? '0' : '') + month + '-' +\r\n             (('' + day).length < 2 ? '0' : '') + day;\r\n        },\r\n        urlUnion: function (url1, url2) {\r\n            var lastIndex = url1.length - 1;\r\n            if (url1[lastIndex] != '/' && url2[0] != '/') url1 += '/';\r\n            else if (url1[lastIndex] === '/' && url2[0] === '/')url2 = url2.substr(1);\r\n            return url1 += url2;\r\n        },\r\n        //@author http://stackoverflow.com/a/7847366/4801797\r\n        cachedImage: function (url) {\r\n            var test = document.createElement(\"img\");\r\n            test.src = url;\r\n            return test.complete || test.width + test.height > 0;\r\n        },\r\n        cutFileName: function (word, ext, maxLength) {\r\n            if (typeof ext === 'undefined')ext = '';\r\n            if (typeof maxLength === 'undefined')maxLength = 10;\r\n            var min = 4;\r\n            if (maxLength < min)return;\r\n            var extLength = ext.length;\r\n            var wordLength = word.length;\r\n            if ((wordLength - 2) > maxLength) {\r\n                word = word.substring(0, maxLength);\r\n                var wl = word.length - extLength;\r\n                word = word.substring(0, wl);\r\n                return word + '...' + ext;\r\n\r\n            } else return word;\r\n\r\n        },\r\n        toArray: function (element) {\r\n            if (!(element instanceof Array)) {\r\n                element = [element];\r\n            }\r\n            return element;\r\n        },\r\n        findKey: function (value, obj) {\r\n            for (var key in obj) {\r\n                try {\r\n                    if (obj[key] === value)\r\n                        return key;\r\n                } catch (err) {\r\n\r\n                }\r\n            }\r\n        }, findByKey: function (array, key, value) {\r\n            for (var i = 0, length = array.length; i < length; i++) {\r\n                if (array[i][key] == value) {\r\n                    return array[i];\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        editUrl: function (url, path, toRemove) {\r\n            if (path === '')return url.replace(toRemove, '');\r\n            if (url.indexOf(path) < 0) {\r\n                url = this.urlUnion(path, url);\r\n            }\r\n            return url\r\n        },\r\n        removeMirrorValues: function (array) {\r\n            var mirrors;\r\n            do {\r\n                mirrors = false;\r\n                for (var i = 0; i < array.length; i++) {\r\n                    if (array[i] === array[i + 1]) {\r\n                        array.splice(i, 1);\r\n                        mirrors = true;\r\n                    }\r\n                }\r\n            } while (mirrors == true);\r\n\r\n        },\r\n        arraySum: function (arr) {\r\n            var sum = 0;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                sum += arr[i];\r\n            }\r\n            return sum;\r\n        },\r\n        loadImage: function (element, image, callback) {\r\n            element = element || $();\r\n            var ssi = this.ssi;\r\n            if (!image || image == 'undefined'){\r\n                element.parents('.ssi-itemWrapper').addClass('ssi-empty')\r\n                return;\r\n            }\r\n            if (!Ss_input.tools.cachedImage(image)) {\r\n                var spinner = $('<div class=\"ssi-loadingIcon ssi-itemLoader\"></div>');\r\n                element.append(spinner);\r\n                $('<img/>').attr('src', image).load(function () {\r\n                    $(this).remove();\r\n                    spinner.remove();\r\n                    if (typeof callback === 'function') {\r\n                        callback(true);\r\n                    } else {\r\n                        element.css('background-image', 'url(\"' + image + '\")');\r\n                    }\r\n                }).error(function () {\r\n                    $(this).remove();\r\n                    spinner.remove();\r\n                    if (typeof callback === 'function') {\r\n                        callback(false);\r\n                    } else {\r\n                        element.css('background-image', 'url(\"' + image + '\")');\r\n                    }\r\n                    element.parents('.ssi-itemWrapper').addClass('ssi-empty')\r\n                });\r\n            } else {\r\n                element.css('background-image', 'url(\"' + image + '\")');\r\n            }\r\n        },\r\n        escape: function (text) {\r\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n        },\r\n        escapeHtml: function (string) {\r\n            return String(string).replace(/[&<>\"'\\/]/g, function (s) {\r\n                return entityMap[s];\r\n            });\r\n        },\r\n        removeObjFromArray: function (array, key, value) {\r\n            for (var i = 0; i < array.length; i++) {\r\n                if (array[i][key] === value) {\r\n                    array.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        getFirstKey: function (obj) {\r\n            for (var key in obj) return key;\r\n        },\r\n        sanitizeInput: function (str) {\r\n            str = str.replace(/[^a-z0-9áéíóúñü \\.,_-]/gim, \"\");\r\n            return str.trim();\r\n        }\r\n        ,\r\n        removeFromArray: function (array, value) {\r\n            value = this.toArray(value);\r\n            for (var y = 0, vLength = value.length; y < vLength; y++) {\r\n                for (var i = 0, length = array.length; i < length; i++) {\r\n                    if (array[i] === value[y]) {\r\n                        array.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ,\r\n        removeByKey: function (array, key) {\r\n            key = this.toArray(key);\r\n            for (var i = 0; i < key.length; i++) {\r\n                delete array[key[i]];\r\n            }\r\n        }\r\n        ,\r\n        tooltip: function ($target, text, returnOnly) {\r\n            $target = $($target);\r\n            text = text || $target.data('title');\r\n            if (!text)text = $target.attr('title');\r\n            if (!text)return;\r\n            var $toolTip = $('<div class=\"ssi-fadeOut ssi-fade ssi-tooltipText\">'\r\n             + text +\r\n             '</div>').insertBefore($target);\r\n            $target.one('mouseleave', function () {\r\n                $toolTip.remove();\r\n            });\r\n            if (returnOnly)return $toolTip;\r\n            $toolTip.css({top: $target.position().top - $toolTip.height() - 12, left: $target.position().left})\r\n             .removeClass('ssi-fadeOut');\r\n\r\n            return $toolTip;\r\n        }\r\n        ,\r\n        getDataUri: function (url, callback) {//@author https://davidwalsh.name/convert-image-data-uri-javascript\r\n            var image = new Image();\r\n            image.setAttribute('crossOrigin', 'anonymous');\r\n            image.onload = function () {\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = this.naturalWidth;\r\n                canvas.height = this.naturalHeight;\r\n                canvas.getContext('2d').drawImage(this, 0, 0);\r\n                callback(canvas.toDataURL('image/png'));\r\n            };\r\n            image.src = url;\r\n        }\r\n    }\r\n    ;\r\n\r\n    String.prototype.isFile = function (array) {\r\n        if (array)\r\n            return array.indexOf(this.split('/').pop().split('.').pop()) > -1;\r\n        return this\r\n          .split('/').pop()\r\n          .split('.').length > 1;\r\n    };\r\n    String.prototype.fixUrl = function () {\r\n        var length = this.length;\r\n        var url = this;\r\n        if (url[length - 1] !== '/') {\r\n            url += '/'\r\n        }\r\n        return url\r\n    };\r\n    String.prototype.replaceText = function () {\r\n        var args = Array.apply(null, arguments);\r\n        var text = this;\r\n        for (var i = 0; i < args.length; i++) {\r\n            text = text.replace('$' + (i + 1), args[i])\r\n        }\r\n        return text;\r\n    };\r\n\r\n    $('body').on('mouseenter', '.ssi-tooltip', function (e) { //----------------------------tooltip----------------------------------------------\r\n         Ss_input.tools.tooltip(e.currentTarget);\r\n     }\r\n    ).on('mouseover', 'div.ssi-dropDownWrapper .parent', function (e) {//----------------------------dropDownMenu----------------------------------------------\r\n        $(e.currentTarget).children('ul').addClass('ssi-show');\r\n        $(e.currentTarget).closest('ul').css('overflow', 'visible')\r\n    }).on('mouseout', 'div.ssi-dropDownWrapper .parent,.ssi-dropOptions li>a', function (e) {\r\n        $(e.currentTarget).children('ul').removeClass('ssi-show');\r\n        $(e.currentTarget).closest('ul').css('overflow', '')\r\n    });\r\n\r\n})(jQuery);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","(function ($) {\r\n    Ss_input.selectionMode = [];\r\n    Ss_input.selection = [];\r\n    Ss_input.modePlugins['selection'] = Ss_input.Plugin.extend({\r\n        type: 'corePlugins',\r\n        defaults: {\r\n            selectionMode: 'singleSelection',\r\n            excludeItems: '',\r\n            defaultValue: '',\r\n            inputName: '',\r\n            template: '',\r\n            selectionField: '',\r\n            modeOptions: {}\r\n        },\r\n        init: function () {\r\n            this.selectionMode = new Ss_input.selectionMode[this.options.selectionMode](this.ssi, this.setModeOptions());\r\n            this.selectionMode.selection = this;\r\n            this.pluginNames = [];\r\n            for (var pluginName in Ss_input.selection) {\r\n                this.pluginNames.push(pluginName);\r\n            }\r\n            this.selectionMode.init();\r\n            this.setEvents()\r\n             .setHandlers();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.$element.on('showAction', function () {\r\n                ssi.pluginInit(thisS.pluginNames, Ss_input.selection);\r\n                ssi.$content.on('click.ssi', '.ssi-canSelect', function (e) {\r\n                    e.preventDefault();\r\n                    if (!e.ctrlKey) {\r\n                        var $e = $(e.target);\r\n                        if (!$e.is('a') && !$e.parent().is('a')) {\r\n                            thisS.selectItem('', ssi.get$mainElement($(e.currentTarget)));\r\n                        }\r\n                    }\r\n                });\r\n                thisS.ssi.$element.on('appendItemAction.ssi', function (e, item) {\r\n                    if (!thisS.options.excludeItems || eval(Ss_input.tools.dataReplace(thisS.options.excludeItems, \"item.data\")) == 'false') {\r\n                        item.$element.find('.ssi-selectable').addClass('ssi-canSelect');\r\n                    }\r\n                }).on('infoShowAction.ssi', function (e, content) {\r\n                    content.find('.ssi-selectable').click(function (e) {\r\n                        thisS.selectItem('', ssi.get$mainElement($(e.currentTarget)));\r\n                    })\r\n                });\r\n            });\r\n            return this;\r\n        },\r\n        setModeOptions: function () {\r\n            var modeExtraOptions = {};\r\n            if (this.options.defaultValue) {\r\n                modeExtraOptions['defaultValue'] = this.options.defaultValue;\r\n            }\r\n            if (this.options.selectionField) {\r\n                modeExtraOptions['selectionField'] = this.options.selectionField;\r\n            }\r\n            if (this.options.inputName) {\r\n                modeExtraOptions['inputName'] = this.options.inputName;\r\n            }\r\n            if (this.options.template) {\r\n                modeExtraOptions['template'] = this.options.template;\r\n            }\r\n            return $.extend({}, this.options.modeOptions, modeExtraOptions);\r\n        },\r\n        setHandlers: function () {\r\n            this.infoHandler();\r\n            return this;\r\n        },\r\n        selectItem: function (url, eventTarget, relativePath) {\r\n            this.selectionMode.pickData(url, eventTarget, relativePath);\r\n            return this;\r\n        },\r\n        infoHandler: function () {\r\n            Ss_input.handlers['info'] = Ss_input.Handler.extend({\r\n                template: {\r\n                    imagePreview: '<div class=\"ssi-imagePreview\"></div>'\r\n                },\r\n                defaults: {\r\n                    excludeItems: 'condition:(field:(mimeType)==\"directory\")'\r\n                },\r\n                extend: {\r\n                    handleData: function (dataList) {\r\n                        for (var i = 0, length = dataList.length; i < length; i++) {\r\n                            var preview = this.ssi.plugins['templateManager'].getTemplate(dataList[i], ' ', eval(Ss_input.tools.dataReplace(this.ssi.plugins.scan.options.displayImage, 'dataList[i]')), 'icons');\r\n                            dataList[i] = $.extend({'preview': preview}, dataList[i]);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        getSelectedInfo: function (id, $target, silent) {\r\n            try {\r\n                var ssi = this.ssi, selectedInfo;\r\n                if (silent) {\r\n                    selectedInfo = {displayImage: id, selection: id, displayName: Ss_input.tools.basename(id)};\r\n                    ssi.$element.trigger('silentSelectionAction.ssi', [selectedInfo]);\r\n                    return selectedInfo;\r\n                }\r\n                id = id || $target.attr('data-ID');\r\n                $target = $target || ssi.get$mainElementById(id);\r\n                var scan = ssi.plugins['scan'], displayName, selection, displayImage;\r\n                var info = $target.data('info');\r\n                if (!info)\r\n                    info = ssi.get$mainElementById(id).data('info');\r\n                if (scan) {\r\n                    displayName = info[scan.options.titleField];\r\n                    displayImage = eval(Ss_input.tools.dataReplace(scan.options.displayImage, 'info'));\r\n                }\r\n                if (this.options.selectionField) {\r\n                    selection = info[this.options.selectionField];\r\n                } else {\r\n                    selection = id;\r\n                }\r\n                selectedInfo = {\r\n                    displayName: (displayName ? Ss_input.tools.escapeHtml(displayName) : Ss_input.tools.basename(id)),\r\n                    selection: selection,\r\n                    displayImage: displayImage\r\n                };\r\n                ssi.$element.trigger('selectionAction.ssi', [selectedInfo]);\r\n                return selectedInfo;\r\n            } catch (err) {\r\n                //removeIf(production)\r\n                console.log(err);\r\n                //endRemoveIf(production)\r\n                return {\r\n                    displayName: (displayName ? Ss_input.tools.escapeHtml(displayName) : Ss_input.tools.basename(id)),\r\n                    selection: selection || id,\r\n                    displayImage: displayImage || id\r\n                };\r\n            }\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.selectionMode['multiSelection'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            //  dataInput: '<input type=\"text\" placeholder=\"<#=placeholder#>\" class=\"ssi-dataUrlName\" value=\"<#=value#>\" name=\"<#=name#>\" />',\r\n            'inputField': \"<td><#=input#></td>\",\r\n            table: {\r\n                wrapper: '<table class=\"ssi-selectedItemWrapper  <#=className#> ssi-multiTable\"><tr><th></th><# for (var i = 0, inputLength = inputs.length; i<inputLength; i++) { var input=inputs[i]; #><th><#= input.label #></th><#  } #><th></th></tr></table>',\r\n                item: '<tr data-ID=\"<#=id#>\" <#=(dataCollection?\"data-collection=\"+dataCollection:\"\")#>  class=\"ssi-removable  ssi-pickItem ssi-table <#=className#>\"><td class=\"ssi-imgPosition\"><div class=\"ssi-selectionPreview\" style=\"background-image:url(\\'<#=displayImage#>\\')\"></div><div class=\"ssi-itemName\"><#=displayName#></div></td><#=inputs#><td class=\"ssi-btnPosition\"><!--<#if(!className){#><a href=\"<#= displayImage #>\" data-ssi_imgGroup=\"selectedImages<#=uniqueId#>\" class=\"ssi-imgPreview ssi-imgBox\"><div class=\"icon ssi-imgBoxIcon\"></div></a><#}#>--><a href=\"#\" class=\"ssi-removeChoice\"><div class=\"icon ssi-removeIcon\"></div></a></td><input type=\"hidden\" name=\"<#=inputName#>\" value=\"<#= selectionField #>\"/></tr>'\r\n            },\r\n            boxes:{\r\n                wrapper: '<div class=\"ssi-selectedItemWrapper clearfix ssi-boxes\"></div>',\r\n                item: '<table data-ID=\"<#=id#>\" style=\"float: left;\" <#=(dataCollection?\"data-collection=\"+dataCollection:\"\")#> class=\"ssi-removable  ssi-pickItem ssi-box  <#=className#>\"><tr><td class=\"ssi-imgPosition\"><div class=\"ssi-selectionPreview\" style=\"background-image:url(\\'<#=displayImage#>\\')\"><div id=\"ssi-actions\"><a href=\"#\" class=\"ssi-removeChoice\"><div class=\"icon ssi-removeIcon\"></div></a></div></div></td></tr><tr><td class=\"ssinput-mbtnplace\"><div class=\"ssi-itemName\"><#=displayName#></div><input type=\"hidden\" name=\"<#=inputName#>\" value=\"<#= selectionField #>\"/></td></tr></table>'\r\n            },\r\n            displayFiles: '<div id=\"ssi-displayFilesWrapper\"><button id=\"ssi-clearSelected\" data-title=\"<#=selectedBtn#>\" class=\"ssi-clearBtn ssi-mBtn ssi-tooltip\"><div class=\"icon ssi-cleanBtn\"></div></button><div data-title=\"<#=selectedTooltip#>\" class=\"ssi-tooltip ssi-displayFiles\"><#=selected#></div><button id=\"ssi-clearChecked\" data-title=\"<#=checkedBtn#>\" class=\"ssi-mBtn ssi-clearBtn ssi-tooltip\"><div class=\"icon ssi-cleanBtn\"></div></button><div id=\"ssi-displayCheckedFiles\" data-title=\"<#=checkedTooltip#>\" class=\"ssi-displayFiles ssi-tooltip\"><#=checked#></div></div>'\r\n        },\r\n        defaults: {\r\n            template: 'table',\r\n            className: '',\r\n            duplicate: true,\r\n            inputName: 'files[]',\r\n            selectionField: 'id',\r\n            maxItems: 0,\r\n            content: '',\r\n            input: [],\r\n            defaultValue: ''\r\n        },\r\n        init: function () {\r\n            this.checkedItems = [];\r\n            this.selected = [];\r\n            this.silentItems = [];\r\n            this.selectedFilesCount = 0;\r\n            this.checkedFilesCount = 0;\r\n            var ssi = this.ssi;\r\n            if(this.options.template=='boxes' && this.options.input.length>0){\r\n            //removeIf(production)\r\n                console.log('Boxes template is not compatible with inputs!');\r\n            //endRemoveIf(production)\r\n                this.options.template='table';\r\n            }\r\n\r\n            ssi.$element.addClass('ss-input ssi-multiPickMode');\r\n            var wrapper=this.template[this.options.template].wrapper;\r\n            if(wrapper)\r\n            $(this.options.content).eq(0).html(Ss_input.tools.template(wrapper, {\r\n                className: this.options.className,\r\n                inputs: this.options.input\r\n            }));\r\n\r\n            if (this.options.defaultValue) {\r\n                var length = this.options.defaultValue.length;\r\n                if (this.options.maxItems !== 0 && length > this.options.maxItems)length = length - this.options.maxItems;\r\n                for (var i = 0; i < length; i++) {\r\n                    this.checkedItems.push(this.options.defaultValue[i].value)\r\n                }\r\n                this.selectItems(this.options.defaultValue);\r\n            }\r\n            if (!!this.options.maxItems && (Math.log(this.options.maxItems) * Math.LOG10E + 1 | 0) > 3) {\r\n                this.options.maxItems = 9999;\r\n            }\r\n            this.setButtons();\r\n            this.setEvents();\r\n            return this;\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton([{\r\n                label: this.translate('insert'),\r\n                className: \"ssi-mBtn ssi-insertBtn disabled\",\r\n                closeAfter: true,\r\n                enableAfter: true,\r\n                method: function () {\r\n                    thisS.selectItems();\r\n                    if (thisS.ssi.options.showTo != 'modalWindow')\r\n                        thisS.reset();\r\n                }\r\n            }, {\r\n                closeAfter: true,\r\n                label: this.translate('cancel'),\r\n                className: \"ssi-mBtn ssi-cancel\"\r\n            }], 'menuButton', ['bottom']);\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n            ssi.$element.on('showAction', function () {\r\n                if (!thisS.options.duplicate) {\r\n                    thisS.checkItem(thisS.selected);\r\n                    thisS.checkedFilesCount = thisS.selected.length;\r\n                }\r\n                ssi.$content.find('#ssi-menuButtons').after(Ss_input.tools.template(thisS.template.displayFiles, {\r\n                    selected: (!!thisS.options.maxItems ? '<span id=\"ssi-displaySelectedFiles\">' + thisS.selectedFilesCount + '</span>/' + thisS.options.maxItems : '<span id=\"ssi-displaySelectedFiles\">' + thisS.selectedFilesCount + '</span>'),\r\n                    checked: thisS.checkedFilesCount,\r\n                    selectedTooltip: thisS.translate('selectedTooltip'),\r\n                    checkedTooltip: thisS.translate('checkedTooltip'),\r\n                    checkedBtn: thisS.translate('checkedBtn'),\r\n                    selectedBtn: thisS.translate('selectedBtn')\r\n                }));\r\n                ssi.$content.on('click', '#ssi-clearChecked', function () {\r\n                    thisS.clearChecked();\r\n                    return false;\r\n                }).on('click', '#ssi-clearSelected', function () {\r\n                    thisS.clearSelected();\r\n                    return false;\r\n                });\r\n                ssi.$element.on('echoItemsAction.ssi silentEchoItemsAction.ssi', function () {\r\n                    thisS.setMChecked();\r\n                }).on('closeAction.ssi', function () {\r\n                    thisS.checkedFilesCount = 0;\r\n                    thisS.checkedItems = [];\r\n                }).on('appendItemAction.ssi', function (e, item) {\r\n                    if ($.inArray(item.data.path, thisS.checkedItems) !== -1) {\r\n                        thisS.addCheck('', item.$element.find('.ssi-canSelect'));\r\n                    }\r\n                }).on('infoCloseAction.ssi', function () {\r\n                    thisS.setMChecked()\r\n                }).on('infoShowAction.ssi', function (e, content) {\r\n                    thisS.setMChecked(content)\r\n                }).on('beforeChangeCollectionAction.ssi', function () {\r\n                    thisS.selectItems();\r\n                    thisS.reset();\r\n                }).on('removeItemAction.ssi', function (e, id) {\r\n                    var checkedIndex = $.inArray(id, 'thisS.checkedItems')\r\n                })\r\n            });\r\n            $(this.options.content).eq(0).on('click', '.ssi-removeChoice', function (e) {\r\n                try {\r\n                    thisS.removeSelectedImage(e);\r\n                    thisS.selectedFilesCount--;\r\n                    thisS.ssi.$content.find('#ssi-displaySelectedFiles').html(thisS.selectedFilesCount);\r\n                } catch (err) {\r\n                }\r\n                return false;\r\n            }).on({\r\n                mouseenter: function () {\r\n                    $(this).find('#ssi-actions')\r\n                        .fadeIn(200);\r\n                },\r\n                mouseleave: function () {\r\n                    $(this).find('#ssi-actions')\r\n                        .fadeOut(200);\r\n                }\r\n            }, '.ssi-selectionPreview');\r\n        },\r\n        reset: function () {\r\n            this.checkedFilesCount = 0;\r\n            this.checkedItems = [];\r\n            if (!this.options.duplicate) {\r\n                this.checkItem(this.selected);\r\n                this.checkedFilesCount = this.selected.length;\r\n            } else {\r\n                this.ssi.$content.find('#ssi-displayCheckedFiles').html('0');\r\n                this.ssi.$content.find('.ssi-checked').removeClass('ssi-checked')\r\n                 .find('.ssi-checkItem').remove();\r\n            }\r\n            this.ssi.$content.find('#ssi-displaySelectedFiles').html(this.selectedFilesCount);\r\n        },\r\n        selectItems: function (defaults) {\r\n            var $content = $(this.options.content).eq(0), item, content = [], defaultValue = '';\r\n            if (!this.options.duplicate) this.duplicate();\r\n            var length = this.checkedItems.length;\r\n            for (var y = 0; y < length; y++) {\r\n                if (defaults) defaultValue = defaults[y].input || [];\r\n                var id = this.checkedItems[y];\r\n                if (typeof this.radioButtons === 'undefined' || this.radioButtons) {\r\n                    for (var i = 0, inputLength = this.options.input.length; i < inputLength; i++) {\r\n                        if (this.options.input[i].type === 'radio') {\r\n                            this.radioButtons = true;\r\n                            this.options.input[i].name = (this.options.input[i].name.replace(/\\[[0-9]*]/, \"[\" + this.selectedFilesCount + \"]\"));\r\n                        }\r\n                        if (!this.radioButtons)this.radioButtons = false;\r\n                    }\r\n                }\r\n                item = this.getTemplate(id, defaultValue, !!this.silentItems[y]);\r\n                if (item) {\r\n                    content.push(item);\r\n                    this.selectedFilesCount++;\r\n                }\r\n            }\r\n            $content.children('.ssi-selectedItemWrapper').append(content);\r\n            this.checkedItems = [];\r\n        },\r\n        getTemplate: function (id, defaultValue, silent) {\r\n            var inputs = \"\", className = '', idSplit = id.split(/:(.+)?/, 2);\r\n            silent = silent || !!defaultValue;\r\n            id = idSplit[1] || id;\r\n            for (var i = 0, length = this.options.input.length; i < length; i++) {\r\n                inputs += Ss_input.tools.template(this.template.inputField, {input: new Ss_input.Input(this.options.input[i], defaultValue[i])[0].outerHTML}\r\n                )\r\n            }\r\n            var itemInfo = this.selection.getSelectedInfo(id, '', silent);\r\n            if (!itemInfo.displayImage) {\r\n                className = 'ssi-empty';\r\n            }\r\n            return Ss_input.tools.template(this.template[this.options.template].item, {\r\n                inputName: this.options.inputName,\r\n                selectionField: itemInfo.selection,\r\n                id: id,\r\n                className: className,\r\n                displayImage: itemInfo.displayImage,\r\n                uniqueId: this.ssi.uniqueId,\r\n                inputs: inputs,\r\n                displayName: itemInfo.displayName,\r\n                dataCollection: idSplit[1] ? idSplit[0] : \"\"\r\n            });\r\n        },\r\n        pickData: function (id, target, silent) {\r\n            if (!this.options.duplicate && silent) {\r\n                if ($.inArray('/:' + id, this.checkedItems) > -1) {\r\n                    this.ssi.notify('error', this.translate('existInListError'));\r\n                    return this;\r\n                }\r\n            }\r\n            var $target;\r\n            if (target) {\r\n                $target = $(target);\r\n            } else {\r\n                $target = this.ssi.get$mainElementById(id);\r\n            }\r\n            id = this.ssi.currentCollection.id + ':' + (id || target.attr('data-ID'));\r\n\r\n            if (!id) {\r\n                console.log('Cant\\'t find the id.');\r\n                return this;\r\n            }\r\n\r\n            if ($target.hasClass('ssi-checked')) {\r\n                this.checkedFilesCount--;\r\n                this.removeCheck('', $target);\r\n                this.unCheckItem(id);\r\n            } else {\r\n\r\n                if (this.options.maxItems !== 0 && (this.options.duplicate ? this.selectedFilesCount + this.checkedFilesCount : this.checkedFilesCount) === this.options.maxItems) {\r\n                    this.ssi.notify('error', this.translate('limitError').replaceText(this.options.maxItems.toString()));\r\n                    return;\r\n                }\r\n\r\n                this.checkedFilesCount++;\r\n                this.addCheck('', $target);\r\n                this.checkItem(id, silent);\r\n            }\r\n            this.ssi.$content.find('#ssi-displayCheckedFiles').html(this.checkedFilesCount)\r\n            return this;\r\n        },\r\n        setMChecked: function ($content) {\r\n            var ssi = this.ssi, id, valueSplit;\r\n            $content = $content || ssi.$content;\r\n            var ssi_mSelect = this.checkedItems.filter(function (value) {\r\n                valueSplit = value.split(/:(.+)?/, 2);\r\n                return (valueSplit[0] == ssi.currentCollection.id || !valueSplit[1]);\r\n            });\r\n            $content.find('span.ssi-checkItem').remove();\r\n            for (var i = 0, length = ssi_mSelect.length; i < length; i++) {\r\n                valueSplit = ssi_mSelect[i].split(/:(.+)?/, 2);\r\n                id = valueSplit[1] || valueSplit[0];\r\n                this.addCheck(id, '', $content);\r\n            }\r\n        },\r\n        removeCheck: function (id, target) {\r\n            var $target;\r\n            if (target) {\r\n                $target = $(target);\r\n            } else {\r\n                $target = this.ssi.get$mainElementById(id);\r\n            }\r\n            $target.removeClass('ssi-checked');\r\n            $target.find('.ssi-checkItem').remove();\r\n        },\r\n        removeSelectedImage: function (e) {\r\n            var item = $(e.target).parents('.ssi-pickItem');\r\n            if (!this.options.duplicate) {\r\n                var id = item.attr('data-ID');\r\n                var collection = item.attr('data-collection');\r\n                Ss_input.tools.removeFromArray(this.selected, collection ? collection + ':' + id : id);\r\n            }\r\n            item.remove();\r\n            if (this.radioButtons) {\r\n                setRadioNames(this);\r\n            }\r\n        },\r\n        addCheck: function (id, target, $content) {\r\n            var $target;\r\n            if (target) {\r\n                $target = $(target);\r\n            } else {\r\n                $target = this.ssi.get$mainElementById(id, $content);\r\n            }\r\n            $target.append('<span class=\"icon ssi-checkItem\"></span>')\r\n             .addClass('ssi-checked');\r\n        },\r\n        checkItem: function (id, silent) {\r\n            if (id instanceof Array) {\r\n                this.checkedItems = this.checkedItems.concat(id)\r\n            } else {\r\n                if (silent) {\r\n                    if (this.options.duplicate) {\r\n                        this.silentItems[this.checkedItems.length] = silent;\r\n                    } else {\r\n                        this.silentItems[Ss_input.tools.arrayValuesInArray(this.checkedItems, this.selected).length] = silent;\r\n                    }\r\n                }\r\n                this.checkedItems.push(id);\r\n            }\r\n            this.ssi.$content.parents('.ssi-mainModal').find('.ssi-insertBtn')\r\n             .removeClass('disabled')\r\n             .prop(\"disabled\", false);\r\n        },\r\n        unCheckItem: function (id) {\r\n            id = id.split(/:(.+)?/, 2);\r\n            id = id[1] || id[0];\r\n            Ss_input.tools.removeFromArray(this.checkedItems, id);\r\n            if (this.checkedItems.length === 0) {\r\n                $('.ssi-insertBtn')\r\n                 .addClass('disabled')\r\n                 .prop(\"disabled\", true);\r\n            }\r\n        },\r\n        duplicate: function () {\r\n            var newItems = Ss_input.tools.arrayValuesInArray(this.checkedItems, this.selected),\r\n             removedItems = Ss_input.tools.arrayValuesInArray(this.selected, this.checkedItems), dataSplit, id;\r\n            this.selected = this.checkedItems.slice();\r\n            var $content = $(this.options.content).eq(0).children('.ssi-selectedItemWrapper');\r\n            for (var i = 0; i < removedItems.length; i++) {\r\n                dataSplit = removedItems[i].split(/:(.+)?/, 2);\r\n                id = dataSplit[1] || dataSplit[0];\r\n                $content.find('.ssi-pickItem[data-ID=\"' + id + '\"]').each(function () {\r\n                    var $this = $(this);\r\n                    var collection = $this.attr('data-collection');\r\n                    if (!collection || collection == dataSplit[0])\r\n                        $this.remove();\r\n                });\r\n                this.selectedFilesCount--;\r\n            }\r\n            this.checkedItems = newItems;\r\n        },\r\n        clearChecked: function () {\r\n            var ssiContent = this.ssi.$content;\r\n            ssiContent.find('.ssi-checkItem').remove();\r\n            ssiContent.find('.ssi-checked').removeClass('ssi-checked');\r\n            ssiContent.find('#ssi-displayCheckedFiles').html(0);\r\n            if (!this.duplicate) {\r\n                ssiContent.find('#ssi-displaySelectedFiles').html(this.selectedFilesCount - this.checkedFilesCount);\r\n            }\r\n            this.checkedFilesCount = 0;\r\n            this.checkedItems = [];\r\n            ssiContent.parents('.ssi-mainModal').find('.ssi-insertBtn')\r\n             .addClass('disabled')\r\n             .prop(\"disabled\", true);\r\n        },\r\n        clearSelected: function () {\r\n            $(this.options.content).eq(0).find('.ssi-pickItem').remove();\r\n            this.ssi.$content.find('#ssi-displaySelectedFiles').html((this.duplicate ? 0 : this.checkedFilesCount));\r\n            this.selectedFilesCount = 0;\r\n            this.selected = [];\r\n        }\r\n    });\r\n    function setRadioNames(thisS) {\r\n        var radio = $(thisS.options.content).eq(0).find('.ssi-radioGroup');\r\n        for (var i = 0, length = radio.length; i < length; i++) {\r\n            (function (i) {\r\n                radio.eq(i).find('input').attr('name', function (h, val) {\r\n                    $(this).attr('name', val.replace(/\\[[0-9]*]/, \"[\" + i + \"]\"));\r\n                });\r\n            })(i);\r\n        }\r\n    }\r\n\r\n})(jQuery);","(function ($) {\r\n    Ss_input.selectionMode['singleSelection'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            imgHolder: '<table class=\"ssi-pickItem ssi-selectedItemWrapper ssi-itemWrapper\"><tr><td class=\"ssi-imgHolder\"><div class=\"ssi-selectionPreview\"><div id=\"ssi-actions\"><!--<a href=\"#\" id=\"ssi-pickedImg\" class=\"ssi-imgBox ssi-imgPreview ssi-hidden\"><div class=\"icon ssi-imgBoxIcon\"></div></a>--><a href=\"#\" class=\"ssi-removeChoice ssi-hidden\"><div class=\"icon ssi-removeIcon\"></div></a></div><div id=\"ssi-imgChoose\" class=\"ss-input ssi-pick ssi-selectionPreview\"></div></div></td></tr><tr><td><div class=\"ssi-itemName\"></div></td></tr><#=input#></table>',\r\n            textHolder: '<div class=\"ssi-pickItem ssi-selectedItemWrapper ssi-itemWrapper\"><span class=\"ssi-textPreview\"></span><#= input #></div><a href=\"#\" class=\"ssi-removeChoice\"><div class=\"icon ssi-removeIcon\"></div></a>',\r\n            input: '<input type=\"<#=(type||\"text\")#>\" placeholder=\"<#=placeholder#>\" class=\"ssi-dataUrlName\" value=\"<#=value#>\" name=\"<#=name#>\" />',\r\n            mainInput: '<input type=\"hidden\" class=\"ssi-mainInput\" name=\"<#=name#>\"/>'\r\n        },\r\n        defaults: {\r\n            template: 'imgHolder',\r\n            defaultValue: '',\r\n            selectionField: '',\r\n            inputName: ''\r\n        },\r\n        init: function () {\r\n            var ssi = this.ssi;\r\n            if (!ssi.$element.is('div')) {\r\n                console.log('The targeted element is not a div.');\r\n                return;\r\n            }\r\n            ssi.$element.addClass('ssi-' + this.options.template);\r\n            ssi.$element.append(Ss_input.tools.template(this.template[this.options.template], {input: '<input type=\"hidden\" class=\"ssi-mainInput\" name=\"' + this.options.inputName + '\"/>'}));\r\n            if (this.options.defaultValue) {\r\n                this.pickData(this.options.defaultValue, '', true);\r\n            }\r\n            this.setEvents();\r\n            return this;\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$element.on('click', '.ssi-removeChoice', function (e) {\r\n                e.preventDefault();\r\n                thisS.removeSelectedImage();\r\n                return false;\r\n            }).on({\r\n                mouseenter: function () {\r\n                    $(this).find('#ssi-actions')\r\n                     .fadeIn(200);\r\n                },\r\n                mouseleave: function () {\r\n                    $(this).find('#ssi-actions')\r\n                     .fadeOut(200);\r\n                }\r\n            }, '.ssi-selectionPreview');\r\n            return this;\r\n\r\n        },\r\n        pickData: function (id, target, silent) {\r\n            var $target = $(target);\r\n            id = id || $target.attr('data-ID');\r\n            if (!id) {\r\n                console.log('Cant\\'t find the id.');\r\n                return this;\r\n            }\r\n            var info = this.selection.getSelectedInfo(id, target, silent);\r\n            var ssi = this.ssi;\r\n            ssi_modal.closeAll();\r\n            ssi.$element.find('a').removeClass('ssi-hidden');\r\n            ssi.$element.find('.ssi-itemName').html(info.displayName );\r\n            ssi.$element.find('.ssi-itemWrapper').removeClass('ssi-empty');\r\n            Ss_input.tools.loadImage( ssi.$element.find('#ssi-imgChoose'),info.displayImage);\r\n            ssi.$element.find('.ssi-mainInput').val(info.selection);\r\n            return this;\r\n        },\r\n        removeSelectedImage: function () {\r\n            var ssi = this.ssi;\r\n            ssi.$element.find('.ssi-itemWrapper').removeClass('ssi-empty');\r\n            ssi.$element.find('#ssi-imgChoose').css(\"background-image\", '');\r\n            ssi.$element.find('a').addClass('ssi-hidden');\r\n            ssi.$element.find('.ssi-itemName').html('');\r\n            ssi.$element.find('#' + ssi.options.inputName).val('');\r\n            return this;\r\n        }\r\n\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.selectionMode['textEditorSelection'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            method: function () {\r\n            }\r\n        }, init: function () {\r\n            this.ssi.mode = 'textEditorSelect';\r\n            this.ssi.$element.addClass('ss-input');\r\n            return this;\r\n        },\r\n        pickData: function (id, target) {\r\n            var selectionField = this.selection.getSelectedInfo(id, target).selection;\r\n            if (typeof this.options.method === 'function')\r\n                this.options.method(selectionField);\r\n            ssi_modal.closeAll();\r\n            return this;\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem = [];\r\n    Ss_input.fileSystemHandlers = [];\r\n    Ss_input.storageTypes['fileSystem'] = Ss_input.Plugin.extend({\r\n        type: 'corePlugins',\r\n\r\n        defaults: {\r\n            allowed: ['jpg', 'jpeg', 'png'],\r\n            scriptsPath: '',\r\n            rootPath: '',\r\n            responseValidation:{\r\n                validationKey: 'type',\r\n                resultKey: 'msg',\r\n                success: 'success',\r\n                error: 'error'\r\n            }\r\n        },\r\n        constructor: function (ss_input, options) {\r\n            this.options = $.extend({}, this.defaults, options);\r\n            this.ssi = ss_input;\r\n            ss_input.handlersGroup = 'fileSystemHandlers';\r\n            this.pluginNames = [];\r\n            ss_input.options.responseValidation=this.options.responseValidation;\r\n            for (var pluginName in Ss_input.fileSystem) {\r\n                this.pluginNames.push(pluginName);\r\n            }\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n            this.ssi.$element.on('showAction', function () {\r\n                thisS.scanDir(thisS.options.rootPath + '/');\r\n                thisS.ssi.pluginInit(thisS.pluginNames, Ss_input.fileSystem);\r\n                thisS.ssi.$content.on('click.ssi', '.directory', function (e) {\r\n                    var $e = $(e.target);\r\n                    if (e.ctrlKey || $e.is('a') || $e.parent().is('a')) return;\r\n                    var id = ssi.getId($e);\r\n                    thisS.scanDir(id);\r\n\r\n                    return false;\r\n                });\r\n            }).on('removeItemAction.ssi', function (e, data) {\r\n                if (!data.isFile(thisS.options.allowed))\r\n                    $(this).trigger('removeCollectionAction.ssi', [data.replace(thisS.options.rootPath, '')]);\r\n            });\r\n            return this;\r\n        },\r\n        getPath: function (name, type) {\r\n            type = type || 'relative';\r\n            name = name || '';\r\n            var path = Ss_input.tools.urlUnion(this.options.rootPath + (this.ssi.currentCollection.id || '/'), name);\r\n            if (type === 'relative') {\r\n                return path;\r\n            } else {\r\n                return Ss_input.tools.urlUnion(path = document.location.protocol + '//' + window.location.hostname, path);\r\n            }\r\n        },\r\n        scanDir: function (url) {\r\n            url = url.replace(this.options.rootPath, '');\r\n            this.ssi.openCollection(url, this.options.scriptsPath + '/scanAction.php', {\r\n                'currentDir': this.options.rootPath + url\r\n            });\r\n\r\n        },\r\n    });\r\n})(jQuery);","(function ($) {\r\n    var back = false;\r\n    Ss_input.fileSystem['history'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            back: '<a href=\"#\" id=\"ssi-backHistory\" class=\"disabled ssi-historyBack\"><div class=\"icon ssi-backIcon\"></div></a>',\r\n            fw: '<a href=\"#\" id=\"ssi-fwHistory\" class=\"ssi-historyFw disabled\"><div class=\"icon ssi-fwIcon\"></div></a>',\r\n            up: '<a href=\"#\" id=\"ssi-historyUp\" class=\"ssi-historyUp disabled\"><div class=\"icon ssi-upIcon\"></div></a>'\r\n        },\r\n        init: function () {\r\n            this.backHistory = [];\r\n            this.fwHistory = [];\r\n            this.setButtons();\r\n            this.setEvents();\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            var $back = $(this.template.back);\r\n            var $fw = $(this.template.fw);\r\n            var $up = $(this.template.up);\r\n            var ssi = this.ssi;\r\n            $back.on('click', function (e) {\r\n                thisS.historyBack($(this));\r\n                return false;\r\n            });\r\n            $fw.on('click', function (e) {\r\n                if (thisS.fwHistory.length > 0)\r\n                    thisS.historyFw($(this));\r\n                return false;\r\n            });\r\n            $up.on('click.ssi', function (e) {\r\n                if (ssi.readOnlyMode)\r\n                    thisS.historyBack();\r\n                else\r\n                    thisS.ssi.fileSystem.scanDir(Ss_input.tools.dirname(ssi.currentCollection.id));\r\n                return false;\r\n            });\r\n            ssi.$content.find('.ssi-topBarButtonArea').append($back, $fw, $up);\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n            ssi.$element.on('echoItemsAction.ssi', function () {\r\n                if (ssi.currentCollection.id !== '/') {\r\n                    thisS.ssi.$content.find('#ssi-historyUp').removeClass('disabled');\r\n                } else {\r\n                    thisS.ssi.$content.find('#ssi-historyUp').addClass('disabled');\r\n                }\r\n                if (back) {\r\n                    back = false;\r\n                    return;\r\n                }\r\n                var length = thisS.backHistory.length;\r\n                if (length > 0 && ssi.currentCollection.id !== '/') {\r\n                    thisS.ssi.$content.find('#ssi-backHistory').removeClass('disabled');\r\n                }\r\n                if (thisS.backHistory[length - 1] !== ssi.currentCollection.id && !ssi.readOnlyMode) {\r\n                    if (length >= 20) thisS.backHistory.shift();\r\n                    thisS.backHistory.push(ssi.currentCollection.id);\r\n                    thisS.fwHistory = [];\r\n                    ssi.$content.find('#ssi-fwHistory').addClass('disabled');\r\n                }\r\n            }).on('closeAction.ssi', function () {\r\n                thisS.backHistory = ['/'];\r\n                thisS.fwHistory = [];\r\n                back = false;\r\n            }).on('removeCollectionAction.ssi', function (e, id) {\r\n                thisS.removeFromHistory(id)\r\n            });\r\n        },\r\n        historyFw: function ($btn) {\r\n            back = true;\r\n            $btn = $btn || this.ssi.$content.find('#ssi-fwHistory');\r\n            var length = this.fwHistory.length;\r\n            this.ssi.$content.find('#ssi-backHistory').removeClass('disabled');\r\n            if (length === 1) $btn.addClass('disabled');\r\n            var data = this.fwHistory[length - 1];\r\n            this.ssi.fileSystem.scanDir(data);\r\n            this.backHistory.push(data);\r\n            this.fwHistory.splice(length - 1, 1);\r\n        },\r\n        historyBack: function ($btn) {\r\n            $btn = $btn || this.ssi.$content.find('#ssi-backHistory');\r\n            back = true;\r\n            var ssi = this.ssi;\r\n            var length = this.backHistory.length;\r\n            if (length < 1)return;\r\n            if (length == 2) $btn.addClass('disabled');\r\n            if (!ssi.readOnlyMode) {\r\n                if (length < 2){\r\n                    $btn.addClass('disabled');\r\n                    return;\r\n                }\r\n                ssi.fileSystem.scanDir(this.backHistory[length - 2]);\r\n                this.fwHistory.push(this.backHistory[length - 1]);\r\n                this.backHistory.splice(length - 1, 1);\r\n                ssi.$content.find('#ssi-fwHistory').removeClass('disabled');\r\n            } else {\r\n                ssi.fileSystem.scanDir(this.backHistory[length - 1]);\r\n                if (length === 1) $btn.addClass('disabled');\r\n            }\r\n        },\r\n        removeFromHistory: function (path) {\r\n            if (this.backHistory.length > 0) {\r\n                Ss_input.tools.removeFromArray(this.backHistory, path);\r\n                Ss_input.tools.removeMirrorValues(this.backHistory);\r\n                if (this.backHistory.length < 2) {\r\n                    this.ssi.$content.find('#ssi-backHistory').addClass('disabled');\r\n                }\r\n            }\r\n            if (this.fwHistory.length > 0) {\r\n                Ss_input.tools.removeFromArray(this.fwHistory, path);\r\n                Ss_input.tools.removeMirrorValues(this.fwHistory);\r\n                if (this.fwHistory.length < 1) {\r\n                    this.ssi.$content.find('#ssi-fwHistory').addClass('disabled');\r\n                } else if (this.fwHistory.length == 1 && this.fwHistory[0] == this.ssi.currentCollection.id) {\r\n                    this.fwHistory = [];\r\n                    this.ssi.$content.find('#ssi-fwHistory').addClass('disabled');\r\n                }\r\n            }\r\n        },\r\n        cleanHistory: function () {\r\n            this.fwHistory = [];\r\n            this.backHistory = [];\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['path'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            pathBar: '<div style=\"float:left\" id=\"ssi-loading\"></div><div class=\"ssi-homePath\" style=\"float:left\"><a href=\"#\" data-ID=\"/\" class=\"<#=className#> ssi-path\"><div class=\"icon ssi-rootIcon\"></div><#=rootName#></a></div><div class=\"ssi-currentPath\"></div>',\r\n            pathItem: '<div class=\"ssi-pathItemWrapper\"><div class=\"icon ssi-breadcrumbsIcon\"></div><a href=\"#\" data-ID=\"<#=dataHref#>\" class=\"<#=className#> ssi-path\"><#=pathName#></a></div>'\r\n        },\r\n        defaults: {\r\n            className: '',\r\n            rootName: 'root'\r\n        },\r\n        init: function () {\r\n            this.ssi.$content.find('#ssi-topBar').append(Ss_input.tools.template(this.template.pathBar, {\r\n                className: this.options.className,\r\n                rootName: this.options.rootName\r\n            }));\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$content.on('click.ssi', '.ssi-path', function () {\r\n                var $this=$(this);\r\n                if($this.hasClass('ssi-alias'))return false;\r\n                thisS.ssi.fileSystem.scanDir($this.attr('data-ID'));\r\n                return false;\r\n            });\r\n            this.ssi.$element.on('beforeEchoItemsAction.ssi', function (e) {\r\n                var page=thisS.ssi.currentCollection;\r\n                if (!page.id)return;\r\n\r\n                var path = page.alias || thisS.ssi.currentCollection.id,\r\n                 dataHref = '' || page.href;\r\n                thisS.setPath(path, dataHref);\r\n            });\r\n        },\r\n        setPath: function (pathName, href) {\r\n            var ssi = this.ssi;\r\n            var currentPath = ssi.$content.find('.ssi-currentPath');\r\n            if (href) {\r\n                currentPath.html(Ss_input.tools.template(this.template.pathItem, {\r\n                    dataHref: href,\r\n                    className: 'ssi-alias',\r\n                    pathName: pathName\r\n                }));\r\n                return;\r\n            }\r\n            var path = pathName.split('/'), dataHref = '', adrArray = []\r\n             , length = path.length\r\n             , pathWidth = (currentPath.outerWidth() - 100), pathLength = 0;\r\n            currentPath.html('');\r\n            for (var i = 0; i < length; i++) {\r\n                if (dataHref != pathName) {\r\n                    dataHref = Ss_input.tools.urlUnion(dataHref, path[i]);\r\n                }\r\n                if (path[i] != '/' && path[i] != '') {\r\n                    var link = Ss_input.tools.template(this.template.pathItem, {\r\n                        dataHref: dataHref,\r\n                        className: this.options.className,\r\n                        pathName: path[i]\r\n                    });\r\n                    adrArray.push(link);\r\n                    var $link = $(link);\r\n                    pathLength += $link.hide().appendTo(currentPath).outerWidth();\r\n                    $link.remove();\r\n                }\r\n            }\r\n            i = 0;\r\n            while (pathLength > pathWidth && pathWidth > 0 && i < path.length) {\r\n                adrArray.shift();\r\n                $link = $(Ss_input.tools.template(this.template.pathItem, {\r\n                    dataHref: dataHref,\r\n                    className: this.options.className,\r\n                    pathName: path[i + 1]\r\n                }));\r\n                pathLength = pathLength - $link.hide().appendTo(currentPath).outerWidth();\r\n                $link.remove();\r\n                i++;\r\n            }\r\n            if (adrArray.length) {\r\n                currentPath.html(adrArray);\r\n            }\r\n        }\r\n    });\r\n\r\n})(jQuery);","(function ($) {\r\n    Ss_input.database = [];\r\n    Ss_input.databaseHandlers = [];\r\n    Ss_input.storageTypes['database'] = Ss_input.Plugin.extend({\r\n        type: 'corePlugins',\r\n\r\n        template: {\r\n            title: '<h4 id=\"ssi-collectionTitle\"></h4>',\r\n            topBar: '<div class=\"ssi-topButtonsWrapper\"><div id=\"ssi-topButtons\" class=\"ssi-topButtons\"></div></div>',\r\n            form: '<form id=\"ssi-formData\"><table><#=formItem#></table></form>',\r\n            formItem: '<tr><th><label for=\"<#=inputId#>\" class=\"<#=labelClass#>\"><#=label#></label></th><td><#=input#></td></tr>'\r\n        },\r\n        defaults: {\r\n            translateFields: false,\r\n            sendNullValues: false,\r\n            responseValidation: false,\r\n            baseCollection: '',\r\n            collections: {\r\n                /*Images: {\r\n\r\n                 baseUrl: '/!*http://localhost:9000/api/things*!/',\r\n                 schema: {\r\n                 \"_id\": {type: 'string',edit: false, id: true, search: true},\r\n                 \"name\": {type: 'string', required: true, displayName: true},\r\n                 \"contentType\": {type: 'string', required: true, search: true, default: 'image/jpeg'},\r\n                 \"type\": {type: 'string', default: 'dds', sort: true},\r\n                 \"image\": {type: 'string', inputType: 'textarea', displayImage: true},\r\n                 \"date\": {type: 'date', edit: false, default: 'now', sort: true},\r\n                 \"active\": {type: 'boolean', required: true, default: '3'}\r\n                 }\r\n                 }*/\r\n            }\r\n        },\r\n        init: function () {\r\n            this.ssi.options.translateFields = this.options.translateFields;\r\n            this.ssi.options.responseValidation = this.options.responseValidation;\r\n            this.ssi.handlersGroup = 'databaseHandlers';\r\n            this.currentCollection = '';\r\n            this.pluginNames = [];\r\n            for (var pluginName in Ss_input.database) {\r\n                this.pluginNames.push(pluginName);\r\n            }\r\n            this.setCurrentCollection();\r\n            this.setEvent();\r\n        },\r\n        setEvent: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n            ssi.$element.on('earlyShowAction', function () {\r\n                thisS.setStaticHandlers()\r\n                 .setSchema();\r\n            }).on('showAction', function () {\r\n                ssi.$content.find('#ssi-topBar').append(thisS.template.title);\r\n                ssi.pluginInit(thisS.pluginNames, Ss_input.database);\r\n                if (thisS.options.baseCollection !== false)\r\n                    thisS.scanCollection(thisS.currentCollection.title);\r\n                ssi.$content.on('click.ssi', '.ssi-collectionScan .ssi-listAnchor', function (e) {\r\n                    if (ssi.readyState == false)return false;\r\n                    var $target = $(e.currentTarget);\r\n                    var title = $target.text();\r\n                    if (thisS.currentCollection.title == title)return false;\r\n                    thisS.scanCollection(title);\r\n                    return false;\r\n                });\r\n                ssi.$element.on('beforeScanAction.ssi', function (e, page) {\r\n                    if ($.isEmptyObject(thisS.currentCollection.schema)) {\r\n                        thisS.schemaAutoGenerator(page.data)\r\n                         .currentCollection.schema = thisS.options.collections[thisS.currentCollection.title].schema;\r\n                        thisS.setSchema()\r\n                         .changeSchema();\r\n                    }\r\n                });\r\n            }).on('silentSelectionAction.ssi', function (e, selectedInfo) {\r\n                if (!selectedInfo.displayImage.isFile(['jpg', 'png', 'jpeg'])) {\r\n                    selectedInfo.displayImage = '';\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        setCurrentCollection: function () {\r\n            try {\r\n                if (this.options.baseCollection) {\r\n                    this.currentCollection = this.options.collections[this.options.baseCollection];\r\n                }\r\n                if (!this.currentCollection) {\r\n                    var firstKey = Ss_input.tools.getFirstKey(this.options.collections);\r\n                    this.currentCollection = this.options.collections[firstKey] || {}\r\n                }\r\n                this.currentCollection.title = this.options.baseCollection || firstKey;\r\n\r\n            } catch (err) {\r\n                //removeIf(production)\r\n                console.log(err);\r\n                //endRemoveIf(production)\r\n            }\r\n        },\r\n        scanCollection: function (title) {\r\n            this.currentCollection = this.options.collections[title];\r\n            this.currentCollection.title = title;\r\n            this.ssi.$element.trigger('beforeChangeCollectionAction.ssi');\r\n            this.setTitle(this.currentCollection.title);\r\n            if (this.currentCollection.schema) {\r\n                if (!this.currentCollection.isSet)\r\n                    this.setSchema();\r\n                this.changeSchema();\r\n            }\r\n            this.ssi.plugins.scan.scanCollection(title, this.currentCollection.baseUrl.replace('/:id', ''));\r\n        },\r\n        setTitle: function (title) {\r\n            try {\r\n                this.ssi.$content.find('#ssi-collectionTitle').html(title);\r\n            } catch (err) {\r\n\r\n            }\r\n        },\r\n        setSchema: function () {\r\n            var currentCollection = this.currentCollection;\r\n            var schema = currentCollection.schema;\r\n            if (!currentCollection.search) {\r\n                currentCollection.search = [];\r\n            }\r\n            if (!currentCollection.sort) {\r\n                currentCollection.sort = [];\r\n            }\r\n            if (!currentCollection.details) {\r\n                currentCollection.details = [];\r\n            }\r\n            var searchLength = currentCollection.search.length,\r\n             sortLength = currentCollection.sort.length,\r\n             detailsLength = currentCollection.details.length;\r\n            if (schema && !$.isEmptyObject(schema)) {\r\n                for (var fieldName in schema) {\r\n                    var field = schema[fieldName];\r\n                    if (!currentCollection.displayName && field.displayName)currentCollection.displayName = fieldName;\r\n                    if (!currentCollection.displayImage && field.displayImage)currentCollection.displayImage = 'field:(' + fieldName + ')';\r\n                    if (!currentCollection.selectionField && field.selectionField)currentCollection.selectionField = fieldName;\r\n                    if (!currentCollection.id && field.id)currentCollection.id = fieldName;\r\n                    if (!detailsLength && field.details == false)currentCollection.details.push(fieldName);\r\n                    if (!searchLength && field.search)currentCollection.search.push(fieldName);\r\n                    if (!sortLength && field.sort)currentCollection.sort.push(fieldName);\r\n                }\r\n                if (!currentCollection.sort.length)currentCollection.sort = [Ss_input.tools.getFirstKey(schema)];\r\n                currentCollection.isSet = true;\r\n            }\r\n            this.setHandlers();\r\n            return this;\r\n        },\r\n        changeSchema: function () {\r\n            var currentCollection = this.currentCollection;\r\n            this.ssi.$element.trigger('changeSchemaAction.ssi', {\r\n                displayName: currentCollection.displayName,\r\n                id: currentCollection.id,\r\n                displayImage: currentCollection.displayImage || '',\r\n                url: currentCollection.baseUrl,\r\n                sort: currentCollection.sort,\r\n                search: currentCollection.search,\r\n                details: currentCollection.details\r\n            });\r\n            return this;\r\n        },\r\n        schemaAutoGenerator: function (data) {\r\n            data = data[0];\r\n            if (!data) {\r\n                console.log('Cannot create schema from empty collection');\r\n                return this;\r\n            }\r\n            var limit = 3, index = -1, reg;\r\n            var currentCollection = this.currentCollection;\r\n            var schema = this.options.collections[currentCollection.title].schema = {};\r\n            for (var fieldName in data) {\r\n                if (!data.hasOwnProperty(fieldName))continue;\r\n                index++;\r\n                var type = typeof data[fieldName];\r\n                schema[fieldName] = {type: type};\r\n                if (type == 'object' && data[fieldName] instanceof Array) {\r\n                    schema[fieldName].type = 'array';\r\n                }\r\n                if (type == 'string' && data[fieldName].split(' ').length > 10) {\r\n                    schema[fieldName].inputType = 'textarea';\r\n                }\r\n                if (index < limit) {\r\n                    schema[fieldName].search = true;\r\n                    schema[fieldName].sort = true;\r\n                }\r\n                if (!currentCollection.id) {\r\n                    reg = new RegExp(\"(?:[a-z]*(?:_id|id_|Id|-id|id-)[a-z]*)|^(?:id|ID)(?:$|[A-Z]+.*)\");\r\n                    if (reg.test(fieldName)) {\r\n                        schema[fieldName].id = true;\r\n                        continue;\r\n                    }\r\n                }\r\n                if (!currentCollection.displayName) {\r\n                    reg = new RegExp(\"(?:[a-z]*(?:_title|title_|Title|-title|title-|_name|name_|Name|-name|name-)[a-z]*)|^(?:title|name|username|login)(?:$|[A-Z]+.*)\");\r\n\r\n                    if (reg.test(fieldName)) {\r\n                        schema[fieldName].displayName = true;\r\n                        continue;\r\n                    }\r\n                }\r\n                if (!currentCollection.displayImage) {\r\n                    reg = new RegExp(\"(?:[a-z]*(?:_image|image_|Image|-image|image-|_img|img_|Img|-img|img-|_avatar|avatar_|Avatar|-avatar|avatar-)[a-z]*)|^(?:image|img|avatar)(?:$|[A-Z]+.*)\");\r\n                    if (reg.test(fieldName)) {\r\n                        schema[fieldName].displayImage = true;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        setHandlers: function () {\r\n            this.scanHandler()\r\n             .imgBoxHandler()\r\n             .searchHandler()\r\n             .sortHandler()\r\n             .infoBubbleHandler()\r\n             .deleteHandler()\r\n             .selectionHandler()\r\n             .templateManagerHandler();\r\n\r\n            return this;\r\n        },\r\n        setStaticHandlers: function () {\r\n            this.sidebarHandler();\r\n            return this\r\n        },\r\n        templateManagerHandler: function () {\r\n            Ss_input.databaseHandlers['templateManager'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    template: 'details',\r\n                    excludeFields: this.currentCollection.details\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        scanHandler: function () {\r\n            Ss_input.databaseHandlers['scan'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    titleField: this.currentCollection.displayName,\r\n                    idField: this.currentCollection.id,\r\n                    displayImage: (this.currentCollection.displayImage || '')\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        selectionHandler: function () {\r\n            var selection = this.ssi.corePlugins['selection'];\r\n            if (selection) {\r\n                selection.options.selectionField = this.currentCollection.selectionField\r\n            }\r\n            return this;\r\n        },\r\n        imgBoxHandler: function () {\r\n            Ss_input.databaseHandlers['imgBox'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    imageField: this.currentCollection.displayImage\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        deleteHandler: function () {\r\n            Ss_input.databaseHandlers['delete'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    sendId: 'inUrl',\r\n                    ajaxOptions: {\r\n                        url: this.currentCollection.baseUrl\r\n                    }\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        searchHandler: function () {\r\n            Ss_input.databaseHandlers['search'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    deepSearch: false,\r\n                    searchFields: this.currentCollection.search\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        sidebarHandler: function () {\r\n            var sidebarData = [];\r\n            var collections = this.options.collections;\r\n            if (Object.keys(collections).length < 2) {\r\n                this.ssi.options.excludePlugin.push('sidebar');\r\n                return;\r\n            }\r\n            for (var collectionName in collections) {\r\n                if (!collections[collectionName].baseUrl)continue;\r\n                sidebarData.push({\r\n                    name: collectionName,\r\n                    url: collections[collectionName].baseUrl,\r\n                    className: 'ssi-collectionScan'\r\n                })\r\n            }\r\n            Ss_input.databaseHandlers['sidebar'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    data: sidebarData,\r\n                    className: '',\r\n                    resizable: false,\r\n                    mode: 'dropDown'\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        sortHandler: function () {\r\n            Ss_input.databaseHandlers['sort'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    sortableFields: this.currentCollection.sort\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        infoBubbleHandler: function () {\r\n            Ss_input.databaseHandlers['infoBubble'] = Ss_input.Handler.extend({\r\n                defaults: {\r\n                    excludeFields: this.currentCollection.details,\r\n                    translateFields: this.options.translateFields\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n        getForm: function (defaultData) {\r\n            defaultData = defaultData || {};\r\n            var formTypes = {\r\n                'number': 'text',\r\n                'string': 'text',\r\n                'date': 'text',\r\n                'enum': 'select',\r\n                'boolean': 'select',\r\n                'object': 'textarea'\r\n            };\r\n            var ssi = this.ssi,\r\n             schema = this.currentCollection.schema,\r\n             className, formItem = '';\r\n            for (var name in schema) {\r\n                var schemaObj = schema[name];\r\n                if (schemaObj.edit == false)continue;\r\n                if (typeof defaultData[name] !== 'undefined') defaultData[name] = defaultData[name].toString();\r\n                var value = defaultData[name] || schemaObj['default'] || '';\r\n\r\n                className = (schemaObj.required ? ' ssi-required' : '');\r\n                if (schemaObj.type == 'array') {\r\n                    className += ' ssi-arrayInput';\r\n                } else if (schemaObj.type == 'object') {\r\n                    className += ' ssi-objectInput';\r\n                    if (typeof value === 'object') {\r\n                        value = JSON.stringify(value);\r\n                    }\r\n                }\r\n                var inputOptions = {\r\n                    name: name,\r\n                    id: name,\r\n                    value: value,\r\n                    className: 'ssi-inputField' + className,\r\n                    type: schemaObj.inputType || formTypes[schemaObj.type]\r\n                };\r\n                var inputType = inputOptions.type;\r\n                if (schemaObj.type == 'date' && schemaObj.default == 'now') {\r\n                    inputOptions.value = Ss_input.tools.getDate();\r\n                } else if (inputType == 'select' && schemaObj.type == 'boolean') {\r\n                    inputOptions.options = [{label: 'true', value: 'true'}, {label: 'false', value: 'false'}];\r\n                } else if (inputType == 'select') {\r\n                    if (schemaObj.options) {\r\n                        var selectOptions = [];\r\n                        for (var i = 0, length = schemaObj.options.length; i < length; i++) {\r\n                            var optionValue = schemaObj.options[i];\r\n                            selectOptions.push({label: optionValue, value: optionValue})\r\n                        }\r\n                        if (schemaObj.multiple)\r\n                            inputOptions.multiple = schemaObj.multiple;\r\n                        inputOptions.options = selectOptions;\r\n                    } else {\r\n                        inputOptions.type = 'text';\r\n                    }\r\n                }\r\n                if (inputType == 'text' && value.length > 100) {\r\n                    inputOptions.type = 'textarea';\r\n                }\r\n                formItem += Ss_input.tools.template(this.template.formItem, {\r\n                    label: this.translate(name, this.options.translateFields),\r\n                    labelClass: className,\r\n                    inputId: name,\r\n                    input: new Ss_input.Input(inputOptions)[0].outerHTML\r\n                });\r\n            }\r\n            return Ss_input.tools.template(this.template.form, {formItem: formItem});\r\n        },\r\n        resetForm: function () {\r\n            $('#ssi-formData').replaceWith(this.getForm());\r\n        },\r\n        getFormData: function () {\r\n            var data = {}, thisS = this, errors = 0;\r\n            $('.ssi-formWindow' + this.ssi.uniqueId).find('#ssi-formData').find('.ssi-inputField').each(function () {\r\n                var $this = $(this);\r\n                if (thisS.checkRequiredFields($this))\r\n                    errors++;\r\n                var val = $this.val();\r\n                if (!val && !thisS.options.sendNullValues)return true;\r\n                if ($this.hasClass('ssi-arrayInput')) {\r\n                    val = val.split(',');\r\n                } else if ($this.hasClass('ssi-objectInput')) {\r\n                    val = JSON.parse(val);\r\n                }\r\n                data[$this.attr('name')] = val;\r\n            });\r\n            return !errors ? data : false;\r\n        },\r\n        checkRequiredFields: function ($input) {\r\n            var val;\r\n            try {\r\n                val = $input.val().replace(/ /g, '');\r\n            } catch (err) {\r\n                val = $input.val();\r\n            }\r\n            if ($input.hasClass('ssi-required') && !val) {\r\n                $input.addClass('ssi-requiredError');\r\n                $input.off('focus.ssi');\r\n                $input.one('focus.ssi', function () {\r\n                    $input.removeClass('ssi-requiredError');\r\n                });\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        createWindow: function (options, topButtons) {\r\n            var contentButtons = this.ssi.addButton(topButtons, 'menuButton');\r\n            options = $.extend({}, {\r\n                content: '',\r\n                onShow: function (modal) {\r\n                    modal.get$content().find('#ssi-topButtons').append(contentButtons);\r\n                },\r\n                buttons: [],\r\n                className: 'ssi-formWindow ssi-formWindow' + this.ssi.uniqueId,\r\n                sizeClass: 'auto'\r\n            }, options);\r\n\r\n            options.content = this.template.topBar + options.content;\r\n            options.buttons.push({\r\n                label: this.translate('cancel'),\r\n                className: 'ssi-mBtn ssi-cancel',\r\n                closeAfter: true\r\n            });\r\n            this.ssi.createWindow(options);\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['search'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            deepSearch: {\r\n                multiple:false,\r\n                data: {},\r\n                ajaxOptions: {}\r\n            },\r\n            searchFields: []\r\n        },\r\n        init: function () {\r\n            if(this.options.deepSearch)\r\n            this.options.deepSearch=$.extend({},this.defaults,this.options.deepSearch);\r\n            this.searchKeywords = {};\r\n            this.currentItems = '';\r\n            this.setButtons()\r\n             .setEvents();\r\n        },\r\n        resetUi: function () {\r\n            this.searchKeywords = {};\r\n            this.currentItems = '';\r\n            this.setButtons(this.ssi.$content.find('#ssi-searchButton').parent().empty());\r\n        },\r\n        setButtons: function ($appendTo) {\r\n            var thisS = this, ssi = this.ssi, button = [], time;\r\n            if (this.options.deepSearch!=false) {\r\n                button.push({\r\n                    label: '<div class=\"icon ssi-searchMiniIcon\"></div>',\r\n                    className: 'ssi-inBtn ssi-inSearchBtn',\r\n                    method: function () {\r\n                        thisS.deepSearch(ssi.$content.find('#ssi-searchInput').val(), $(this).parent().find('input').hasClass('disabled'));\r\n                    }\r\n                })\r\n            }\r\n            var extraInput = [], length = this.options.searchFields.length;\r\n            if (length > 1) {\r\n                button.unshift({\r\n                    label: '▼',\r\n                    className: 'ssi-inBtn ssi-inSearchBtn ssi-moreInputs',\r\n                    method: function () {\r\n                        var $this = $(this);\r\n                        var extraFields = $this.siblings('.ssi-extraWrapper');\r\n                        var mainSearch = $this.prev('#ssi-searchInput');\r\n                        mainSearch.trigger('input.ssi');\r\n                        if (extraFields.hasClass('ssi-slide')) {\r\n                            mainSearch.removeClass('disabled');\r\n                            extraFields.removeClass('ssi-slide')\r\n                        } else {\r\n                            mainSearch.addClass('disabled').val('');\r\n                            extraFields.addClass('ssi-slide')\r\n                        }\r\n                        extraFields.children()\r\n                         .val('')\r\n                         .trigger('change.ssi');\r\n\r\n                    }\r\n                })\r\n            }\r\n            for (var i = 0; i < length; i++) {\r\n                this.searchKeywords[this.options.searchFields[i]] = '';\r\n                extraInput.push(new Ss_input.Input({\r\n                    className: 'ssi-searchInput ssi-menuInput ssi-extraInput',\r\n                    placeholder: this.translate(this.options.searchFields[i]),\r\n                    type: 'search'\r\n                }));\r\n                extraInput[i].data('field', this.options.searchFields[i]).on('input.ssi', function (e) {\r\n                    clearTimeout(time);\r\n                    var $this = $(this);\r\n                    if (e.which == 13)$(this).next().next().trigger('click');\r\n                    thisS.searchKeywords[$this.data('field')] = $this.val();\r\n                    time = setTimeout(function () {\r\n                        thisS.searchDir(Object.keys(thisS.searchKeywords).map(function (key) {\r\n                            return thisS.searchKeywords[key];\r\n                        }))\r\n                    }, 300);\r\n                })\r\n            }\r\n            ssi.addButton({\r\n                 label: '<div class=\"icon ssi-searchIcon\"></div>',\r\n                 title: this.translate('search'),\r\n                 id: 'ssi-searchButton',\r\n                 keyCode: '',\r\n                 input: {\r\n                     containerClass: 'ssi-searchcont',\r\n                     className: 'ssi-searchInput ssi-menuInput',\r\n                     placeholder: this.translate('search'),\r\n                     id: 'ssi-searchInput',\r\n                     type: 'search',\r\n                     buttons: button\r\n                 },\r\n                 className: 'ssi-searchSwitch'\r\n             }, 'menuButton', $appendTo || ['menu'])\r\n             .find('.ssi-btnContainer')\r\n             .append($('<div class=\"ssi-extraWrapper\">')\r\n              .append(extraInput)\r\n             );\r\n            return this;\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this, time;\r\n            ssi.$content.on('input.ssi', '#ssi-searchInput', function (e) {\r\n                clearTimeout(time);\r\n                if (e.which == 13)$(this).next().next().trigger('click');\r\n                var $thisS = $(this);\r\n                time = setTimeout(function () {\r\n                    thisS.searchDir($thisS.val());\r\n                }, 300);\r\n            });\r\n            ssi.$element.on('resetAction.ssi changeCollectionAction.ssi', function () {\r\n                if (thisS.searchInProgress) {\r\n                    thisS.currentItems = '';\r\n                    thisS.searchInProgress = false;\r\n                    ssi.$element.find('#ssi-searchButton').next().hide(500);\r\n                    ssi.$element.find('#ssi-searchInput').val('');\r\n                }\r\n            }).on('echoItemsAction.ssi', function () {\r\n                if (thisS.searchInProgress) {\r\n                    thisS.searchDir(ssi.$content.find('#ssi-searchInput').val());\r\n                }\r\n            }).on('beforeEchoItemsAction.ssi', function (e, page) {\r\n                if (!thisS.options.searchFields.length) {\r\n                    for (var key in page.data[0]) {\r\n                        thisS.options.searchFields.push(key);\r\n                    }\r\n                }\r\n            }).on('changeSchemaAction.ssi', function (e, data) {\r\n                thisS.options.searchFields = data['search'];\r\n                if(thisS.options.deepSearch)\r\n                thisS.options.deepSearch.ajaxOptions.url = data['url'].replace('/id');\r\n                thisS.resetUi();\r\n            });\r\n            return this;\r\n        },\r\n        deepSearch: function (keyword, multiple) {\r\n            if (multiple && this.options.deepSearch.multiple != false) {\r\n                keyword = {};\r\n                for (var key in this.searchKeywords) {\r\n                    if (this.searchKeywords[key])\r\n                        keyword[key] = this.searchKeywords[key];\r\n                }\r\n            }\r\n            if (!keyword) return;\r\n            var ssi = this.ssi,\r\n             thisS = this,\r\n             callback = function (data) {\r\n                 thisS.currentItems = [];\r\n                 ssi.$element.trigger('removeCollectionAction.ssi', 'search540123x');\r\n                 var page = {\r\n                     alias: thisS.translate('search'),\r\n                     href: \"#\",\r\n                     readOnly: true,\r\n                     id: 'search540123x',\r\n                     data: data\r\n                 };\r\n                 ssi.currentCollection = page;\r\n                 ssi.$element.trigger('scanAction.ssi', page);\r\n                 ssi.plugins['scan'].echoFiles(page, true);\r\n             };\r\n            this.prev = ssi.currentCollection.id;\r\n\r\n            var data = $.extend({}, this.options.deepSearch.data, (typeof keyword==='object'? keyword:{'keyword': keyword}));\r\n            var ajaxOptions = $.extend({}, {\r\n                data: data,\r\n                type:'GET'\r\n            }, this.options.deepSearch.ajaxOptions);\r\n            ssi.ajaxCall(ajaxOptions, callback);\r\n            return this;\r\n        },\r\n        getSearchCondition: function (keyword, separator) {\r\n            separator = separator || '||';\r\n            keyword = Ss_input.tools.toArray(keyword);\r\n            var valueLength = keyword.length;\r\n            var regEx = \"new RegExp('.*\" + keyword[0] + \".*','i')\";\r\n\r\n            var searchCondition = regEx + '.test(field:(' + this.options.searchFields[0] + '))';\r\n            for (var i = 1, length = this.options.searchFields.length; i < length; i++) {\r\n                if (valueLength > 1) {\r\n                    regEx = \"new RegExp('.*\" + keyword[i] + \".*','i')\";\r\n                }\r\n                searchCondition += separator + regEx + '.test(field:(' + this.options.searchFields[i] + '))';\r\n            }\r\n            return Ss_input.tools.fieldReplace(searchCondition);\r\n        },\r\n        searchDir: function (keyword) {\r\n\r\n            var ssi = this.ssi, content = [], separator = '||';\r\n            this.searchInProgress = !!keyword;\r\n            if (!keyword) {\r\n                if (!!this.currentItems.length) {\r\n                    ssi.plugins['scan'].echoFiles({\r\n                        id: ssi.currentCollection.id,\r\n                        data: this.currentItems\r\n                    });\r\n                }\r\n                this.currentItems = [];\r\n                return this;\r\n            }\r\n            if (!this.currentItems.length) {\r\n                this.currentItems = ssi.getPageData();\r\n            }\r\n            if (keyword instanceof Array)\r\n                separator = '&&';\r\n            else  keyword = keyword.toLowerCase();\r\n            var condition = this.getSearchCondition(keyword, separator);\r\n            for (var i = 0, data, length = this.currentItems.length; i < length; i++) {\r\n                data = this.currentItems[i];\r\n                if (eval(condition)) {\r\n                    /*    //  if (data[this.options.searchFields].toLowerCase().indexOf(keyword.toLowerCase()) >= 0) {\r\n                     var reg = new RegExp('(.*)(' + Ss_input.tools.escape(keyword) + ')(.*)', 'gi');\r\n                     sName = data[this.options.searchFields].replace(reg, '$1<span class=\"ssi-highlight\">$2</span>$3');*/\r\n\r\n                    content.push(data)\r\n                }\r\n            }\r\n            ssi.plugins['scan'].echoFiles({id: ssi.currentCollection.id, data: content}, '', true);\r\n            return this;\r\n        }\r\n    })\r\n\r\n})(jQuery);\r\n","(function ($) {\r\n    Ss_input.fileSystem['mkdir'] = Ss_input.Plugin.extend(\r\n     {\r\n         \"permissions\": 'write',\r\n         defaults: {\r\n             data: {},\r\n             ajaxOptions: {}\r\n         },\r\n         init: function () {\r\n             this.setButtons();\r\n         },\r\n         setButtons: function () {\r\n             var ssi = this.ssi, thisS = this;\r\n             ssi.addButton({\r\n                 label: '<div class=\"icon ssi-mkdirIcon\"></div>',\r\n                 title: this.translate('createFolder'),\r\n                 id: '',\r\n                 keyPress: {\r\n                     keyCode: '76',\r\n                     ctrl: true,\r\n                     shift: true\r\n                 },\r\n                 input: {\r\n                     enterKey: true,\r\n                     containerClass: 'ssi-foldercont',\r\n                     className: 'ssi-folderInput ssi-menuInput',\r\n                     placeholder: this.translate('name'),\r\n                     id: 'ssi-nameFolder',\r\n                     buttons: [{\r\n                         label: '<div class=\"icon ssi-checkIcon\"></div>',\r\n                         className: 'ssi-inBtn ssi-inFolderBtn',\r\n                         method: function () {\r\n                             thisS.mkdir(ssi.$content.find('#ssi-nameFolder').val());\r\n                         }\r\n                     }]\r\n                 },\r\n                 className: 'ssi-folderSwitch'\r\n             }, 'menuButton', ['menu']);\r\n         },\r\n         mkdir: function (name) {\r\n             var ssi = this.ssi, thisS = this;\r\n             var fileSystem = ssi.fileSystem;\r\n\r\n             name = (name || ssi.$content.find('#ssi-nameFolder').val()).replace(/[\\[\\]/#<$+%>!`&*'|{?\"=}\\/:\\\\@\\{]/g, '');\r\n             if (name && !ssi.readOnlyMode) {\r\n                 var href = ssi.fileSystem.getPath(name);\r\n                 if (ssi.getItemData('name', name)) {\r\n                     ssi.notify('error', this.translate('folderExistError').replaceText(name));\r\n                     return;\r\n                 }\r\n                 var callback = function () {\r\n                     ssi.notify('success', thisS.translate('successCreated'));\r\n                     var item = {\r\n                         'name': name,\r\n                         'mimeType': 'directory',\r\n                         'date': Ss_input.tools.getDate(),\r\n                         'path': fileSystem.getPath(name),\r\n                         'size': 0,\r\n                         'type': 'zzzzfolder'\r\n                     };\r\n                     ssi.plugins['scan'].appendItems(item);\r\n                     var sideBar = ssi.plugins['sidebar'];\r\n                     if (sideBar)\r\n                         sideBar.addTree({\r\n                             name: name,\r\n                             url: href\r\n                         }, fileSystem.options.rootPath + ssi.currentCollection.id);\r\n                     ssi.$content.find('#ssi-nameFolder').val('');\r\n                     ssi.$content.find('.ssi-foldercont').hide(500);\r\n                     ssi.$element.trigger('resetAction.ssi');\r\n                 };\r\n                 var data = $.extend({}, this.options.data, {\r\n                     'dirname': name,\r\n                     currentDir: fileSystem.options.rootPath + ssi.currentCollection.id\r\n                 });\r\n                 var ajaxOptions = $.extend({}, {\r\n                     data: data,\r\n                     url: fileSystem.options.scriptsPath + '/mkdirAction.php'\r\n                 }, this.options.ajaxOptions);\r\n                 ssi.ajaxCall(ajaxOptions, callback);\r\n             }\r\n         }\r\n     })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['newFile'] = Ss_input.Plugin.extend({\r\n        permissions:'write',\r\n        defaults: {\r\n            ajaxOptions: {},\r\n            data: {},\r\n            theme: 'monokai',\r\n            language: 'javascript',\r\n            onShow: function () {\r\n            }\r\n        },\r\n        init: function () {\r\n            this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.addButton({\r\n                label: '<div class=\"icon ssi-newFileIcon\"></div>',\r\n                title: this.translate('newFile'),\r\n                id: '',\r\n                input: {\r\n                    enterKey: true,\r\n                    containerClass: 'ssi-newFileContainer',\r\n                    className: 'ssi-FileInput ssi-menuInput',\r\n                    placeholder: this.translate('name'),\r\n                    id: 'ssi-fileName',\r\n                    buttons: [{\r\n                        label: '<div class=\"icon ssi-checkIcon\"></div>',\r\n                        className: 'ssi-inBtn ssi-inFolderBtn',\r\n                        method: function (e, value) {\r\n                            thisS.newFile(value);\r\n                        }\r\n                    }]\r\n                },\r\n                className: 'ssi-folderSwitch'\r\n            }, 'menuButton', ['menu']);\r\n            return this;\r\n        },\r\n        newFile: function (name) {\r\n            var ssi = this.ssi, thisS = this;\r\n            if (!name||ssi.readOnlyMode)return;\r\n            var fileSystem=ssi.fileSystem;\r\n            var item = ssi.getItemData('name', name);\r\n            if (item && item.mimeType != 'directory') {\r\n                ssi.notify('error', this.translate('existError'));\r\n\r\n                return;\r\n            }\r\n            var ext=Ss_input.tools.getExtension(name);\r\n            if ($.inArray(ext,ssi.fileSystem.options.allowed)==-1) {\r\n                ssi.notify('error', this.translate('extError').replaceText(ext));\r\n                return;\r\n            }\r\n            var callback = function () {\r\n                ssi.notify('success', thisS.translate('fileSuccessCreated'));\r\n                ssi.$content.find('#ssi-fileName').val('');\r\n                ssi.$content.find('.ssi-newFileContainer').hide(500);\r\n                var item = {\r\n                    'name': name,\r\n                    'mimeType': 'text/plain',\r\n                    'date': Ss_input.tools.getDate(),\r\n                    'path': fileSystem.getPath(name),\r\n                    'size': 1+' B',\r\n                    'type': Ss_input.tools.getExtension(name)\r\n                };\r\n                ssi.plugins['scan'].appendItems(item);\r\n            };\r\n            this.sendRequest(fileSystem.getPath(name),callback);\r\n            return this;\r\n        },\r\n        sendRequest: function (path,callback) {\r\n            var ssi = this.ssi;\r\n            var data = $.extend({}, this.options.data, {\r\n                filePath: path,\r\n                fileContent: ' '\r\n            });\r\n            var ajaxOptions = $.extend({}, {\r\n                data: data,\r\n                url: ssi.fileSystem.options.scriptsPath + 'newFileAction.php'\r\n            }, this.options.ajaxOptions);\r\n            ssi.ajaxCall(ajaxOptions, callback);\r\n            return this;\r\n        },\r\n        da: function () {\r\n            /*\r\n             var a = $('<div id=\"ssi-aceEditor\">function foo(items) { var x = \"All this is syntax highlighted\";return x;}</div>');\r\n             modal.setContent(a);\r\n             var editor = ace.edit(\"ssi-aceEditor\");\r\n             editor.setTheme(\"ace/theme/\" + thisS.options.theme);\r\n             editor.getSession().setMode(\"ace/mode/\" + thisS.options.language);\r\n             editor.resize();\r\n             if (typeof thisS.options.onShow === 'function')\r\n             thisS.options.onShow(editor)*/\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['upload'] = Ss_input.Plugin.extend({\r\n        permissions: 'write',\r\n        externalResources: ['$().ssi_uploader()'],\r\n        defaults: {\r\n            data: {},\r\n            uploadOptions: {},\r\n            modalOptions: {}\r\n        },\r\n        init: function () {\r\n            this.setModal();\r\n            this.setUploader();\r\n            this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<div class=\"icon ssi-uploadIcon\"></div>',\r\n                title: this.translate('upload'),\r\n                id: 'ssi-uploadBtn',\r\n                keyCode: '',\r\n                className: 'ssi-folderSwitch',\r\n                method: function () {\r\n                    thisS.uploadFiles();\r\n                }\r\n            }, 'menuButton', ['menu']);\r\n        },\r\n        setModal: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            this.modalOptions = $.extend({}, {\r\n                sizeClass: 'mediumToLarge',\r\n                content: '<input type=\"file\" multiple id=\"ssi-upload\" />',\r\n                title: this.translate('uploadFiles'),\r\n                className: \"ssi-uploadModal\",\r\n                keepContent: true\r\n            }, this.options.modalOptions);\r\n            this.modalOptions.onShow = function (modal) {\r\n                thisS.ssi.$element.trigger('uploadShowAction.ssi');\r\n                var $upload = modal.get$content().find('#ssi-upload').data('ssi_upload');\r\n                if ($upload) {\r\n                    $upload.options.data.currentDir = ssi.fileSystem.options.rootPath + ssi.currentCollection.id;\r\n                }\r\n                if (typeof thisS.options.modalOptions.onShow === 'function')\r\n                    thisS.options.modalOptions.onShow(modal);\r\n            };\r\n            this.modalOptions.onClose = function (modal) {\r\n                if (typeof thisS.options.modalOptions.onClose === 'function')\r\n                    thisS.options.modalOptions.onClose(modal);\r\n                thisS.ssi.$element.trigger('uploadCloseAction.ssi');\r\n            }\r\n\r\n        },\r\n        setUploader: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            this.uploaderOptions = $.extend({}, {\r\n                url: ssi.fileSystem.options.scriptsPath + '/uploadAction.php',\r\n                locale: ssi.options.language,\r\n                responseValidation: ssi.fileSystem.options.responseValidation,\r\n                dropZone: true,\r\n                multiple: true,\r\n                preview: true,\r\n                errorHandler: {\r\n                    method: function (msg, type) {\r\n                        ssi.notify(type, msg)\r\n                    }, success: 'success', error: 'error'\r\n                },\r\n                beforeEachUpload: function (imgInfo, xhr) {\r\n                    if (ssi.getItemData('name', imgInfo.name)) {\r\n                        xhr.abort();\r\n                        return thisS.translate('existError');\r\n                    }\r\n                },\r\n                onEachUpload: function (fileInfo) {\r\n                    thisS.onEachUpload(fileInfo)\r\n                },\r\n                maxFileSize: 3,\r\n                allowed: ssi.fileSystem.options.allowed\r\n            }, this.options.uploadOptions);\r\n        },\r\n        onEachUpload: function (fileInfo) {\r\n\r\n        },\r\n        uploadFiles: function () {\r\n            var ssi = this.ssi;\r\n            if (ssi.readOnlyMode)return;\r\n            var modal = ssi.createWindow(this.modalOptions, '#ssi-uploadBtn');\r\n            this.uploaderOptions.data = $.extend({}, {currentDir: ssi.fileSystem.options.rootPath + ssi.currentCollection.id}, this.options.data);\r\n            modal.get$content().find('#ssi-upload').ssi_uploader(this.uploaderOptions);\r\n        }\r\n    })\r\n})(jQuery);\r\n","(function ($) {\r\n    Ss_input.fileSystem['url'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            ajaxOptions: {},\r\n            data: {}\r\n        },\r\n        init: function () {\r\n            if (this.ssi.options.mode != 'selection')\r\n                return;\r\n            this.setButtons();\r\n\r\n        },\r\n        setButtons: function () {\r\n\r\n            var ssi = this.ssi, thisS = this;\r\n            var inputButtons = [{\r\n                label: '<div class=\"icon ssi-checkIcon\"></div>',\r\n                className: 'ssi-inBtn ssi-inUrlBtn',\r\n                method: function () {\r\n                    thisS.addUrl();\r\n                }\r\n            }];\r\n            ssi.addButton({\r\n                label: '<div class=\"icon ssi-urlIcon\"></div>',\r\n                title: this.translate('addUrl'),\r\n                id: '',\r\n                keyCode: '',\r\n                input: {\r\n                    enterKey: true,\r\n                    containerClass: 'ssi-urlcont',\r\n                    className: 'ssi-urlInput ssi-menuInput',\r\n                    placeholder: this.translate('url'),\r\n                    id: 'ssi-url',\r\n                    tooltip: this.translate('uploadImg'),\r\n                    buttons: inputButtons\r\n                },\r\n                className: 'ssi-urlSwitch'\r\n            }, 'menuButton', ['menu']);\r\n\r\n        },\r\n        addUrl: function () {\r\n            var ssi = this.ssi;\r\n            var url = ssi.$content.find('#ssi-url').val();\r\n            if (url != '') {\r\n                var thisS = this;\r\n                var test = this.testUrl(url);\r\n                if (!test)return;\r\n                var callback = function () {\r\n                    console.log()\r\n                    if (ssi.corePlugins.selection.options.selectionMode === 'multiSelection') {\r\n                        ssi.notify('success', thisS.translate('addSuccess'));\r\n                    }\r\n                    ssi.corePlugins['selection'].selectItem(url, '', true);\r\n                };\r\n                this.IsValidImageUrl(url, callback);\r\n            }\r\n        },\r\n        testUrl: function (url) {\r\n            var dataUri = false, image = false, ext, thisS = this, ssi = this.ssi, msg;\r\n            if (/^(http|https|ftp):\\/\\/[a-z0-9]+([\\-\\.][a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)+\\.[a-z0-9]+$/i.test(url)) {\r\n                ext = Ss_input.tools.getExtension(url);\r\n                image = true\r\n            }\r\n            if (!image) {\r\n                if (isDataURL(url)) {\r\n                    dataUri = true;\r\n                    var regex = new RegExp(/^(data:)([\\w\\/\\+]+);(charset=[\\w-]+|base64).*,(.*)/gi);\r\n                    ext = regex.exec(url)[2].split('/')[1]\r\n                }\r\n\r\n            }\r\n            if (!image && !dataUri) {\r\n                ssi.notify('error', thisS.translate('invalidUrlError'));\r\n                return false;\r\n            }\r\n            if ($.inArray(ext, ssi.fileSystem.options.allowed) < 0 && !dataUri) {\r\n                ssi.notify('error', thisS.translate('extError').replaceText(ext));\r\n                return false;\r\n            }\r\n            return (dataUri ? 'dataUrl' : true);\r\n        },\r\n        IsValidImageUrl: function (url, callback) {\r\n            var thisS = this, ssi = this.ssi;\r\n            $(\"<img>\", {\r\n                src: url,\r\n                error: function () {\r\n                    ssi.notify('error', thisS.translate('invalidUrlError'));\r\n                },\r\n                load: function () {\r\n                    callback();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function isDataURL(s) {\r\n        return !!s.match(isDataURL.regex);\r\n    }\r\n\r\n    isDataURL.regex = /^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+\\=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i;\r\n})(jQuery);","(function ($) {\r\n    Ss_input.database['newRecord'] = Ss_input.Plugin.extend({\r\n        permissions: 'write',\r\n        defaults: {\r\n            ajaxOptions: {\r\n                stringifyData: true,\r\n                contentType: \"application/json\"\r\n            },\r\n            data: {}\r\n        },\r\n        init: function () {\r\n            this.database = this.ssi.corePlugins['database'];\r\n            this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<div class=\"icon ssi-newDocumentIcon\"></div>',\r\n                title: this.translate('newDocument'),\r\n                method: function () {\r\n                    thisS.addNew();\r\n                }\r\n            }, 'menuButton', ['menu']);\r\n        },\r\n        addNew: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            var content = this.database.getForm();\r\n            var topButtons = [{\r\n                title: this.translate('saveAndNew'),\r\n                label: '<div class=\"icon ssi-saveIcon\"></div>+',\r\n                method: function () {\r\n                    thisS.save(function (data, textStatus, xhr) {\r\n                        if (xhr.status == 201) {\r\n                            thisS.database.resetForm();\r\n                            ssi.notify('success', thisS.translate('successSave'))\r\n                        }\r\n                    });\r\n                }\r\n            }];\r\n            var modalOptions = {\r\n                content: content,\r\n                buttons: [{\r\n                    label: '<div class=\"icon ssi-saveIcon\"></div>&nbsp;' + this.translate('save'),\r\n                    closeAfter: false,\r\n                    className: 'ssi-mBtn',\r\n                    method: function (e, modal) {\r\n                        thisS.save(function (data, textStatus, xhr) {\r\n                            if (xhr.status == 201 || xhr.status == 200) {\r\n                                if (modal)\r\n                                    modal.close();\r\n                                ssi.notify('success', thisS.translate('successSave'))\r\n                            }\r\n                        });\r\n                    }\r\n                }]\r\n            };\r\n            this.database.createWindow(modalOptions, topButtons);\r\n        },\r\n        save: function (callback) {\r\n            var formData = this.database.getFormData();\r\n            if (!formData)return;\r\n            var ssi = this.ssi,thisS=this;\r\n            var data = $.extend({}, this.options.data, formData);\r\n            var ajaxOptions = $.extend({}, {\r\n                data: data,\r\n                url: this.database.currentCollection.baseUrl.replace('/:id', '')\r\n            }, this.options.ajaxOptions);\r\n            ssi.ajaxCall(ajaxOptions, function (data, textStatus, xhr) {\r\n                if (xhr.status == 201 || xhr.status == 200) {\r\n                    ssi.plugins['scan'].appendItems((typeof data === 'object'&&data.hasOwnProperty(thisS.database.currentCollection.id) ? data : formData));\r\n                }\r\n                if (typeof callback === 'function') {\r\n                    callback(data, textStatus, xhr, formData)\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n    })\r\n})(jQuery);","(function () {\r\n    Ss_input.plugins['refresh'] = Ss_input.Plugin.extend({\r\n         init: function () {\r\n             var ssi = this.ssi;\r\n             var thisS = this;\r\n             ssi.addButton({\r\n                 label: '<div class=\"icon ssi-refreshIcon\"></div>',\r\n                 title: this.translate('refresh'),\r\n                 id: 'ssi-refresh',\r\n                 keyCode: 'r',\r\n                 className: 'ssi-urlSwitch',\r\n                 method: function () {\r\n                     thisS.refresh(ssi.currentCollection.id);\r\n                 }\r\n             }, 'menuButton', ['menu'])\r\n         },\r\n         refresh: function () {\r\n             if (this.ssi.readOnlyMode)return;\r\n             var ssi = this.ssi;\r\n             var cache = ssi.plugins['cache'];\r\n             if (cache) {\r\n                 cache.removeCachedPage(ssi.currentCollection.id)\r\n             }\r\n             ssi.$element.trigger('resetAction.ssi');\r\n             ssi.plugins['scan'].scanCollection(ssi.currentCollection.id,ssi.currentCollection.url,ssi.currentCollection.data);\r\n         }\r\n     }\r\n    )\r\n})();","(function ($) {\r\n    Ss_input.plugins['imgBox'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            excludeItems: '',\r\n            imageField: ''\r\n\r\n        }, init: function () {\r\n            this.setEvents();\r\n        }, setEvents: function () {\r\n            var Button = this.getButton('', 'contentImages'+this.ssi.uniqueId);\r\n            var thisS = this;\r\n            this.ssi.$element.on('appendItemAction.ssi', function (e, item) {\r\n                if (thisS.options.imageField && item.data[thisS.options.imageField] && (!thisS.options.excludeItems || eval(Ss_input.tools.dataReplace(thisS.options.excludeItems, \"item.data\")) == 'false')) {\r\n                    item.$element.find('div.ssi-optionsDiv').append(Button.clone(true).attr('href', item.data[thisS.options.imageField]));\r\n                }\r\n            }).on('changeSchemaAction.ssi', function (e, data) {\r\n                if (data['displayImage'] && data['displayImage'].indexOf('field:(') > -1&& data['displayImage'].indexOf('condition:(') == -1)\r\n                    thisS.options.imageField = data['displayImage'].replace(/field:\\((.*)\\)/, '$1');\r\n            });\r\n        },\r\n        getButton: function (href, group) {\r\n            return this.ssi.addButton({\r\n                label: '<div class=\"icon ssi-imgBoxIcon\"></div>',\r\n                id: '',\r\n                stopPropagation: false,\r\n                className: 'ssi-imgBox',\r\n                attributes: {'data-ssi_imgGroup': group, href: href}\r\n            }, 'itemButton', false);\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['scan'] = Ss_input.Plugin.extend({\r\n        require: ['templateManager'],\r\n        defaults: {\r\n            titleField: 'title',\r\n            idField: 'id',\r\n            displayImage: '',\r\n            itemClass: '',\r\n            data: {},\r\n            ajaxOptions: {}\r\n        },\r\n        init: function () {\r\n            var ssi = this.ssi;\r\n            ssi.plugins['templateManager'].scan = this;\r\n            this.selectedTemplate = {};\r\n            this.setEvents();\r\n        },\r\n        scanCollection: function (id, url, data) {\r\n            if (!url)return;\r\n            id = id || '/';//Ss_input.tools.basename(url);\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.currentCollection = {id: id, url: url, data: data};\r\n            var cache = ssi.plugins['cache'];\r\n            if (cache) {\r\n                var cachedPage = cache.getCachedPage(id);\r\n            }\r\n            if (!cachedPage) {\r\n                ssi.readyState = false;\r\n                var callback = function (data) {\r\n                    var page = {id: id, data: data};\r\n                    ssi.$element.trigger('beforeScanAction.ssi', page);\r\n                    if (!ssi.abort) {\r\n                        thisS.echoFiles(page);\r\n                    }\r\n                    ssi.$element.trigger('scanAction.ssi', page);\r\n                    ssi.abort = false;\r\n                    ssi.readyState = true;\r\n                };\r\n                data = $.extend({}, thisS.options.data, data);\r\n                var ajaxOptions = $.extend({}, {\r\n                    'data': data,\r\n                    type: 'GET'\r\n                }, this.options.ajaxOptions);\r\n                ajaxOptions.url = url || ajaxOptions.url;\r\n                ssi.ajaxCall(ajaxOptions, callback, function () {\r\n                    ssi.readyState = true;\r\n                });\r\n            } else {\r\n                this.echoFiles(cachedPage);\r\n            }\r\n            return this;\r\n        },\r\n        echoFiles: function (page, viewOnly, silent) {\r\n            if(!page)return;\r\n            var ssi = this.ssi;\r\n            ssi.readOnlyMode = !!viewOnly || !!ssi.currentCollection['readOnly'];\r\n            var data = page.data;\r\n            if (!data)return;\r\n            ssi.$element.trigger('beforeEchoItemsAction.ssi', page);\r\n            for (var i = 0, items = [], length = data.length; i < length; ++i) {\r\n                items.push(this.filesToDOM(data[i]));\r\n            }\r\n            var content = $(this.selectedTemplate.wrapper).append(items);\r\n            ssi.$content.find('#ssi-contentFiles').html(content);\r\n            if (silent)\r\n                ssi.$element.trigger('silentEchoItemsAction.ssi');\r\n            else\r\n                ssi.$element.trigger('echoItemsAction.ssi');\r\n        },\r\n        reEchoItems: function () {\r\n            var ssi = this.ssi;\r\n            this.echoFiles({\r\n                id: ssi.currentCollection.id,\r\n                data: ssi.getPageData()\r\n            });\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$element.on('changeSchemaAction.ssi', function (e, data) {\r\n                thisS.options.titleField = data['displayName'];\r\n                thisS.options.idField = data['id'];\r\n                thisS.options.displayImage = data['displayImage'];\r\n            });\r\n        },\r\n        filesToDOM: function (data, displayName) {\r\n            var ssi = this.ssi;\r\n            var item = {};\r\n            var previewImage = eval(Ss_input.tools.dataReplace(this.options.displayImage));\r\n            item.$element = $(ssi.plugins['templateManager'].getTemplate(data, displayName));\r\n            var displayDiv = item.$element.find('div.ssi-displayDiv');\r\n            Ss_input.tools.loadImage(displayDiv, previewImage);\r\n            item.$element.find('.ssi-mainElement').data('info', data);\r\n            item.data = data;\r\n            ssi.$element.trigger('appendItemAction.ssi', item);\r\n            return item.$element;\r\n        },\r\n        appendItems: function (data, method, $element) {\r\n            $element = $element || this.ssi.$content.find('#ssi-itemsWrapper');\r\n            method = method || 'append';\r\n            data = Ss_input.tools.toArray(data);\r\n            for (var i = 0, content = [], length = data.length; i < length; ++i) {\r\n                content.push(this.filesToDOM(data[i]));\r\n            }\r\n            if (method == 'html')\r\n                this.emptyPage($element);\r\n            $element[method](content);\r\n            this.ssi.$element.trigger('appendItemSetAction.ssi', [data]);\r\n        },\r\n        emptyPage: function ($element) {\r\n            $element = $element || this.ssi.$content.find('#ssi-contentFiles');\r\n            $element.empty();\r\n            this.ssi.$element.trigger('emptyPageAction.ssi');\r\n        },\r\n        resetItem: function (id, data) {\r\n            data = $.extend({}, this.ssi.get$mainElementById(id).data('info'), data);\r\n            this.removeItems(id);\r\n            this.appendItems(data);\r\n        },\r\n        removeItems: function (id) {\r\n            var ssi = this.ssi;\r\n            id = Ss_input.tools.toArray(id);\r\n            for (var i = 0, length = id.length; i < length; i++) {\r\n                var obj = id[i];\r\n                ssi.get$itemWrapper(ssi.get$mainElementById(obj)).remove();\r\n                ssi.$element.trigger('removeItemAction', [obj]);\r\n            }\r\n        }\r\n    });\r\n\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['templateManager'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            details: {\r\n                wrapper: '<table id=\"ssi-itemsWrapper\" class=\"ssi-details\"><thead><tr class=\"header\"><th></th><#=header#><th></th></tr></thead></table>',\r\n                item: '<tbody class=\"ssi-itemWrapper <#= previewClass #>\"><tr class=\"ssi-selectable ssi-mainElement\" data-ID=\"<#= id #>\"><td><div style=\\'background-image:url(\"<#=displayImage#>\");\\'\" class=\"ssi-displayDiv\"></td><#=items#><td><div class=\"ssi-optionsDiv\"></div></td></tr></tbody>',\r\n                header: '<th><#=name#></th>'\r\n            },\r\n            icons: {\r\n                wrapper: '<div id=\"ssi-itemsWrapper\" class=\"ssi-icons\"></div>',\r\n                item: '<table class=\"ssi-itemWrapper <#= previewClass #>\"><tr><td><div style=\\'background-image:url(\"<#=displayImage#>\");\\' data-ID=\"<#= id #>\" class=\"ssi-mainElement ssi-selectable ssi-displayDiv\"><div class=\"ssi-optionsDiv\"></div></div></td></tr><tr><td><div class=\"ssi-itemName\"><#= displayName||\"\" #></div></td></tr></table>'\r\n            }\r\n        }, defaults: {\r\n            template: 'icons',\r\n            excludeFields: [],\r\n            limit: 3,\r\n            translateFields: ''\r\n        },\r\n        init: function () {\r\n            this.options.translateFields = this.options.translateFields || this.ssi.options.translateFields;\r\n            this.headerArray = [];\r\n            this.header = '';\r\n            this.setEvents()\r\n             .setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-previewIcon\"></span> ' + this.translate('previewType'),\r\n                id: '',\r\n                className: '',\r\n                subMenu: [{\r\n                    label: '<span class=\"icon ssi-detailsPreviewIcon\"></span> ' + this.translate('details'),\r\n                    method: function () {\r\n                        if (thisS.options.template != 'details') {\r\n                            thisS.options.template = 'details';\r\n                            thisS.scan.reEchoItems();\r\n                        }\r\n                    }\r\n                }, {\r\n                    label: '<span class=\"icon ssi-iconsPreviewIcon\"></span> ' + this.translate('icons'),\r\n                    method: function () {\r\n                        if (thisS.options.template != 'icons') {\r\n                            thisS.options.template = 'icons';\r\n                            thisS.scan.reEchoItems();\r\n                        }\r\n                    }\r\n                }]\r\n            }, 'listButton', ['options']);\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.$element.on('beforeEchoItemsAction.ssi', function (e, page) {\r\n                 thisS.scan.selectedTemplate = $.extend({}, thisS.template[thisS.options.template]);\r\n                 thisS.setTemplate(page.data);\r\n             })\r\n             .on('appendItemSetAction.ssi', function () {\r\n                 if (!thisS.header && thisS.options.template == 'details') {\r\n                     thisS.scan.reEchoItems();\r\n                 }\r\n             })\r\n             .on('changeSchemaAction.ssi', function (e, data) {\r\n                 thisS.header = '';\r\n                 thisS.headerArray = [];\r\n                 thisS.options.excludeFields = data['details'];\r\n             });\r\n            return this;\r\n        },\r\n        setTemplate: function (data) {\r\n            if (this.options.template == 'details') {\r\n                this.setHeader(data[0]);\r\n            }\r\n        },\r\n        setHeader: function (data) {\r\n            var index = 0;\r\n            if (!this.header) {\r\n                for (var fieldName in data) {\r\n                    if ($.inArray(fieldName, this.options.excludeFields) > -1)continue;\r\n                    this.headerArray.push(fieldName);\r\n                    this.header += Ss_input.tools.template(this.template.details.header, {name: this.translate(fieldName, this.options.translateFields)});\r\n                    index++;\r\n                    if (index == this.options.limit)break;\r\n                }\r\n            }\r\n            this.scan.selectedTemplate.wrapper = Ss_input.tools.template(this.template.details.wrapper, {header: this.header});\r\n        },\r\n        getTemplate: function (data, displayName, displayImage, template) {\r\n            var scanOptions = this.scan.options,\r\n             fieldData,\r\n             previewClass = eval(Ss_input.tools.dataReplace(scanOptions.itemClass)),\r\n             fieldTemplate = '', id = data[scanOptions.idField];\r\n            if (typeof id === 'object') {\r\n                id = data[scanOptions.idField] = id[Ss_input.tools.getFirstKey(id)]\r\n            }\r\n            template = template || this.options.template;\r\n            displayName = displayName || data[scanOptions.titleField] || id;\r\n            displayImage = displayImage || '';\r\n            if (template == 'details') {\r\n                for (var i = 0, length = this.headerArray.length; i < length; i++) {\r\n                    if (typeof data[this.headerArray[i]] === 'object' && !(data[this.headerArray[i]] instanceof Array)) {\r\n                        fieldData = data[this.headerArray[i]] = JSON.stringify(data[this.headerArray[i]]);\r\n                    } else {\r\n                        fieldData = Ss_input.tools.escapeHtml(data[this.headerArray[i]]);\r\n                    }\r\n                    if (fieldData.length > 200 || fieldData.split(' ').length > 30) {\r\n                        fieldData = '<div class=\"ssi-longText\">' + fieldData + '</div>';\r\n                    }\r\n                    fieldTemplate += '<td' + (this.headerArray[i] == scanOptions.titleField ? ' class=\"ssi-itemName\"' : '') + '>' + fieldData + '</td>';\r\n                }\r\n            }\r\n            var dataOptions = {\r\n                id: id,\r\n                displayName: Ss_input.tools.escapeHtml(displayName),\r\n                previewClass: previewClass,\r\n                displayImage: displayImage,\r\n                items: fieldTemplate\r\n            };\r\n            return Ss_input.tools.template(this.template[template].item, dataOptions);\r\n        }\r\n    })\r\n})(jQuery);\r\n\r\n","(function ($) {\r\n    Ss_input.plugins['iconSize'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            defaultSize: 'small'\r\n        },\r\n        init: function () {\r\n            this.sizeClass = {\r\n                'large': 'ssi-mImgL',\r\n                'medium': '',\r\n                small: 'ssi-mImgS'\r\n            };\r\n            this.setButtons()\r\n             .setEvents();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-sizeIcon\"></span> ' + this.translate('iconSize'),\r\n                id: '',\r\n                className: '',\r\n                subMenu: [{\r\n                    label: '<span class=\"ssi-letterIcon\">S</span> ' + this.translate('small'),\r\n                    method: function () {\r\n                        thisS.options.defaultSize = 'small';\r\n                        thisS.setIcons();\r\n                    }\r\n                }, {\r\n                    label: '<span class=\"ssi-letterIcon\">M</span> ' + this.translate('medium'),\r\n                    method: function () {\r\n                        thisS.options.defaultSize = 'medium';\r\n                        thisS.setIcons();\r\n                    }\r\n                }, {\r\n                    label: '<span class=\"ssi-letterIcon\">L</span> ' + this.translate('large'),\r\n                    method: function () {\r\n                        thisS.options.defaultSize = 'large';\r\n                        thisS.setIcons();\r\n                    }\r\n                }]\r\n            }, 'listButton', ['options']);\r\n            return this;\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$element.on('appendItemAction.ssi', function (e, item) {\r\n                item.$element.addClass(thisS.sizeClass[thisS.options.defaultSize])\r\n            });\r\n            return this;\r\n        },\r\n        setIcons: function (size) {\r\n            size = size || this.options.defaultSize;\r\n            this.ssi.$content.find('.ssi-itemWrapper').removeClass('ssi-mImgL ssi-mImgS').addClass(this.sizeClass[size]);\r\n            return this;\r\n        }\r\n\r\n    })\r\n})(jQuery);\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n\r\n */","(function ($) {\r\n    Ss_input.plugins['sort'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            sortType: 'asc',\r\n            sortBy: '',\r\n            sortableFields: [],\r\n            translateFields: ''\r\n        },\r\n        template: {\r\n            reverse: '<a id=\"ssi-reverse\" href=\"#\" class=\"ssi-reverse\"><span class=\"icon ssi-reverseIcon\"></span></a>'\r\n        },\r\n        init: function () {\r\n            var ssi = this.ssi,\r\n             thisS = this;\r\n            this.options.translateFields = this.options.translateFields || ssi.options.translateFields;\r\n            ssi.$element.on('changeSchemaAction.ssi', function (e, data) {\r\n                thisS.options.sortableFields = data['sort'];\r\n                thisS.options.sortBy= data['sort'][0];\r\n                thisS.resetUi();\r\n            });\r\n            if (this.options.sortableFields.length == 0)return;\r\n            this.options.sortBy = this.options.sortBy || this.options.sortableFields[0];\r\n            this.setButtons()\r\n             .setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n\r\n            this.ssi.$element.on('beforeEchoItemsAction.ssi', function (e, page) {\r\n                thisS.sort(page.data);\r\n            })\r\n\r\n        },\r\n        setButtons: function (appendTo) {\r\n            var ssi = this.ssi,\r\n             thisS = this,\r\n             buttons = [];\r\n            $(this.template.reverse).appendTo(ssi.$content.find('#ssi-topBarWrapper')).on('click.ssi', function () {\r\n                if (thisS.options.sortType === 'asc') {\r\n                    thisS.options.sortType = 'desc';\r\n                } else {\r\n                    thisS.options.sortType = 'asc';\r\n                }\r\n                ssi.plugins['scan'].reEchoItems();\r\n                return false;\r\n            });\r\n            for (var i = 0, length = this.options.sortableFields.length; i < length; i++) {\r\n                var field = this.options.sortableFields[i];\r\n                buttons.push({\r\n                    label: '<span class=\"ssi-letterIcon\">' + field[0].toUpperCase() + '</span> ' + this.translate(field, this.options.translateFields),\r\n                    attributes: {'data-ssi_title': field},\r\n                    method: function () {\r\n                        thisS.options.sortBy = $(this).attr('data-ssi_title');\r\n                        ssi.plugins['scan'].echoFiles({\r\n                            id: ssi.currentCollection.id,\r\n                            data: ssi.getPageData()\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n            if(buttons.length<2)return this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-sortIcon\"></span> ' + this.translate('sort'),\r\n                id: 'ssi-sortButton',\r\n                className: '',\r\n                subMenu: buttons\r\n            }, 'listButton', appendTo || ['options']);\r\n            return this;\r\n        },\r\n        resetUi: function () {\r\n            var sortButton = this.ssi.$content.find('#ssi-sortButton').remove();\r\n            this.ssi.$content.find('#ssi-reverse').remove();\r\n            if (!this.options.sortableFields.length)return;\r\n            this.options.sortBy = this.options.sortBy || this.options.sortableFields[0];\r\n            this.setButtons(this.ssi.$content.find('#ssi-TasksBtn').next());\r\n            if (!sortButton.length) {\r\n                this.setEvents();\r\n            }\r\n        },\r\n        sort: function (data) {\r\n            try {\r\n                var thisS = this, ssi_sortBy = this.options.sortBy,\r\n                 ssi_sortType = this.options.sortType;\r\n                if(!ssi_sortType)return;\r\n                data.sort(function (a, b) {\r\n                    var o1, o2;\r\n                    if (new RegExp(\"(?:[a-z]*(?:_date|date_|Date|-date|date-)[a-z]*)|^(?:date)(?:$|[A-Z]+.*)\").test(ssi_sortBy)) {\r\n                        o1 = Ss_input.tools.parseDate(a[ssi_sortBy]);\r\n                        o2 = Ss_input.tools.parseDate(b[ssi_sortBy]);\r\n                    }  else {\r\n                        o1 = a[ssi_sortBy];\r\n                        o2 = b[ssi_sortBy];\r\n                    }\r\n                    if (ssi_sortType === 'desc') {\r\n                        var o3 = o1;\r\n                        o1 = o2;\r\n                        o2 = o3;\r\n                    }\r\n                    if (ssi_sortBy !== thisS.options.sortableFields[0]) {\r\n                        var p1 = a[thisS.options.sortableFields[0]];\r\n                        var p2 = b[thisS.options.sortableFields[0]];\r\n                    }\r\n                    if (o1 < o2) return -1;\r\n                    if (o1 > o2) return 1;\r\n                    if (p1 < p2) return -1;\r\n                    if (p1 > p2) return 1;\r\n                });\r\n            } catch (e) {\r\n                //removeIf(production)\r\n                console.log(e)\r\n                //endRemoveIf(production)\r\n            }\r\n        }\r\n    })\r\n})(jQuery);\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n\r\n */","(function ($) {\r\n    Ss_input.plugins['info'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            table: '<table class = \"ssi-infoTable ssi-infoCompare\"><#=rows#></table>',\r\n            item: '<td><#=fieldData#></td>',\r\n            row: '<tr><th><#=header#></th><#=items#></tr>'\r\n        },\r\n        defaults: {\r\n            excludeItems: '',\r\n            excludeFields: [],\r\n            translateFields:''\r\n        },\r\n        init: function () {\r\n            this.options.translateFields = this.options.translateFields || this.ssi.options.translateFields;\r\n            this.$content = '';\r\n           this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-infoIcon\"></span>' + this.translate('info') + '<span class=\"ssi-keyShort\">ctrl + i</span>',\r\n                id: '',\r\n                keyPress: {\r\n                    keyCode: '73',\r\n                    ctrl: true,\r\n                },\r\n                className: 'ssi-detailsButton',\r\n                method: function () {\r\n                    thisS.getFilesInfo();\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu', 'actions']);\r\n\r\n        },\r\n        handleData: function (data) {\r\n        },\r\n        getTemplate: function (data) {\r\n            var itemsLength = 0,\r\n             realLength = data.length;\r\n            var items, rows = '',dataField;\r\n            for (var dataName in data[0]) {\r\n                if (this.options.excludeFields.length && $.inArray(dataName, this.options.excludeItems) == -1)\r\n                    continue;\r\n                var length = realLength;\r\n                if (length > 6)length = 6;\r\n                items = '';\r\n                for (var i = 0; i < length; i++) {\r\n                    if (this.options.excludeItems && eval(Ss_input.tools.dataReplace(this.options.excludeItems, \"data[i]\")) != \"false\") {\r\n                        if (realLength > length)length++;\r\n                        continue;\r\n                    }\r\n                    if(dataName=='preview'){\r\n                        dataField=data[i][dataName];\r\n                    }else{\r\n                        dataField=Ss_input.tools.escapeHtml(data[i][dataName]);\r\n                        if(dataField.split(' ').length>5){\r\n                            dataField='<div class=\"ssi-longText\">'+dataField+'</div>'\r\n                        }\r\n                    }\r\n                    items += Ss_input.tools.template(this.template.item, {fieldData: dataField});\r\n                    itemsLength++;\r\n                }\r\n                rows += Ss_input.tools.template(this.template.row, {\r\n                    header: this.translate(dataName, this.options.translateFields),\r\n                    items: items\r\n                });\r\n                if (itemsLength == 0)return false;\r\n            }\r\n            return Ss_input.tools.template(this.template.table, {rows: rows});\r\n        },\r\n        getFilesInfo: function () {\r\n            var ssi = this.ssi,\r\n             dataList = ssi.getSelectedData();\r\n            if (!dataList.length) {\r\n                //removeIf(production)\r\n                console.log('No items');\r\n                //endRemoveIf(production)\r\n                return;\r\n            }\r\n            this.handleData(dataList);\r\n            var details = this.getTemplate(dataList);\r\n            if (details) {\r\n                var $details = $(details);\r\n                ssi.createWindow({\r\n                    title: this.translate('details'),\r\n                    sizeClass: 'auto',\r\n                    className: \"ssi-infoModal\",\r\n                    outSideClose: false,\r\n                    content: $details,\r\n                    buttons: {\r\n                        className: 'ssi-mBtn',\r\n                        label: this.translate('ok'),\r\n                        closeAfter: true\r\n                    },\r\n                    onClose: function () {\r\n                        ssi.$element.trigger('infoCloseAction.ssi')\r\n                    }, onShow: function () {\r\n                        ssi.$element.trigger('infoShowAction.ssi', [$details]);\r\n                    }\r\n                }).get$content();\r\n            }\r\n        }\r\n    })\r\n})(jQuery);\r\n","(function ($) {\r\n    var ssi_cutItem = [], ssi_copyItem = [], ssi_totalProgress = [];\r\n    Ss_input.fileSystem['copy'] = Ss_input.Plugin.extend({\r\n        permissions: 'write',\r\n        defaults: {\r\n            copy: {\r\n                data: {},\r\n                ajaxOptions: {}\r\n            },\r\n            cut: {\r\n                data: {},\r\n                ajaxOptions: {}\r\n            }\r\n        },\r\n        init: function () {\r\n            this.setEvents()\r\n             .setButtons();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            ssi.$element.on('resetAction.ssi', function () {\r\n                ssi_cutItem = [];\r\n                ssi_copyItem = [];\r\n                ssi_totalProgress = [];\r\n                ssi.$content.find('.ssi-pasteButton').addClass('disabled');\r\n            }).on('echoItemsAction.ssi', function () {\r\n                 thisS.setCut();\r\n                 if (ssi_cutItem.length > 0 || ssi_copyItem.length > 0) {\r\n                     ssi.$content.find('.ssi-pasteButton').removeClass('disabled');\r\n                 } else {\r\n                     ssi.$content.find('.ssi-pasteButton').addClass('disabled');\r\n                 }\r\n             })\r\n             .on('removeCollectionAction.ssi', function (e, id) {\r\n                 if (ssi_copyItem.length) {\r\n                     Ss_input.tools.removeFromArray(ssi_copyItem, ssi.fileSystem.options.rootPath + id);\r\n                 }\r\n             });\r\n            return this;\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-copyIcon\"></span> ' + this.translate('copy') + ' <span class=\"ssi-keyShort\">ctrl + c</span>',\r\n                className: '',\r\n                method: function () {\r\n                    thisS.copy();\r\n                },\r\n                keyPress: {\r\n                    keyCode: '67',\r\n                    ctrl: true\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu', 'actions']);\r\n            if (ssi.checkPermissions(this.permissions, 'cut'))\r\n                ssi.addButton({\r\n                    label: '<span class=\"icon ssi-cutIcon\"></span> ' + this.translate('cut') + ' <span class=\"ssi-keyShort\">ctrl + x</span>',\r\n                    className: '',\r\n                    method: function () {\r\n                        thisS.cut();\r\n                    },\r\n                    keyPress: {\r\n                        keyCode: '88',\r\n                        ctrl: true\r\n                    },\r\n                    selectionRequired: true\r\n                }, 'listButton', ['contextMenu', 'actions']);\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-pasteIcon\"></span> ' + this.translate('paste') + ' <span class=\"ssi-keyShort\">ctrl + v</span>',\r\n                className: 'ssi-pasteButton',\r\n                method: function () {\r\n                    thisS.paste();\r\n                },\r\n                keyPress: {\r\n                    keyCode: '86',\r\n                    ctrl: true\r\n                },\r\n                selectionRequired: false\r\n            }, 'listButton', ['contextMenu', 'options']);\r\n            return this;\r\n        },\r\n        cut: function (url) {\r\n            try {\r\n                var ssi = this.ssi;\r\n                this.cutEffect('remove');\r\n                if (!url) {\r\n                    ssi_cutItem = ssi.getUrlList();\r\n                } else {\r\n                    ssi_cutItem = Ss_input.tools.toArray(url);\r\n                }\r\n                this.toPaste = ssi.getSelectedData();\r\n                this.cutEffect('add');\r\n                ssi_copyItem = [];\r\n                ssi.$content.find('.ssi-pasteButton').removeClass('disabled');\r\n            } catch (e) {\r\n            }\r\n        },\r\n        copy: function (url) {\r\n            var ssi = this.ssi;\r\n            if (!url) {\r\n                ssi_copyItem = ssi.getUrlList();\r\n            } else {\r\n                Ss_input.tools.toArray(url);\r\n            }\r\n            this.toPaste = ssi.getSelectedData();\r\n\r\n            if (ssi_cutItem.length > 0) {\r\n                this.cutEffect('remove');\r\n                ssi_cutItem = [];\r\n            }\r\n            ssi.$content.find('.ssi-pasteButton').removeClass('disabled');\r\n        },\r\n        cutEffect: function (action) {\r\n            if (action === 'add') {\r\n                var active = $('.ssi-mActive').addClass('ssi-cutItem');\r\n                if (!active.length) {\r\n                    $(this.ssi.plugins['contextMenu'].rightClickItem).addClass('ssi-cutItem');\r\n                }\r\n            } else {\r\n                $('.ssi-cutItem').removeClass('ssi-cutItem');\r\n            }\r\n        },\r\n        setCut: function () {\r\n            for (var i = 0; i < ssi_cutItem.length; i++) {\r\n                this.ssi.$content.find(\".ssi-selectable[data-ID='\" + ssi_cutItem[i] + \"']\").addClass('ssi-cutItem');\r\n            }\r\n        },\r\n        paste: function () {\r\n            var url, extraData, ajaxOptions, urlList, action, middleware = '', ssi = this.ssi, thisS = this;\r\n            var fileSystem = ssi.fileSystem;\r\n\r\n            if (ssi_copyItem.length > 0) {\r\n                action = 'copyAction';\r\n                url = fileSystem.options.scriptsPath + '/copyAction.php';\r\n                extraData = this.options.copy.data || {};\r\n                urlList = ssi_copyItem;\r\n                ajaxOptions = this.options.copy.ajaxOptions || {};\r\n            } else if (ssi_cutItem.length > 0) {\r\n                action = 'cutAction';\r\n                url = fileSystem.options.scriptsPath + '/cutAction.php';\r\n                extraData = this.options.cut.data || {};\r\n                urlList = ssi_cutItem;\r\n                ajaxOptions = this.options.cut.ajaxOptions || {};\r\n                this.cutEffect('remove');\r\n                ssi_cutItem = [];\r\n            } else {\r\n                return;\r\n            }\r\n            var pageData = ssi.getPageData(), glob_i = 0;\r\n            ajaxOptions = $.extend({}, {\r\n                url: url,\r\n                xhr: function () {\r\n                    var xhr = new window.XMLHttpRequest();\r\n                    xhr.addEventListener(\"progress\", function (e) {\r\n                        if (e.lengthComputable) {\r\n                            var progress = ssi.$content.find('#ssi-progressBar');\r\n                            progress.removeClass('hide');\r\n                            ssi_totalProgress[glob_i] = (e.loaded / e.total) * 100;\r\n                            var sum = Ss_input.tools.arraySum(ssi_totalProgress) / urlList.length;\r\n                            progress.css({\r\n                                width: sum + '%'\r\n                            });\r\n                        }\r\n                    }, false);\r\n                    return xhr;\r\n                }\r\n            }, ajaxOptions);\r\n            sendRequest();\r\n            function ajaxLoop(data, middleware) {\r\n                var newDestination;\r\n                middleware = middleware || '';\r\n                ssi_totalProgress.push(0);\r\n                ajaxOptions.success = function (data) {\r\n                    //removeIf(production)\r\n                    /*\r\n                     //endRemoveIf(production)\r\n                     try {\r\n                     //removeIf(production)\r\n                     */\r\n                    //endRemoveIf(production)\r\n                    try {\r\n                        data = $.parseJSON(data);\r\n                    } catch (err) {\r\n                        console.log('Probably data is not json formatted.');\r\n                        console.log(data);\r\n                    }\r\n\r\n                    if (data.type === 'success') {\r\n                        var fName;\r\n                        if ((data.msg.indexOf('continue') > -1))\r\n                            fName = data.msg.replace(' continue', '');\r\n                        else\r\n                            fName = Ss_input.tools.basename(ajaxOptions.data.newUrl);\r\n                        pasteToDOM(urlList[glob_i], action, middleware, fName);\r\n                        next();\r\n                        if (ssi.checkedItems) {\r\n                            Ss_input.tools.removeFromArray(ssi.checkedItems, urlList[glob_i])\r\n                        }\r\n                    } else if (data.type === 'error') {\r\n                        if (data.msg.indexOf('already_exists') > -1) {\r\n                            newDestination = fileSystem.getPath(Ss_input.tools.basename(urlList[glob_i]));\r\n                            var name = data.msg.replace('already_exists', '');\r\n                            if (name.length > 30) {\r\n                                name = Ss_input.tools.cutFileName(name, '', 28)\r\n                            }\r\n                            bootCall(newDestination, urlList[glob_i], name);\r\n                        } else {\r\n                            throw{\r\n                                type: data.type,\r\n                                msg: data.msg\r\n                            }\r\n                        }\r\n                    } else {\r\n                        throw{\r\n                            type: data.type,\r\n                            msg: data.msg\r\n                        }\r\n                    }\r\n                    //removeIf(production)\r\n                    /*\r\n                     //endRemoveIf(production)\r\n                     } catch (err) {\r\n                     next();\r\n                     if (err.type === 'error') {\r\n                     ssi.notify('error', err.msg);\r\n                     } else {\r\n                     console.log(data);\r\n                     console.log(err.msg);\r\n                     console.log(err.message);\r\n                     }\r\n                     }\r\n                     //removeIf(production)\r\n                     */\r\n                    //endRemoveIf(production)\r\n                };\r\n                ajaxOptions.data = data;\r\n                ssi.ajaxCall(ajaxOptions);\r\n            }\r\n\r\n            function changeDestination(CopiedCurrent, finalName, destinations) {\r\n                var newName = generateNewName(finalName, CopiedCurrent.type);\r\n                var regexp = new RegExp(Ss_input.tools.escape(finalName) + '$');\r\n                return destinations.replace(regexp, newName)\r\n            }\r\n\r\n            function generateNewName(fileName, type, action) {\r\n                var nameArray = [], newName, i;\r\n                for (i = 0; i < pageData.length; i++) {\r\n                    nameArray[i] = pageData[i].name;\r\n                }\r\n                if (action === 'inArray') {\r\n                    return $.inArray(fileName, nameArray) !== -1;\r\n                }\r\n                var ext = '', tempName = fileName;\r\n                if (type !== 'zzzzfolder') {\r\n                    ext = '.' + Ss_input.tools.getExtension(fileName);\r\n                    tempName = fileName.replace(ext, '')\r\n                }\r\n                if ($.inArray(tempName + '-copy' + ext, nameArray) !== -1) {\r\n                    if (type === 'zzzzfolder') {\r\n                        for (i = 1; i < 50; i++) {\r\n                            newName = fileName + '-copy(' + i + ')';\r\n                            if ($.inArray(newName, nameArray) === -1) {\r\n                                fileName = newName;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (i = 1; i < 50; i++) {\r\n                            newName = fileName.replace(/(.[a-zA-Z]{1,5})$/, '-copy(' + i + ')$1');\r\n                            if ($.inArray(newName, nameArray) === -1) {\r\n                                fileName = newName;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    fileName = tempName + '-copy' + ext;\r\n                }\r\n                return fileName;\r\n            }\r\n\r\n            function bootCall(newDestination, oldDestination, name, CopiedCurrent) {\r\n                var data = $.extend({},\r\n                 extraData, {\r\n                     'newUrl': newDestination,\r\n                     'oldUrl': oldDestination\r\n                 });\r\n                var createCopyCallback = function () {\r\n                     if (action !== 'cutAction') {\r\n                         newDestination = changeDestination(CopiedCurrent, name, newDestination);\r\n                         data['newUrl'] = newDestination;\r\n                         data['action'] = 'continue';\r\n                         ajaxLoop(data, 'continue');\r\n                     }\r\n                 },\r\n                 replaceCallback = function () {\r\n                     data['action'] = true;\r\n                     ajaxLoop(data, 'replace');\r\n                 },\r\n                 skipCallback = function () {\r\n                     glob_i++;\r\n                     next(urlList[glob_i]);\r\n                 };\r\n                var buttons = [\r\n                    {\r\n                        label: thisS.translate('replace'),\r\n                        closeAfter: true,\r\n                        className: \"ssi-mBtn\",\r\n                        method: replaceCallback\r\n                    },\r\n                    {\r\n                        label: thisS.translate('skip'),\r\n                        className: \"ssi-mBtn\",\r\n                        closeAfter: true,\r\n                        method: skipCallback\r\n                    },\r\n                    {\r\n                        label: thisS.translate('cancel'),\r\n                        className: \"ssi-mBtn ssi-cancel\",\r\n                        closeAfter: true\r\n                    }\r\n                ];\r\n                if (action === 'copyAction') {\r\n                    buttons.splice(0, 0, {\r\n                        label: thisS.translate('createCopy'),\r\n                        closeAfter: true,\r\n                        className: \"ssi-mBtn\",\r\n                        method: createCopyCallback\r\n                    });\r\n                }\r\n                ssi.createWindow({\r\n                    sizeClass: 'small',\r\n                    className:'ssi-confirmModal',\r\n                    fixedHeight: false,\r\n                    content: thisS.translate('replaceMsg').replaceText(name),\r\n                    buttons: buttons\r\n                });\r\n            }\r\n\r\n            function next() {\r\n                glob_i++;\r\n                if (glob_i < urlList.length) {\r\n                    sendRequest();\r\n                } else {\r\n                    ssi.reloadProgressbar();\r\n                    glob_i = 0;\r\n                    if (action == 'cutAction') {\r\n                        ssi.$content.find('.ssi-pasteButton').addClass('disabled');\r\n                        ssi_cutItem = [];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function sendRequest() {\r\n                var itemName = Ss_input.tools.basename(urlList[glob_i]);\r\n                var newDestination = fileSystem.getPath(itemName);\r\n                if (action == 'cutAction' && newDestination === urlList[glob_i]) {\r\n                    return;\r\n                }\r\n                var data = $.extend({}, extraData, {\r\n                    'newUrl': newDestination,\r\n                    'oldUrl': urlList[glob_i]\r\n                });\r\n\r\n                var CopiedCurrent = (Ss_input.tools.findByKey(thisS.toPaste, 'name', itemName));\r\n                if (newDestination == urlList[glob_i]) {\r\n                    newDestination = changeDestination(CopiedCurrent, itemName, newDestination);\r\n                    data['newUrl'] = newDestination;\r\n                    middleware = 'continue';\r\n                    ajaxLoop(data, middleware);\r\n                } else {\r\n                    if (generateNewName(itemName, CopiedCurrent.type, 'inArray')) {\r\n                        bootCall(newDestination, urlList[glob_i], itemName, CopiedCurrent);\r\n                    } else {\r\n                        ajaxLoop(data, middleware);\r\n                    }\r\n                }\r\n            }\r\n            function pasteToDOM(oldAddress, action, middleware, fileName) {\r\n                var oldName = Ss_input.tools.basename(oldAddress);\r\n                var path = Ss_input.tools.dirname(oldAddress).replace(fileSystem.options.rootPath, '') || '/';\r\n                if (action === 'cutAction' && middleware === 'continue') {\r\n                    return;\r\n                }\r\n                var currentObject = $.extend({}, Ss_input.tools.findByKey(thisS.toPaste, 'name', oldName));\r\n\r\n                if (middleware === 'replace') {\r\n                    ssi.$element.trigger('removeItemAction.ssi', currentObject.path);\r\n                    if (currentObject.mimeType === 'directory') {\r\n                        ssi.$element.trigger('removeCollectionAction.ssi', currentObject.path.replace(ssi.fileSystem.rootPath));\r\n                    }\r\n                } else if (middleware === 'continue' && action != 'cutAction') {\r\n                    currentObject.name = fileName;\r\n                }\r\n                currentObject.path = fileSystem.getPath(fileName);\r\n                var sideBar = ssi.plugins['sidebar'];\r\n                var cache = ssi.plugins['cache'];\r\n                if (currentObject.mimeType === 'directory') {\r\n                    var cut = false;\r\n                    if (action === 'cutAction') {\r\n                        cut = true;\r\n                        if (cache && cache.options.cacheLimit > 1) {\r\n                            cache.removeCachedPage(Ss_input.tools.urlUnion(path, fileName))\r\n                        }\r\n                    }\r\n                    if (sideBar)\r\n                        sideBar.copyTree(oldAddress, fileSystem.getPath(fileName), true, cut);\r\n                }\r\n                if (middleware != 'replace')\r\n                    ssi.plugins['scan'].appendItems(currentObject);\r\n                if (action === 'cutAction' && cache && cache.options.cacheLimit > 1) {\r\n                    cache.removeCachedItem('path', oldAddress, path);\r\n                }\r\n            }\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    var ssi_totalProgress = [];\r\n    Ss_input.plugins['delete'] = Ss_input.Plugin.extend({\r\n        permissions: 'edit',\r\n        defaults: {\r\n            sendId: 'inForm',\r\n            ajaxOptions: {},\r\n            onDelete: function () {\r\n            },\r\n            data: {}\r\n        },\r\n        init: function () {\r\n            this.setEvents();\r\n            this.setButtons();\r\n            this.baseurl = this.options.ajaxOptions.url;\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$element.on('resetAction.ssi', function () {\r\n                ssi_totalProgress = [];\r\n            });\r\n            this.ssi.$element.on('changeSchemaAction.ssi', function (e, data) {\r\n                thisS.baseurl = data['url'];\r\n            });\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-deleteIcon\"></span> ' + this.translate('delete') + ' <span class=\"ssi-keyShort\">del</span>',\r\n                id: '',\r\n                keyPress: {keyCode: '46'},\r\n                className: '',\r\n                method: function () {\r\n                    thisS.deleteFiles();\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu', 'actions']);\r\n        },\r\n        idInUrl: function (ssi_delItem) {\r\n            for (var i = 0, length = ssi_delItem.length; i < length; i++) {\r\n                if (!ssi_delItem[i]) {\r\n                    console.log('Id is required. Try to refresh the data!');\r\n                    continue;\r\n                }\r\n                this.options.ajaxOptions.url = (this.baseurl.indexOf('/:id') == -1 ? this.baseurl + '/' + ssi_delItem[i] : this.baseurl.replace(':id', ssi_delItem[i]));\r\n                this.sendRequest('', this.deleteCallback(ssi_delItem[i]));\r\n            }\r\n        },\r\n        deleteCallback: function (item) {\r\n            var thisS = this;\r\n            return function (data, textStatus, xhr) {\r\n                if (xhr.status > 200 || 204) {\r\n                    thisS.ssi.plugins['scan'].removeItems(item);\r\n                    thisS.ssi.$element.trigger('resetAction.ssi');\r\n                }\r\n                thisS.ssi.$element.trigger('deleteAction.ssi',item);\r\n                if (typeof thisS.options.onDelete === 'function') {\r\n                    thisS.options.onDelete(data, textStatus, xhr, item)\r\n                }\r\n            };\r\n        },\r\n        sendRequest: function (data, callback) {\r\n            data = data || {};\r\n            data = $.extend({}, this.options.data, data);\r\n            var ajaxOptions = $.extend({},\r\n             {\r\n                 data: data,\r\n                 type: \"DELETE\",\r\n                 url: ''\r\n             }, this.options.ajaxOptions);\r\n            this.ssi.ajaxCall(ajaxOptions, callback);\r\n        },\r\n        idInForm: function (ssi_delItem) {\r\n            this.sendRequest({\r\n                id: ssi_delItem\r\n            }, this.deleteCallback(ssi_delItem));\r\n        },\r\n        deleteDir: function (ssi_delItem) {\r\n            if (!ssi_delItem.length) {\r\n                return;\r\n            }\r\n            if (this.options.sendId == 'inUrl') {\r\n                this.idInUrl(ssi_delItem);\r\n            } else {\r\n                this.idInForm(ssi_delItem);\r\n            }\r\n        },\r\n        deleteFiles: function () {\r\n            var ssi = this.ssi,\r\n             thisS = this,\r\n             ssi_delItem = ssi.getUrlList();\r\n            if (!ssi_delItem || ssi_delItem.length === 0) {\r\n                return;\r\n            }\r\n            ssi.createWindow({\r\n                sizeClass: 'dialog',\r\n                fixedHeight: false,\r\n                className: \"ssi-confirmModal\",\r\n                content: this.translate('deleteMsg'),\r\n                buttons: [{\r\n                    label: this.translate('cancel'),\r\n                    className: \"ssi-mBtn ssi-cancel\",\r\n                    closeAfter: true\r\n                }, {\r\n                    label: this.translate('ok'),\r\n                    className: \"ssi-mBtn\",\r\n                    closeAfter: true,\r\n                    focused: true,\r\n                    method: function () {\r\n                        thisS.deleteDir(ssi_delItem);\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['textEditor'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            ajaxOptions: {},\r\n            data: {},\r\n            pathField: 'path',\r\n            modalOptions: {\r\n                preview: {\r\n                    icon: true,\r\n                    state: 'normal',\r\n                    hideIcons: true\r\n                }\r\n            },\r\n            readOnly: ''\r\n        },\r\n        init: function () {\r\n            this.modalOptions = {\r\n                className: 'ssi-filePreview',\r\n                fixedHeight: true,\r\n                buttons: [],\r\n                outSideClose: false,\r\n                sizeClass: 'large',\r\n                fitScreen: true\r\n            };\r\n            this.path = '';\r\n            this.setModal();\r\n            this.setButtons()\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-editFileIcon\"></span> ' + this.translate('textEditor'),\r\n                id: '',\r\n                className: 'ssi-editFile',\r\n                method: function (e) {\r\n                    thisS.path = thisS.ssi.getSelectedField('path')[0];\r\n                    thisS.openFile(thisS.path);\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['openWith'], 'condition:(field:(mimeType)==\"text/plain\")');\r\n        },\r\n        setModal: function () {\r\n            var thisS = this;\r\n            $.extend(this.modalOptions, this.options.modalOptions);\r\n            if (this.ssi.checkPermissions('edit', 'editFiles')) {\r\n                this.modalOptions.buttons.push({\r\n                    label: this.translate('save'),\r\n                    method: function () {\r\n                        thisS.saveFile(thisS.getPath(), thisS.getContent());\r\n                    }\r\n                }, {\r\n                    label: thisS.translate('cancel'),\r\n                    closeAfter: true\r\n                });\r\n            } else {\r\n                this.options.readOnly = this.options.readOnly || true;\r\n            }\r\n        },\r\n        openFile: function (path, done) {\r\n            var thisS = this;\r\n            var callback = function (data) {\r\n                var $textArea = $('<textarea id=\"ssi-textArea\" class=\"ssi-textArea\" ' + (thisS.options.readOnly ? 'readonly' : '') + '>' + data + '</textarea>');\r\n                thisS.createWindow($textArea, Ss_input.tools.basename(path));\r\n                if (typeof done == 'function')\r\n                    done($textArea);\r\n            };\r\n            this.sendRequest(path, '', callback, 'GET')\r\n        },\r\n        saveFile: function (path, content) {\r\n            var thisS = this;\r\n            var callback = function (data) {\r\n                thisS.ssi.notify('success', thisS.translate('fileSaved'))\r\n            };\r\n            this.sendRequest(path, content, callback, 'UPDATE');\r\n            return this;\r\n        },\r\n        createWindow: function (content, title) {\r\n            this.modalOptions.content = content;\r\n            this.modalOptions.title = title;\r\n            this.uniqueId = 'ssi-normalModal' + this.ssi.createWindow(this.modalOptions).numberId;\r\n            return this;\r\n        },\r\n        sendRequest: function (path, content, callback, method) {\r\n            var ssi = this.ssi;\r\n            var data = $.extend({}, this.options.data, {\r\n                filePath: path,\r\n                fileContent: content\r\n            });\r\n            var ajaxOptions = $.extend({}, {\r\n                data: data,\r\n                type: method,\r\n                url: ssi.fileSystem.options.scriptsPath + '/' + 'editFileAction.php'\r\n            }, this.options.ajaxOptions);\r\n            ssi.ajaxCall(ajaxOptions, callback);\r\n            return this;\r\n        },\r\n        getContent: function () {\r\n            return $('#' + this.uniqueId).find('#ssi-textArea').val()\r\n        },\r\n        getPath: function () {\r\n            return this.path;\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['aceEditor'] = Ss_input.Plugin.extend({\r\n        externalResources: ['ace', 'ace.require(\"ace/ext/modelist\")'],\r\n        defaults: {\r\n            theme: 'monokai',\r\n            config:function(){}\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-aceEditorIcon\"></span> ' + this.translate('aceEditor'),\r\n                id: '',\r\n                className: 'ssi-editFile',\r\n                method: function () {\r\n                    thisS.path=thisS.ssi.getSelectedField('path')[0];\r\n                    thisS.openFile(thisS.path);\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['openWith','actions'], 'condition:(field:(mimeType)==\"text/plain\")');\r\n            this.modalOptions.className+=' ssi-aceEditor';\r\n        },\r\n        openFile: function (path, done) {\r\n            var thisS = this;\r\n            var callback = function (data) {\r\n                var $textArea = '<div class=\"ssi-textArea\" id=\"ssi-aceEditor\">' + data + '</div>';\r\n                thisS.createWindow($textArea, Ss_input.tools.basename(path));\r\n                thisS.setEditor(path);\r\n                if (typeof done == 'function')\r\n                    done($textArea);\r\n            };\r\n            this.sendRequest(path, '', callback, 'GET')\r\n        },\r\n        setEditor: function (path) {\r\n            var thisS = this, ssi = this.ssi;\r\n            this.editor = editor = ace.edit(\"ssi-aceEditor\");\r\n            if (this.options.readOnly)\r\n                editor.setReadOnly(true);\r\n            editor.setTheme(\"ace/theme/\" + thisS.options.theme);\r\n            editor.$blockScrolling = 'Infinity';\r\n            var session = editor.session;\r\n            session.setMode(ace.require(\"ace/ext/modelist\").getModeForPath(path).mode);\r\n            editor.resize();\r\n            if(typeof this.options.config==='function'){\r\n                this.options.config(editor);\r\n            }\r\n        },\r\n        getContent: function () {\r\n            return this.editor.getValue();\r\n        },\r\n        getPath: function () {\r\n            return this.path;\r\n        }\r\n    }, 'textEditor',Ss_input.fileSystem);\r\n})(jQuery);\r\n","(function ($) {\r\n    Ss_input.fileSystem['rename'] = Ss_input.Plugin.extend({\r\n        permissions: 'edit',\r\n        template: '<div id=\"ssi-editField\" class=\"ssi-editField\"><input type=\"text\" id=\"ssi-renameInput\" value=\"<#=value#>\" /></br><button class=\"ssi-mBtn\" id=\"ssi-renameConfirm\"><#=okLabel#></button><button class=\"ssi-mBtn ssi-cancel\" id=\"ssi-renameCancel\"><#=cancelLabel#></button></div>',\r\n        defaults: {\r\n            ajaxOptions: {},\r\n            data: {}\r\n        },\r\n        init: function () {\r\n            this.setButtons();\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi;\r\n            ssi.$element.on('appendItemAction.ssi', function (e, item) {\r\n            });\r\n            ssi.$content.on('mousedown.ssi', function (e) {\r\n                var docContainer = $('.ssi-itemWrapper');\r\n                var isETarget = docContainer.is(e.target);\r\n                var hasETarget = docContainer.has(e.target).length === 0;\r\n                var hasMultiOpt = $(e.target).hasClass('ssi-selectionRequired');\r\n                if (!isETarget && hasETarget && !hasMultiOpt) {\r\n                    $('.ssi-editField').remove();\r\n                    $('.ssi-itemName').show();\r\n                }\r\n            })\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-renameIcon\"></span> ' + this.translate('rename') + ' <span class=\"ssi-keyShort\">F2</span>',\r\n                id: '',\r\n                className: 'ssi-rename',\r\n                keyPress: {\r\n                    keyCode: '113',\r\n                    ctrl: false\r\n                },\r\n                method: function () {\r\n                    thisS.rename();\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu', 'actions']);\r\n\r\n        },\r\n        rename: function (url) {\r\n            this.ssi.$content.find('#ssi-renameCancel').trigger('click');\r\n            var ssi = this.ssi, thisS = this;\r\n            var fileSystem = ssi.fileSystem;\r\n\r\n            url = url || ssi.getUrlList()[0];\r\n            var $element = ssi.get$mainElementById(url);\r\n            var mainTable = $element.parents('.ssi-itemWrapper');\r\n            var $target = mainTable.find('.ssi-itemName'),\r\n             value = Ss_input.tools.basename(url);\r\n            var $renameInput = $(Ss_input.tools.template(this.template, {\r\n                value: value,\r\n                okLabel: this.translate('ok'),\r\n                cancelLabel: this.translate('cancel')\r\n            }));\r\n            $renameInput.find('#ssi-renameCancel')\r\n             .click(function () {\r\n                 $renameInput.remove();\r\n                 $target.show();\r\n                 return false;\r\n             });\r\n            var $confirmButton = $renameInput.find('#ssi-renameConfirm'),\r\n             $input = $renameInput.find('#ssi-renameInput');\r\n            $target.after($renameInput).hide();\r\n            $input.focus().click(function () {\r\n                return false;\r\n            });\r\n            $confirmButton.click(function () {\r\n                var newName = $input.val().replace(/[\\[\\]/#<$+%>!`&*'|{?\"=}\\/:\\\\@\\{]/g, '');\r\n                var newExtension = '';\r\n                if (newName != \"\" && newName !== value) {\r\n                    if (ssi.getItemData('name', newName)) {\r\n                        ssi.notify('error', thisS.translate('existError').replaceText(newName));\r\n                        return;\r\n                    }\r\n                    var cachedItem = ssi.getItemData('name', value);\r\n                    if (cachedItem.type !== 'zzzzfolder') {\r\n                        newExtension = Ss_input.tools.getExtension(newName);\r\n                        if ($.inArray(newExtension.toLowerCase(), ssi.fileSystem.options.allowed) === -1) {\r\n                            ssi.notify('error', thisS.translate('extError').replaceText(newExtension));\r\n                            return;\r\n                        }\r\n                    }\r\n                    var oldPath = fileSystem.getPath(value),\r\n                     newPath = fileSystem.getPath(newName),\r\n                     callback = function (data) {\r\n                         $element.attr('data-ID', newPath);\r\n                         $target.text(newName);\r\n                         $renameInput.remove();\r\n                         $target.show();\r\n                         var elementInfo=$element.data('info');\r\n                         elementInfo.name=newName;\r\n                         elementInfo.path=Ss_input.tools.urlUnion(ssi.currentCollection.id, newPath);\r\n                         var cache = ssi.plugins['cache'];\r\n                         if (cache) {\r\n                             var historyCache = cache.getCache();\r\n                             cachedItem = cache.getCachedItem('name', value,'',historyCache);\r\n                             if (cachedItem) {\r\n                                 cachedItem.name = newName;\r\n                                 cachedItem.path = elementInfo.path;\r\n                             }\r\n                             cache.setCache(historyCache);\r\n                         }\r\n                         var sideBar = ssi.plugins['sidebar'];\r\n                         if (!oldPath.isFile(ssi.fileSystem.options.allowed) && sideBar) {\r\n                             sideBar.editTreeLink(oldPath, newPath, newName, newPath);\r\n                         }\r\n                     };\r\n                    var data = $.extend({}, thisS.options.data, {\r\n                        'newUrl': newPath,\r\n                        'oldUrl': oldPath\r\n                    });\r\n                    var ajaxOptions = $.extend({}, {\r\n                        data: data,\r\n                        'language': ssi.options.language,\r\n                        url: fileSystem.options.scriptsPath + '/renameAction.php'\r\n                    }, thisS.options.ajaxOptions);\r\n                    ssi.ajaxCall(ajaxOptions, callback);\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.database['editRecord'] = Ss_input.Plugin.extend({\r\n        permissions: 'edit',\r\n        template: {\r\n            form: '<form id=\"ssi-formData\"><table><#=formItem#></table></form>',\r\n            formItem: '<tr><th><label for=\"<#=inputId#>\" class=\"<#=labelClass#>\"><#=label#></label></th><td><#=input#></td></tr>'\r\n        },\r\n        defaults: {\r\n            sendId: 'inUrl',\r\n            ajaxOptions: {\r\n                stringifyData: true,\r\n                contentType: \"application/json\"\r\n            },\r\n            data: {}\r\n        },\r\n        init: function () {\r\n            this.database = this.ssi.database;\r\n            this.setButtons();\r\n        },\r\n        setEvents: function () {\r\n        },\r\n        setButtons: function () {\r\n            var thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-editDocumentIcon\"></span> ' + this.translate('editDocument'),\r\n                id: '',\r\n                className: 'ssi-editFile',\r\n                method: function (e) {\r\n                    thisS.edit(thisS.ssi.getSelectedData()[0]);\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu']);\r\n        },\r\n        edit: function (data) {\r\n            var ssi = this.ssi, thisS = this;\r\n            var content = $(this.database.getForm(data));\r\n            if (this.options.sendId == 'inForm') {\r\n                content.append('<input type=\"hidden\" class=\"ssi-inputField\" name=\"' + this.database.id + '\" value=\"' + data[this.database.currentCollection.id] + '\">');\r\n            }\r\n            if (ssi.checkPermissions('write', 'saveAsNew'))\r\n                var topButtons = [{\r\n                    title: this.translate('saveAsNew'),\r\n                    label: '<div class=\"icon ssi-saveIcon\"></div>+',\r\n                    method: function () {\r\n                        thisS.save(data[thisS.database.currentCollection.id], function (data, textStatus, xhr, formData) {\r\n                            if (xhr.status == 201 || xhr.status == 200) {\r\n                                ssi.plugins['scan'].appendItems((typeof data === 'object' && data.hasOwnProperty(thisS.database.currentCollection.id) ? data : formData));\r\n                                ssi.notify('success', thisS.translate('successSave'))\r\n                            }\r\n                        }, {\r\n                            url: thisS.database.currentCollection.baseUrl.replace('/:id', ''),\r\n                            type: 'POST'\r\n                        });\r\n                    }\r\n                }];\r\n            var modalOptions = {\r\n                content: content[0].outerHTML,\r\n                buttons: [{\r\n                    label: '<div class=\"icon ssi-saveIcon\"></div>&nbsp;' + this.translate('save'),\r\n                    closeAfter: false,\r\n                    className: 'ssi-mBtn',\r\n                    method: function (e, modal) {\r\n                        var id = data[thisS.database.currentCollection.id];\r\n                        thisS.save(id, function (data, textStatus, xhr, formData) {\r\n                            if (xhr.status == 200) {\r\n                                if (modal)\r\n                                    modal.close();\r\n                                ssi.plugins['scan'].resetItem(id, (typeof data === 'object' && data.hasOwnProperty(thisS.database.currentCollection.id) ? data : formData));\r\n                                ssi.notify('success', thisS.translate('successSave'));\r\n                            }\r\n                        });\r\n                    }\r\n                }]\r\n            };\r\n\r\n            this.database.createWindow(modalOptions, topButtons);\r\n        },\r\n        save: function (id, callback, options) {\r\n            var formData = this.database.getFormData();\r\n            if (!formData)return;\r\n            var ssi = this.ssi, url;\r\n            var data = $.extend({}, this.options.data, formData);\r\n            if (this.options.sendId == 'inUrl') {\r\n                url = (this.database.currentCollection.baseUrl.indexOf('/:id') == -1 ? this.database.currentCollection.baseUrl + '/' + id : this.database.currentCollection.baseUrl.replace(':id', id));\r\n            } else {\r\n                url = this.database.currentCollection.baseurl;\r\n            }\r\n            var ajaxOptions = $.extend({}, {\r\n                data: data,\r\n                type: 'PUT',\r\n                url: url\r\n            }, options, this.options.ajaxOptions);\r\n\r\n            ssi.ajaxCall(ajaxOptions, function (data, textStatus, xhr) {\r\n                if (typeof callback === 'function') {\r\n                    callback(data, textStatus, xhr, formData);\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['sidebar'] = Ss_input.Plugin.extend({\r\n        template: {\r\n            sideBar: '<div id=\"ssi-sidebar\" class=\"ssi-sidebar\"><div id=\"ssi-sidebarContent\"></div></div>',\r\n            treeItem: '<li id=\"<#=id#>\" class=\"<#=className#>\"><a class=\"ssi-listAnchor\" href=\"<#=href#>\" ><#=name#></a><#=children#></li>',\r\n            hideButton: '<a href=\"#\" id=\"ssi-hideSideBar\"><div class=\"icon ssi-sideBarIcon\"></div></a>',\r\n            dragBar: '<div id=\"dragbar\"></div>'\r\n        },\r\n        defaults: {\r\n            state: 'open',\r\n            data: [],\r\n            fieldDefinition: {\r\n                name: 'name',\r\n                id: 'id',\r\n                url: 'url',\r\n                children: 'children',\r\n                className: 'className'\r\n            },\r\n            className: '',\r\n            resizable: true,\r\n            mode: 'treeView'\r\n        },\r\n        init: function () {\r\n            this.ssi.$content.find('.ssi-mainContent').prepend(this.template.sideBar);\r\n            this.options.fieldDefinition = $.extend({}, this.defaults.fieldDefinition, this.options.fieldDefinition);\r\n            if (this.options.data.length)\r\n                this.setSidebar(this.options.data);\r\n            this.setButtons();\r\n        },\r\n        setSidebar: function (data) {\r\n            var $sidebar = this.ssi.$content.find('#ssi-sidebarContent');\r\n            if (this.options.state == 'close') {\r\n                $sidebar.parent().addClass('ssi-verticalSlide')\r\n            }\r\n            $sidebar.addClass(this.options.className)\r\n             .html(this.setList(data));\r\n\r\n            if (this.options.mode == 'treeView') {\r\n                ssi_treeView($sidebar);\r\n            } else if (this.options.mode == 'accordion') {\r\n                ssi_accordion($sidebar);\r\n            } else if (this.options.mode == 'dropDown') {\r\n\r\n                $sidebar.addClass('ssi-dropDownWrapper');\r\n                $sidebar.parent().addClass('ssi-dropDownMode')\r\n            }\r\n            return this;\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi;\r\n            $(this.template.hideButton).on('click.ssi', function () {\r\n                var $sideBar = ssi.$content.find('#ssi-sidebar');\r\n                $sideBar.toggleClass('ssi-verticalSlide');\r\n                return false;\r\n            }).prependTo(ssi.$content.find('.ssi-topBarButtonArea'));\r\n\r\n            if (this.options.resizable)\r\n                this.setDragBar();\r\n        },\r\n        deleteTree: function (id) {\r\n            var $tree = this.ssi.$content.find('#ssi-sidebar').find(document.getElementById(id));\r\n            var $parent = $tree.parent();\r\n            $tree.remove();\r\n            if ($parent.children().length === 0) {\r\n                $parent.parent().removeClass('parent').find('a.ssi-treeTrigger').remove();\r\n            }\r\n        },\r\n        addTree: function (data, parent, tree) {\r\n            parent = parent || 'ssi-sidebarContent';\r\n            var $parent = this.ssi.$content.find(document.getElementById(parent));\r\n            if (this.options.mode != 'treeView')$parent = this.ssi.$content.find('#ssi-sidebarContent').children('ul');\r\n            tree = tree || this.setList(data, true);\r\n            var $ul = $parent.children('ul');\r\n            $ul.append(tree);\r\n            if (!$parent.hasClass('parent')) {\r\n                $parent.addClass('parent');\r\n                if (this.options.mode == 'treeView') $parent.prepend('<a class=\"ssi-treeTrigger\" href=\"#\">');\r\n            }\r\n        },\r\n        editTreeLink: function (id, path, name, newId) {\r\n            this.ssi.$content.find('#ssi-sidebar').find(document.getElementById(id)).children('a.ssi-listAnchor').attr({\r\n                'href': path,\r\n                id: newId\r\n            }).html(name);\r\n        },\r\n        setList: function (data, single) {\r\n            data = Ss_input.tools.toArray(data);\r\n            var template = Ss_input.tools.template,\r\n             list = \"\", children, className,\r\n             fieldDefinition = this.options.fieldDefinition;\r\n            for (var i = 0, length = data.length; i < length; i++) {\r\n                //removeIf(production)\r\n                /*\r\n                 //endRemoveIf(production)\r\n                 try {\r\n                 //removeIf(production)\r\n                 */\r\n                //endRemoveIf(production)\r\n                className = '';\r\n                children = '';\r\n                var childrenData = data[i][fieldDefinition.children];\r\n                if (childrenData && childrenData.length > 0) {\r\n                    children = this.setList(childrenData);\r\n                    className = 'parent ' + (data[i].active ? 'active ' : '');\r\n                }\r\n                list += template(this.template.treeItem, {\r\n                    id: data[i][fieldDefinition.id] || \"\",\r\n                    href: data[i][fieldDefinition.url] || \"\",\r\n                    name: data[i][fieldDefinition.name] || \"\",\r\n                    children: children || \"<ul></ul>\",\r\n                    className: className + (data[i][fieldDefinition.className] || \"\")\r\n                });\r\n                //removeIf(production)\r\n                /*\r\n                 //endRemoveIf(production)\r\n                 } catch (err) {\r\n                 console.log(err);\r\n                 }\r\n                 //removeIf(production)\r\n                 */\r\n                //endRemoveIf(production)\r\n            }\r\n            return !single ? '<ul>' + list + '</ul>' : list;\r\n        },\r\n        setDragBar: function () {\r\n            var ssi = this.ssi;\r\n            ssi.$content.find('#ssi-items').prepend(this.template.dragBar);\r\n            ssi.$content.mouseup(function (e) {\r\n                if (dragging) {\r\n                    var sideBar = ssi.$content.find('#ssi-sidebar');\r\n                    var parentWidth = sideBar.parent().width();\r\n                    var minWidth = parentWidth * (10 / 100);\r\n                    var maxWidth = parentWidth * (40 / 100);\r\n                    if (relativeX < minWidth) {\r\n                        relativeX = minWidth;\r\n                    }\r\n                    if (relativeX > maxWidth) {\r\n                        relativeX = maxWidth;\r\n                    }\r\n\r\n                    var sideWidth = (100 * relativeX / parentWidth);\r\n                    sideBar.css(\"width\", sideWidth + '%');\r\n                    ssi.$content.find('#ghostbar').remove();\r\n                    ssi.$content.off('mousemove');\r\n                    dragging = false;\r\n                }\r\n            });\r\n\r\n            /**@author http://stackoverflow.com/a/6219522/4801797**/\r\n            var dragging = false,\r\n             relativeX;\r\n            ssi.$content.find('#dragbar').mousedown(function (e) {\r\n                e.preventDefault();\r\n                dragging = true;\r\n                var main = ssi.$content.find('#ssi-items');\r\n                var ghostbar = $('<div>',\r\n                 {\r\n                     id: 'ghostbar',\r\n                     css: {\r\n                         height: '100%',\r\n                         top: 0,\r\n                         left: 0\r\n                     }\r\n                 }).appendTo(main);\r\n                $(document).mousemove(function (e) {\r\n                    relativeX = (e.pageX - main.offset().left);\r\n                    ghostbar.css(\"left\", relativeX);\r\n                });\r\n            });\r\n        }\r\n    });\r\n    var ssi_accordion = function (element) {\r\n        $(element).addClass('ssi-accordion').on('click', 'li', function () {\r\n            var $thisLi = $(this);\r\n            $thisLi.siblings('.active').removeClass('active').children('ul').slideUp(300);\r\n            $thisLi.children('ul').slideToggle();\r\n            $thisLi.toggleClass('active');\r\n            return false;\r\n        })\r\n\r\n    };\r\n    var ssi_treeView = function (element) {\r\n        var $element = $(element);\r\n        $element.addClass('ssi-treeView')\r\n         .find('li.parent')\r\n         .prepend('<a class=\"ssi-treeTrigger\" href=\"#\"></a>')\r\n         .filter('.active').children('ul').slideToggle('fast');\r\n        $element.off('.ssi_treeView');\r\n        $element.on('click.ssi_treeView', '.ssi-treeTrigger', function () {\r\n            var element = $(this);\r\n            var $parent = element.parent();\r\n            if ($parent.find('.ssi-treeViewRCurrent').length && $parent.hasClass('active')) {\r\n                element.next('a').addClass('ssi-treeViewCurrent');\r\n            } else {\r\n                element.next('a').removeClass('ssi-treeViewCurrent');\r\n            }\r\n            $parent.toggleClass('active');\r\n            $parent.children('ul').slideToggle('fast');\r\n            return false;\r\n        });\r\n    };\r\n})(jQuery);\r\n\r\n","(function ($) {\r\n    Ss_input.plugins['selectAll'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            selectableClasses: {},\r\n            translateFields:''\r\n        },\r\n        require: ['select'],\r\n        init: function () {\r\n            this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            this.options.translateFields = this.options.translateFields || ssi.options.translateFields;\r\n            var buttons = [{\r\n                label: '<span class=\"icon ssi-selectAllIcon\"></span> ' + this.translate('all') + ' <span class=\"ssi-keyShort\">ctrl + a</span>',\r\n                method: function () {\r\n                    thisS.select('ssi-selectable');\r\n                },\r\n                keyPress: {\r\n                    keyCode: '65',\r\n                    ctrl: true\r\n                }\r\n            }];\r\n            for (var alias in this.options.selectableClasses) {\r\n                buttons.push({\r\n                    label: '<span class=\"ssi-letterIcon\">' + alias[0] + '</span><span class=\"ssi-title\"> ' + this.translate(alias,this.options.translateFields) + '</span>',\r\n                    attributes: {'data-ssi_title': alias},\r\n                    method: function () {\r\n                        thisS.select(thisS.options.selectableClasses[$(this).attr('data-ssi_title')]);\r\n                    }\r\n                })\r\n            }\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-selectionIcon\"></span> ' + this.translate('select'),\r\n                id: '',\r\n                className: '',\r\n                subMenu: buttons\r\n            }, 'listButton', ['options']);\r\n        },\r\n        select: function (selection) {\r\n            var ssi = this.ssi;\r\n            var mainTable = ssi.$content.find('.' + selection);\r\n            var items = mainTable.find('.ssi-selectable');\r\n            if (!items.length)items = mainTable;\r\n            var length = items.length;\r\n            var select = ssi.plugins['select'];\r\n            select.removeSelectedList();\r\n            items.addClass('ssi-mActive');\r\n            if (length > 0) {\r\n                ssi.$content.find('.ssi-selectionRequired').removeClass('ssi-hidden');\r\n                ssi.$content.find('.ssi-mustSelect').removeClass('disabled');\r\n            }\r\n            for (var i = 0; i < length; i++) {\r\n                select.selectionList.push($(items[i]).attr('data-ID'));\r\n            }\r\n        }\r\n\r\n    })\r\n})(jQuery);\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n\r\n */","(function ($) {\r\n    Ss_input.plugins['cache'] = Ss_input.Plugin.extend({\r\n        defaults: {\r\n            cacheLimit: 5,\r\n            cacheTo: 'localStorage'\r\n        },\r\n        init: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            this.ssi.addButton({\r\n                label: '<span class=\"icon ssi-cacheIcon\"></span> ' + this.translate('cleanCache'),\r\n                id: '',\r\n                className: '',\r\n                method: function () {\r\n                    thisS.cleanHistory();\r\n                }\r\n            }, 'listButton', ['options']);\r\n            this.cachedPages = [];\r\n            if (this.options.cacheLimit < 1) {\r\n                this.options.cacheLimit = 1;\r\n            }\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.$element.on('closeAction.ssi', function () {\r\n                sessionStorage.removeItem(\"historyCache\" + ssi.uniqueId);\r\n                thisS.cachedPages = [];\r\n            }).on('scanAction.ssi', function (e, page) {\r\n                thisS.cachePage(page);\r\n            }).on('emptyPageAction.ssi', function () {\r\n                var historyCache = this.getCache();\r\n\r\n                thisS.getCachedPage(thisS.ssi.currentCollection.id, historyCache).data = [];\r\n                thisS.setCache(historyCache);\r\n            }).on('appendItemSetAction.ssi', function (e, data) {\r\n                var historyCache = thisS.getCache();\r\n                var cachedPage = thisS.getCachedPage('', historyCache);\r\n                cachedPage.data = cachedPage.data.concat(data);\r\n                thisS.setCache(historyCache);\r\n\r\n            }).on('removeItemAction.ssi', function (e, id) {\r\n                thisS.removeCachedItem(thisS.ssi.plugins['scan'].options.idField, id);\r\n            }).on('removeCollectionAction.ssi', function (e, id) {\r\n                thisS.removeCachedPage(id)\r\n            });\r\n\r\n        },\r\n        getCache: function () {\r\n            try {\r\n                return this.options.cacheTo == 'localStorage' ? JSON.parse(sessionStorage.getItem(\"historyCache\" + this.ssi.uniqueId)) || [] : this.cachedPages;\r\n            } catch (e) {\r\n                //removeIf(production)\r\n                console.log(e);\r\n                //endRemoveIf(production)\r\n                return [];\r\n            }\r\n        },\r\n        setCache: function (data) {\r\n            if (this.options.cacheTo != 'localStorage')return this;\r\n            try {\r\n                sessionStorage.setItem(\"historyCache\" + this.ssi.uniqueId, JSON.stringify(data));\r\n                return this;\r\n            } catch (e) {\r\n                //removeIf(production)\r\n                console.log(e);\r\n                //endRemoveIf(production)\r\n                return false;\r\n            }\r\n        },\r\n        removeCachedPage: function (id, historyCache) {\r\n            historyCache = historyCache || this.getCache();\r\n            Ss_input.tools.removeObjFromArray(historyCache, 'id', id);\r\n            this.setCache(historyCache);\r\n            return this;\r\n        },\r\n        removeCachedItem: function (key, value, page, historyCache) {\r\n            key = key || 'name';\r\n            historyCache = historyCache || this.getCache();\r\n            if (typeof page === 'string' && page !== '') {\r\n                page = this.getCachedPage(page, historyCache);\r\n            } else {\r\n                page = page || this.getCachedPage(this.ssi.currentCollection.id, historyCache);\r\n            }\r\n            if (page) {\r\n                Ss_input.tools.removeObjFromArray(page.data, key, value);\r\n                this.setCache(historyCache);\r\n            }\r\n            return this;\r\n        },\r\n        cachePage: function (data, historyCache) {\r\n            historyCache = historyCache || this.getCache();\r\n            if (historyCache.length >= this.options.cacheLimit) {\r\n                historyCache.shift();\r\n            }\r\n            historyCache.push(data);\r\n            this.setCache(historyCache);\r\n            return this.ssi;\r\n        },\r\n        cacheItem: function (item, page, historyCache) {\r\n            historyCache = historyCache || this.getCache();\r\n            if (typeof page === 'string' && page !== '') {\r\n                page = this.getCachedPage(page, historyCache);\r\n            } else {\r\n                page = page || this.getCachedPage(this.ssi.currentCollection.id, historyCache);\r\n            }\r\n            if (page) {\r\n                page.data.push(item)\r\n            }\r\n            this.setCache(historyCache);\r\n            return this.ssi;\r\n        },\r\n        getCachedPage: function (path, historyCache) {\r\n            historyCache = historyCache || this.getCache();\r\n            path = path || this.ssi.currentCollection.id || '/';\r\n            return Ss_input.tools.findByKey(historyCache, 'id', path);\r\n        },\r\n        getCachedItem: function (key, value, page, historyCache) {\r\n            historyCache = historyCache || this.getCache();\r\n            if (typeof page === 'string' && page !== '') {\r\n                page = this.getCachedPage(page, historyCache);\r\n            } else {\r\n                page = page || this.getCachedPage(this.ssi.currentCollection.id, historyCache);\r\n            }\r\n            if (page) {\r\n                return Ss_input.tools.findByKey(page.data, 'name', value);\r\n            }\r\n            return false;\r\n        },\r\n        cleanHistory: function () {\r\n            var currentPage = this.getCachedPage();\r\n            sessionStorage.removeItem(\"historyCache\");\r\n            this.cachedPages = [];\r\n            this.setCache([currentPage]);\r\n\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['infoBubble'] = Ss_input.Plugin.extend({\r\n        template: '<#var index=0;for(var dataName in data){if(eval(thisS.condition))continue;#><#=thisS.translate(dataName,thisS.translateFields)#>: <#=data[dataName]#><br><#index++;if (index == thisS.options.limit)break;}#>',\r\n        defaults: {\r\n            limit:4,\r\n            excludeFields: [],\r\n            excludeItems: '',\r\n            translateFields: ''\r\n        },\r\n        init: function () {\r\n            this.options.translateFields = this.options.translateFields || this.ssi.options.translateFields;\r\n            this.setEvent().setCondition();\r\n            return this;\r\n        },\r\n        setCondition:function(){\r\n            if(this.options.excludeFields.length>0){\r\n                this.condition='$.inArray(dataName,thisS.options.excludeFields)>-1'\r\n            }else{\r\n                this.condition='false';\r\n            }\r\n            return this;\r\n        },\r\n        setEvent: function () {\r\n            var time, ssi = this.ssi, thisS = this;\r\n            ssi.$element.on('resetAction.ssi changeCollectionAction.ssi', function () {\r\n                if (time)\r\n                    clearTimeout(time);\r\n            }).on('changeSchemaAction.ssi', function (e, data) {\r\n                thisS.options.includeFields = data['details'];\r\n                thisS.setCondition();\r\n            });\r\n            ssi.$content.on({\r\n                'mouseenter.ssi': function (e) {\r\n                    e.preventDefault();\r\n                    if (!time) {\r\n                        time = setTimeout(function () {\r\n                            thisS.getInfoBubble(e);\r\n                        }, 2000)\r\n                    }\r\n                },\r\n                'mouseleave.ssi': function () {\r\n                    if (time) {\r\n                        clearTimeout(time);\r\n                        time = null;\r\n                    }\r\n                }\r\n            }, '.ssi-displayDiv');\r\n            return this;\r\n        },\r\n        getInfoBubble: function (e) {\r\n            var $target = $(e.currentTarget);\r\n            var data = this.ssi.getSelectedData($target)[0];\r\n            if (eval(Ss_input.tools.dataReplace(this.options.excludeItems)) == 'true') {\r\n                return;\r\n            }\r\n            var text = Ss_input.tools.template(this.template, {thisS: this, data: data});\r\n            var toolTip = Ss_input.tools.tooltip($target, text, true).appendTo($target.parents('#ssi-items'));\r\n            var relativeX = $target.position().left;\r\n            var relativeY = $target.position().top + $target.height() + 6;\r\n            $target.parents('#ssi-contentFiles').one('scroll', function () {\r\n                toolTip.remove();\r\n            });\r\n            toolTip.css({\r\n                 top: relativeY + 'px',\r\n                 left: relativeX + 'px'\r\n             })\r\n             .removeClass('ssi-fadeOut');\r\n            return this;\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['nameBubble'] = Ss_input.Plugin.extend({\r\n        init: function () {\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var time;\r\n            this.ssi.$element.on('resetAction.ssi changeCollectionAction.ssi', function () {\r\n                if (time)\r\n                    clearTimeout(time);\r\n            });\r\n            this.ssi.$content.on({\r\n                'mouseenter.ssi': function (e) {\r\n                    var $eventTarget = $(e.target);\r\n                    if ($eventTarget.outerWidth() < $eventTarget[0].scrollWidth) {\r\n                        if (!time) {\r\n                            time = setTimeout(function () {\r\n                                Ss_input.tools.tooltip($eventTarget, $eventTarget.html()).css('max-width', '350px');\r\n                            }, 2000)\r\n                        }\r\n                    }\r\n                },\r\n                'mouseleave.ssi': function (e) {\r\n                    if (time) {\r\n                        clearTimeout(time);\r\n                        time = null;\r\n                    }\r\n                }\r\n            }, '.ssi-itemName')\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    var ssi_rightMenu = false;\r\n    Ss_input.plugins['contextMenu'] = Ss_input.Plugin.extend({\r\n        rightClickItem: '',\r\n        template: '<div class=\"ssi-dropDownWrapper\"><ul id=\"ssi-contextMenuUl\" class=\"custom-menu ssi-actionBtns\"></ul></div>',\r\n        init: function () {\r\n            var ssi = this.ssi;\r\n            ssi.$content.append(this.template);\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            var contextHeight;\r\n            ssi.$element.on(\"resetAction.ssi\", function (e) {\r\n                thisS.rightClickItem = '';\r\n            });\r\n            ssi.$content.on(\"contextmenu\", function (e) {\r\n                if (!$(e.target).is('input')) {\r\n                    e.preventDefault();\r\n                    thisS.setRightClick(e);\r\n                    var $menu = ssi.$content.find('#ssi-contextMenuUl');\r\n                    var offset = $(this).offset();\r\n                    var relativeX = (e.pageX - offset.left);\r\n                    var relativeY = (e.pageY - offset.top);\r\n                    $menu.addClass('ssi-appear');\r\n                    if (!contextHeight) {\r\n                        setTimeout(function () {\r\n                            contextHeight = $menu.height();\r\n                        }, 150)\r\n                    }\r\n                    if (relativeY > (ssi.$content.height() - contextHeight + 75)) {\r\n                        relativeY -= contextHeight;\r\n                    }\r\n                    $menu.css({\r\n                        top: relativeY + \"px\",\r\n                        left: relativeX + \"px\"\r\n                    });\r\n                    ssi_rightMenu = true;\r\n                }\r\n            }).on('mouseup.ssi', function (e) {\r\n                 if (ssi_rightMenu) {\r\n                     var eventTarget = $(e.target);\r\n                     if (!eventTarget.parents(\"#ssi-contextMenuUl\").length > 0) {\r\n                         ssi.$content.find('#ssi-contextMenuUl').removeClass('ssi-appear');\r\n                         thisS.rightClickItem = '';\r\n                         ssi.$content.find('.ssi-mustSelect').addClass('disabled').prop('disabled', true);\r\n                         ssi_rightMenu = false;\r\n                     }\r\n                 }\r\n             })\r\n             .find('#ssi-contextMenuUl').on('mouseup.ssi', function () {\r\n                $(this).removeClass('ssi-appear');\r\n                ssi_rightMenu = false;\r\n            })\r\n        },\r\n        setRightClick: function (e) {\r\n            var ssi = this.ssi,\r\n             eventTarget = ssi.get$mainElement($(e.target));\r\n            if (eventTarget.hasClass('ssi-selectable')) {\r\n                var contextMenu= this.ssi.$content.find('#ssi-contextMenuUl');\r\n                contextMenu.find('.ssi-mustSelect').removeClass('disabled');\r\n                contextMenu.find('.ssi-hidden').removeClass('ssi-hidden');\r\n                this.rightClickItem = eventTarget;\r\n                ssi.checkExcludedButtons(function (hiddenFields) {\r\n                    hiddenFields = ssi.$content.find('#ssi-contextMenuUl').find(hiddenFields);\r\n                    var parent = hiddenFields.closest('ul');\r\n                    var allItems = parent.children();\r\n                    if (allItems.length - hiddenFields.length == 0) {\r\n                        parent.parent('li').addClass('ssi-hidden');\r\n                    }\r\n                });\r\n            } else {\r\n                ssi.$content.find('.ssi-mustSelect').addClass('disabled');\r\n            }\r\n        }\r\n\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.plugins['select'] = Ss_input.Plugin.extend({\r\n        init: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            ssi.addButton({\r\n                label: '<span class=\"icon ssi-selectIcon\"></span> ' + this.translate('select'),\r\n                id: '',\r\n                className: '',\r\n                method: function () {\r\n                    thisS.mSelect(ssi.get$mainElement(ssi.plugins['contextMenu'].rightClickItem));\r\n                },\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu']);\r\n            this.selectionList = [];\r\n            this.removeSelectedList();\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi;\r\n            var thisS = this;\r\n            var $btn = ssi.addButton({\r\n                label: '<div class=\"icon ssi-selectImgIcon\"></div>',\r\n                id: '',\r\n                className: 'ssi-selectItem',\r\n                method: function (e) {\r\n                    thisS.mSelect(ssi.get$mainElement($(e.currentTarget)));\r\n                },\r\n                selectionRequired: true\r\n            }, 'itemButton');\r\n            this.ssi.$element.on('appendItemAction.ssi', function (e, item) {\r\n                item.$element.find('div.ssi-optionsDiv').append($btn.clone(true));\r\n            });\r\n\r\n            ssi.$element.on('resetAction.ssi changeCollectionAction.ssi', function () {\r\n                thisS.removeSelectedList();\r\n            });\r\n            ssi.$content.on('click.ssi', '.ssi-selectable', function (e) {\r\n                var $e = $(e.currentTarget);\r\n                if (thisS.options.defaultPreviewType === 'details' && $e.hasClass('ssi-displayDiv'))return;\r\n                e.preventDefault();\r\n                if (e.ctrlKey) {\r\n                    thisS.mSelect(ssi.get$mainElement($e));\r\n                } else {\r\n                    $e = $(e.target);\r\n                    if (thisS.options.defaultPreviewType === 'details' && !$e.is('a') && !$e.parent().is('a'))\r\n                        thisS.removeSelectedList();\r\n                }\r\n\r\n            }).on('mousedown.ssi', function (e) {\r\n                var eventTarget;\r\n                if (thisS.selectionList.length > 0) {\r\n                    eventTarget = $(e.target);\r\n                    var docContainer = ssi.$content.find('.ssi-itemWrapper');\r\n                    var isETarget = docContainer.is(e.target);\r\n                    var hasETarget = docContainer.has(e.target).length === 0;\r\n                    var hasMultiOpt = eventTarget.hasClass('ssi-selectionRequired');\r\n                    if (thisS.selectionList.length > 0) {\r\n                        if (!e.ctrlKey) {\r\n                            if (!isETarget && hasETarget && !eventTarget.parents('ul').hasClass('ssi-dropdown') && !hasMultiOpt && !eventTarget.is('a') && !eventTarget.parents('ul').hasClass('custom-menu')) {\r\n                                thisS.removeSelectedList();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        mSelect: function (e) {\r\n            var $e = $(e),\r\n             ssi = this.ssi;\r\n            if (this.selectionList.length == 0) {\r\n                this.ssi.$content.find('.ssi-mustSelect').removeClass('disabled');\r\n                ssi.$content.find('.ssi-selectionRequired').removeClass('ssi-hidden');\r\n            }\r\n            if ($e.hasClass('ssi-mActive')) {\r\n                $e.removeClass('ssi-mActive');\r\n                Ss_input.tools.removeFromArray(this.selectionList, $e.attr('data-ID'));\r\n                if (this.selectionList.length < 1) {\r\n                    ssi.$content.find('.ssi-selectionRequired').addClass('ssi-hidden');\r\n                }\r\n            } else {\r\n                $e.addClass('ssi-mActive');\r\n                var info = $e.data('info');\r\n                this.selectionList.push($e.attr('data-ID'));\r\n            }\r\n            ssi.checkExcludedButtons();\r\n        },\r\n        removeSelectedList: function () {\r\n            var ssi = this.ssi;\r\n            this.selectionList = [];\r\n            ssi.$content.find('.ssi-mActive').removeClass('ssi-mActive');\r\n            ssi.$content.find('.ssi-selectionRequired').addClass('ssi-hidden');\r\n            ssi.$content.find('.ssi-mustSelect').addClass('disabled');\r\n            return this;\r\n        }\r\n\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystem['openInBrowser'] = Ss_input.Plugin.extend({\r\n        init: function () {\r\n            this.setButtons();\r\n        },\r\n        setButtons: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            ssi.addButton({\r\n                label: '<div class=\"icon ssi-openInBrowserIcon\">' + this.translate('openInBrowser') + '</div>',\r\n                method: function () {\r\n                    thisS.openInBrowser();\r\n                },\r\n                className:'ssi-openInBtn',\r\n                selectionRequired: true\r\n            }, 'listButton', ['contextMenu'], 'condition:(field:(mimeType)!=\"directory\")');\r\n        },\r\n        openInBrowser: function () {\r\n            var ssi = this.ssi;\r\n            var name = ssi.getSelectedField('name')[0];\r\n            window.open(ssi.fileSystem.getPath(name), '_blank');\r\n        }\r\n    });\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['delete'] = Ss_input.Handler.extend({\r\n        init: function () {\r\n            this.defaults = {\r\n                stringifyData: true,\r\n                sendId: 'inForm',\r\n                ajaxOptions: {url: this.storage.options.scriptsPath + '/deletedirAction.php'}\r\n            };\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var ssi = this.ssi, thisS = this;\r\n            this.ssi.$element.on('removeItemAction.ssi', function (e, id) {\r\n                if (!id.isFile(ssi.fileSystem.options.allowed)) {\r\n                    thisS.ssi.$element.trigger('removeCollectionAction.ssi', [id.replace(ssi.fileSystem.options.rootPath, '')]);\r\n                    var sideBar = ssi.plugins['sidebar'];\r\n                    if (sideBar) {\r\n                        sideBar.deleteTree(id);\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['imgBox'] = Ss_input.Handler.extend({\r\n        defaults: {\r\n            excludeItems: 'condition:(field:(mimeType).split(\"/\")[0]!=\"image\")',\r\n            imageField: 'path'\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['infoBubble'] = Ss_input.Handler.extend({\r\n        defaults: {\r\n            excludeFields: ['ext', 'name','path'],\r\n            includeFields: [],\r\n            excludeItems: 'condition:(field:(mimeType)==\"directory\")',\r\n            translateFields: true\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['scan'] = Ss_input.Handler.extend({\r\n        group: 'fileSystem',\r\n        defaults: {\r\n            titleField:'name',\r\n            idField: 'path',\r\n            displayImage: 'condition:(field:(mimeType).split(\"/\")[0]==\"image\"? field:(path):\"\")',\r\n            itemClass: 'condition:(field:(mimeType).split(\"/\")[0]==\"image\"||field:(mimeType).split(\"/\")[0]==\"directory\"?field:(mimeType).split(\"/\")[0]:\"ssi-empty\")'\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['search'] = Ss_input.Handler.extend({\r\n        group: ['fileSystem'],\r\n        init: function () {\r\n            this.defaults={\r\n                searchFields: ['name', 'ext', 'mimeType'],\r\n                deepSearch:{\r\n                    multiple:false,\r\n                    data:{\r\n                        'rootPath': this.ssi.fileSystem.options.rootPath + '/'\r\n                    },\r\n                    ajaxOptions:{\r\n                        url: this.ssi.fileSystem.options.scriptsPath + '/deepSearchAction.php'\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['selectAll'] = Ss_input.Handler.extend({\r\n        group: ['fileSystem'],\r\n        defaults: {\r\n            selectableClasses: {folders:'directory',images:'image',textFiles:'text'},\r\n            translateFields:true\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['selection'] = Ss_input.Handler.extend({\r\n        group: 'fileSystem',\r\n        defaults: {\r\n            pathType: 'relative',\r\n            excludeItems: 'condition:(field:(mimeType)==\"directory\")',\r\n            modeOptions: {\r\n                selectionField: 'path'\r\n            }\r\n        }, init: function () {\r\n            var plugin = this.plugin;\r\n            this.ssi.$element.on('selectionAction.ssi', function (e, selectedInfo) {\r\n                if (plugin.options.pathType == 'absolute') {\r\n                    selectedInfo.selection = document.location.protocol + '//' + window.location.hostname + selectedInfo.selection\r\n                }\r\n            });\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['sidebar'] = Ss_input.Handler.extend({\r\n        group: 'fileSystem',\r\n        defaults: {},\r\n        extend: {\r\n            copyTree: function (id, newHref, appendTree, cut) {\r\n                appendTree = appendTree || true;\r\n                var $tree = this.ssi.$content.find('#ssi-sidebar').find(document.getElementById(id));\r\n                if (!cut) {\r\n                    $tree = $tree.clone();\r\n                }\r\n                var childrenChildul = $tree.attr({'id': newHref}).children('a.ssi-listAnchor').attr({'href': newHref})\r\n                 .html(Ss_input.tools.basename(newHref))\r\n                 .find('ul');\r\n                childrenChildul.css('display', 'none');\r\n                childrenChildul.parent('li').find('.active').removeClass('active');\r\n                var $ul = $tree.parent();\r\n                if (!appendTree)return $tree;\r\n                if (appendTree)this.addTree('', this.ssi.fileSystem.options.rootPath + this.ssi.currentCollection.id, $tree);\r\n                if (cut) {\r\n                    if ($ul.children().length === 0) {\r\n                        $ul.parent().removeClass('parent').find('a.ssi-treeTrigger').remove();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        init: function () {\r\n            this.getData();\r\n            this.setEvent();\r\n            this.defaults = {\r\n                className: ' ssi-fileSystem',\r\n                fieldDefinition: {\r\n                    name: 'name',\r\n                    id: 'url',\r\n                    url: 'url',\r\n                    children: 'children',\r\n                    className: 'className'\r\n                }\r\n            }\r\n        },\r\n        getData: function () {\r\n            var thisS = this, ssi = this.ssi;\r\n            var callback = function (data) {\r\n                thisS.setSidebar(data);\r\n            };\r\n            var ajaxOptions = {\r\n                data: {'rootPath': this.storage.options.rootPath + '/'},\r\n                url: thisS.storage.options.scriptsPath + '/scanFolderAction.php'\r\n            };\r\n            ssi.ajaxCall(ajaxOptions, callback);\r\n\r\n        },\r\n        setSidebar: function (data) {\r\n            var menuData;\r\n            if (this.plugin.options.mode == 'treeView') {\r\n                menuData = [{\r\n                    name: 'root',\r\n                    url: this.ssi.fileSystem.getPath('/'),\r\n                    children: data,\r\n                    active: true\r\n                }]\r\n            } else {\r\n                data.unshift({\r\n                    name: '<div class=\"icon ssi-rootIcon\"></div> root',\r\n                    url: this.ssi.fileSystem.getPath('/'),\r\n                    id: '/',\r\n                    children: []\r\n                });\r\n                menuData = data;\r\n            }\r\n            this.plugin.setSidebar(menuData);\r\n        },\r\n        setEvent: function () {\r\n            var ssi = this.ssi;\r\n            ssi.$content.on('click.ssi', '#ssi-sidebarContent .ssi-listAnchor', function (e) {\r\n                ssi.fileSystem.scanDir($(e.currentTarget).attr('href'));\r\n                $(this).parents().find('.ssi-treeViewCurrent').removeClass('ssi-treeViewCurrent');\r\n                $(this).parents().find('.ssi-treeViewRCurrent').removeClass('ssi-treeViewRCurrent');\r\n                $(this).addClass('ssi-treeViewRCurrent');\r\n                return false;\r\n            });\r\n            ssi.$element.on('changeCollectionAction.ssi', function () {\r\n                ssi.$content.find('.ssi-treeViewCurrent').removeClass('ssi-treeViewCurrent');\r\n                ssi.$content.find('.ssi-treeViewRCurrent').removeClass('ssi-treeViewRCurrent');\r\n            });\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    Ss_input.fileSystemHandlers['sort'] = Ss_input.Handler.extend({\r\n        defaults: {\r\n            sortType: 'asc',\r\n            sortBy: 'ext',\r\n            sortableFields: ['ext', 'name', 'date']\r\n        }\r\n    })\r\n})(jQuery);","(function ($) {\r\n    var ssi_uploadedFiles = [];\r\n    Ss_input.fileSystemHandlers['upload'] = Ss_input.Handler.extend({\r\n        group: ['fileSystem'],\r\n        extend: {\r\n            onEachUpload: function (fileInfo) {\r\n                var thisS = this;\r\n                if (fileInfo.uploadStatus === 'success') {\r\n                    var name = fileInfo.name.replace(' ', '-');\r\n                    var item = {\r\n                        'name': name,\r\n                        'mimeType': fileInfo.type,\r\n                        'date': Ss_input.tools.getDate(),\r\n                        'path': thisS.ssi.fileSystem.getPath(name),\r\n                        'size': fileInfo.size,\r\n                        'ext': Ss_input.tools.getExtension(fileInfo.name),\r\n                        'dimensions': 'unknown'\r\n                    };\r\n                    ssi_uploadedFiles.push(item);\r\n                }\r\n            }\r\n        },\r\n        init: function () {\r\n            this.setEvents();\r\n        },\r\n        setEvents: function () {\r\n            var thisS = this;\r\n            this.ssi.$element.on('uploadCloseAction.ssi', function () {\r\n                thisS.appendItems();\r\n            });\r\n        },\r\n        appendItems: function () {\r\n            if (ssi_uploadedFiles.length)\r\n                this.ssi.plugins['scan'].appendItems(ssi_uploadedFiles);\r\n            ssi_uploadedFiles = [];\r\n            this.ssi.$element.trigger('resetAction');\r\n        }\r\n    })\r\n})(jQuery);"],"sourceRoot":"/source/"}